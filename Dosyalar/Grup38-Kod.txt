import os
from pathlib import Path

# BASE_DIR: projenin kök dizini
BASE_DIR = Path(__file__).resolve().parent.parent

# Güvenlik
SECRET_KEY = 'dupxm%*6-!31f1abhd&x-_sj_v%u=p^w+49vtyi+b2%&8jm_=&'
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Uygulamalar
INSTALLED_APPS = [
    # Django yerleşik
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Üçüncü taraf
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'corsheaders',

    # Proje app'leri
    'apps.users',
    'apps.ilanlar',
    'apps.temel_alan',
    'apps.birim',
    'apps.bolum',
    'apps.anabilim_dali',
    'apps.kadro_tipi',
    'apps.basvuru',
    'apps.faaliyet',
    'apps.juri',
    'apps.sistem_ayarlari',
    'apps.belge_sablonu',
    'apps.log_kaydi',
    'apps.atama_kriteri',
    'apps.bildirim',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS ayarları
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]

# CSRF güvenilir originler
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]

ROOT_URLCONF = 'academic_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR.parent / 'frontend' / 'dist',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'academic_portal.wsgi.application'

# Veritabanı (SQLite)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'users.User'

# Parola doğrulayıcılar
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Lokalizasyon
LANGUAGE_CODE = 'tr-TR'
TIME_ZONE = 'Europe/Istanbul'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Statik dosyalar (CSS/JS/Assets)
STATIC_URL = '/assets/'
STATICFILES_DIRS = [
    BASE_DIR.parent / 'frontend' / 'dist' / 'assets',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Medya dosyaları (kullanıcı yüklemeleri)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# dj-rest-auth ayarları
REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'apps.users.serializers.UserSerializer',
    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer',
    'JWT_AUTH_COOKIE': None,
    'JWT_AUTH_REFRESH_COOKIE': None,
    'USE_JWT': False,
    'SESSION_LOGIN': True,
}

# Session ve CSRF ayarları
SESSION_COOKIE_SECURE = False  # Development için False
CSRF_COOKIE_SECURE = False    # Development için False
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# academic_portal/urls.py

from django.contrib import admin
from django.urls import path, include, re_path
from rest_framework.routers import DefaultRouter

# --- Gerekli ViewSet ve View Importları ---
# Her app için ViewSet'leri doğrudan import etmek genellikle daha nettir
from apps.temel_alan.views import TemelAlanViewSet
from apps.birim.views import BirimViewSet
from apps.bolum.views import BolumViewSet
from apps.anabilim_dali.views import AnabilimDaliViewSet
from apps.kadro_tipi.views import KadroTipiViewSet
from apps.ilanlar.views import IlanViewSet # IlanViewSet doğrudan import edildi
from apps.sistem_ayarlari.views import SistemAyarlariViewSet
from apps.belge_sablonu.views import BelgeSablonuViewSet
from apps.log_kaydi.views import LogKaydiViewSet
from apps.atama_kriteri.views import AtamaKriteriViewSet
from apps.basvuru.views import (
    BasvuruViewSet, AdayFaaliyetViewSet,
    BasvuruSonucViewSet, Tablo5ViewSet
)
from apps.juri.views import JuriAtamaViewSet, JuriDegerlendirmeViewSet
from apps.bildirim.views import BildirimViewSet
from apps.users.views import UserViewSet

# Fonksiyon bazlı view'leri import et (gerekirse alias ile)
from apps.juri import views as juri_views # get_jury_dashboard_stats için
from apps.users import views as user_views # set_csrf_token için
from apps.ilanlar import views as ilan_views # get_manager_dashboard_data için


# --- DRF Router ---
router = DefaultRouter()

# ViewSet'leri router'a kaydet (doğrudan isimleriyle)
router.register(r'temel-alan', TemelAlanViewSet)
router.register(r'birim', BirimViewSet)
router.register(r'bolum', BolumViewSet)
router.register(r'anabilim-dali', AnabilimDaliViewSet)
router.register(r'kadro-tipi', KadroTipiViewSet)
# ===> DÜZELTME: Doğrudan IlanViewSet kullanıldı <====
router.register(r'ilanlar', IlanViewSet)
router.register(r'sistem-ayarlari', SistemAyarlariViewSet)
router.register(r'belge-sablonlari', BelgeSablonuViewSet)
router.register(r'log-kayitlari', LogKaydiViewSet)
router.register(r'atama-kriterleri', AtamaKriteriViewSet)
router.register(r'basvurular', BasvuruViewSet)
router.register(r'aday-faaliyetler', AdayFaaliyetViewSet)
router.register(r'basvuru-sonuclar', BasvuruSonucViewSet)
router.register(r'tablo5', Tablo5ViewSet)
router.register(r'juri-atamalar', JuriAtamaViewSet)
router.register(r'juri-degerlendirmeler', JuriDegerlendirmeViewSet)
router.register(r'bildirimler', BildirimViewSet)
router.register(r'users', UserViewSet, basename='user')



# --- Ana URL Pattern'leri ---
urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/set-csrf/', user_views.set_csrf_token, name='set-csrf'),
    path('api/auth/', include('dj_rest_auth.urls')),
    path('api/jury-stats/', juri_views.get_jury_dashboard_stats, name='jury-stats'),
    path('api/manager-stats/', ilan_views.get_manager_dashboard_data, name='manager-stats'),
    path('api/admin-stats/', ilan_views.get_admin_dashboard_data, name='admin-stats'),
    path('api/', include(router.urls)), # Router en sonda
]

# Frontend dosyalarını servis etmek için
from django.views.generic import TemplateView
from django.views.generic.base import RedirectView

# Frontend ana sayfasını servis et
urlpatterns += [
    path('', TemplateView.as_view(template_name='index.html'), name='frontend'),
    # Tüm frontend rotalarını index.html'e yönlendir (SPA için)
    path('<path:path>', TemplateView.as_view(template_name='index.html'), name='frontend-catch-all'),
]

# SPA için: Sadece assets, static, media ile BAŞLAMAYAN path'ler index.html'e yönlendirilsin
urlpatterns += [
    re_path(r'^(?!static/|media/|assets/).*$', TemplateView.as_view(template_name='index.html')),
]

# --- Statik/Medya Ayarları ---
from django.conf import settings
from django.conf.urls.static import static

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)import os
from django.core.wsgi import get_wsgi_application

# Django'nun settings modülünü işaret edin
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'academic_portal.settings')

# WSGI uygulaması
application = get_wsgi_application()
from django.db import models
from apps.bolum.models import Bolum

class AnabilimDali(models.Model):
    ad = models.CharField(max_length=255, verbose_name="Anabilim Dalı Adı")
    bolum = models.ForeignKey(Bolum, on_delete=models.CASCADE, related_name="anabilim_dallari")

    class Meta:
        verbose_name = 'Anabilim Dalı'
        verbose_name_plural = 'Anabilim Dalları'

    def __str__(self):
        return self.ad
from rest_framework import viewsets
from .models import AnabilimDali
from .serializers import AnabilimDaliSerializer

class AnabilimDaliViewSet(viewsets.ModelViewSet):
    queryset = AnabilimDali.objects.all()
    serializer_class = AnabilimDaliSerializer
from rest_framework import serializers
from .models import AtamaKriteri

class AtamaKriteriSerializer(serializers.ModelSerializer):
    class Meta:
        model = AtamaKriteri
        fields = ['id', 'temel_alan', 'kadro_tipi',
                  'min_makale_sayisi', 'min_baslica_yazar',
                  'min_a1_a2_makale', 'min_a1_a4_makale',
                  'min_a1_a5_makale', 'min_a1_a6_makale',
                  'min_a1_a8_makale', 'min_kisisel_etkinlik',
                  'min_karma_etkinlik', 'min_tez_danismanligi',
                  'min_toplam_puan']
        read_only_fields = ['id']from django.db import models
from apps.temel_alan.models import TemelAlan
from apps.kadro_tipi.models import KadroTipi

class AtamaKriteri(models.Model):
    temel_alan = models.ForeignKey(TemelAlan, on_delete=models.CASCADE, related_name="atama_kriterleri")
    kadro_tipi = models.ForeignKey(KadroTipi, on_delete=models.CASCADE, related_name="atama_kriterleri")
    min_makale_sayisi = models.IntegerField(verbose_name="Minimum Makale Sayısı")
    min_baslica_yazar = models.IntegerField(verbose_name="Minimum Başlıca Yazar Sayısı")
    min_a1_a2_makale = models.IntegerField(default=0, verbose_name="Min A1-A2 Makale")
    min_a1_a4_makale = models.IntegerField(default=0, verbose_name="Min A1-A4 Makale")
    min_a1_a5_makale = models.IntegerField(default=0, verbose_name="Min A1-A5 Makale")
    min_a1_a6_makale = models.IntegerField(default=0, verbose_name="Min A1-A6 Makale")
    min_a1_a8_makale = models.IntegerField(default=0, verbose_name="Min A1-A8 Makale")
    min_kisisel_etkinlik = models.IntegerField(default=0, verbose_name="Min Kişisel Etkinlik")
    min_karma_etkinlik = models.IntegerField(default=0, verbose_name="Min Karma Etkinlik")
    min_tez_danismanligi = models.IntegerField(default=0, verbose_name="Min Tez Danışmanlığı")
    min_toplam_puan = models.IntegerField(verbose_name="Minimum Toplam Puan")

    class Meta:
        verbose_name = 'Atama Kriteri'
        verbose_name_plural = 'Atama Kriterleri'
        unique_together = ('temel_alan', 'kadro_tipi')

    def __str__(self):
        return f"{self.temel_alan} - {self.kadro_tipi}"
from rest_framework import viewsets
from .models import AtamaKriteri
from .serializers import AtamaKriteriSerializer

class AtamaKriteriViewSet(viewsets.ModelViewSet):
    queryset = AtamaKriteri.objects.all()
    serializer_class = AtamaKriteriSerializerfrom rest_framework import viewsets, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.db import IntegrityError
from .models import Basvuru, AdayFaaliyet, BasvuruSonuc, Tablo5
from .serializers import (
    BasvuruSerializer, AdayFaaliyetSerializer,
    BasvuruSonucSerializer, Tablo5Serializer
)

class BasvuruViewSet(viewsets.ModelViewSet):
    queryset = Basvuru.objects.all()
    serializer_class = BasvuruSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """
        Kullanıcının yetkisine göre başvuruları filtrele
        """
        queryset = Basvuru.objects.all()
        user = self.request.user
        
        # İlan ID'sine göre filtreleme
        ilan_id = self.request.query_params.get('ilan_id', None)
        if ilan_id:
            queryset = queryset.filter(ilan_id=ilan_id)
            
        return queryset

    def get_serializer_context(self):
        """Add request to serializer context"""
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        try:
            self.perform_create(serializer)
        except IntegrityError:
            return Response(
                {"message": "Bu ilana zaten başvuru yaptınız. Aynı ilana tekrar başvuru yapamazsınız."},
                status=status.HTTP_400_BAD_REQUEST
            )
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def perform_create(self, serializer):
        serializer.save(aday=self.request.user)

class AdayFaaliyetViewSet(viewsets.ModelViewSet):
    queryset = AdayFaaliyet.objects.all()
    serializer_class = AdayFaaliyetSerializer
    permission_classes = [IsAuthenticated]

class BasvuruSonucViewSet(viewsets.ModelViewSet):
    queryset = BasvuruSonuc.objects.all()
    serializer_class = BasvuruSonucSerializer
    permission_classes = [IsAuthenticated]

class Tablo5ViewSet(viewsets.ModelViewSet):
    queryset = Tablo5.objects.all()
    serializer_class = Tablo5Serializer
    permission_classes = [IsAuthenticated]import os
from django.utils.text import slugify
from django.db import models
from apps.users.models import User
from apps.ilanlar.models import Ilan
from apps.faaliyet.models import Faaliyet

def user_file_path(instance, filename, doc_type):
    user = instance.aday
    full_name = f"{user.first_name}_{user.last_name}".strip().replace(" ", "_")
    full_name = slugify(full_name) or "kullanici"
    ext = filename.split('.')[-1]
    return f"basvurular/{full_name}-{doc_type}.{ext}"

class Basvuru(models.Model):
    BASVURU_DURUMU_CHOICES = (
        ('BEKLEMEDE','Beklemede'),
        ('INCELEMEDE','İncelemede'),
        ('ONAYLANDI','Onaylandı'),
        ('REDDEDILDI','Reddedildi'),
    )
    aday = models.ForeignKey(User, on_delete=models.CASCADE, related_name="basvurular")
    ilan = models.ForeignKey(Ilan, on_delete=models.CASCADE, related_name="basvurular")
    durum = models.CharField(max_length=15, choices=BASVURU_DURUMU_CHOICES, default='BEKLEMEDE')
    basvuru_tarihi = models.DateTimeField(auto_now_add=True)
    guncelleme_tarihi = models.DateTimeField(auto_now=True)
    ozgecmis_dosyasi = models.FileField(
        upload_to=lambda instance, filename: user_file_path(instance, filename, "ozgecmis"),
        verbose_name="Özgeçmiş Dosyası", null=True, blank=True
    )
    diploma_belgeleri = models.FileField(
        upload_to=lambda instance, filename: user_file_path(instance, filename, "diploma"),
        verbose_name="Diploma Belgeleri", null=True, blank=True
    )
    yabanci_dil_belgesi = models.FileField(
        upload_to=lambda instance, filename: user_file_path(instance, filename, "yabanci_dil"),
        verbose_name="Yabancı Dil Belgesi", null=True, blank=True
    )

    class Meta:
        verbose_name = 'Başvuru'
        verbose_name_plural = 'Başvurular'
        unique_together = ('aday','ilan')

    def __str__(self):
        return f"{self.aday} - {self.ilan} ({self.get_durum_display()})"

class AdayFaaliyet(models.Model):
    basvuru = models.ForeignKey(Basvuru, on_delete=models.CASCADE, related_name="aday_faaliyetler")
    faaliyet = models.ForeignKey(Faaliyet, on_delete=models.CASCADE, related_name="aday_faaliyetler")
    baslik = models.CharField(max_length=255, verbose_name="Faaliyet Başlığı")
    aciklama = models.TextField(verbose_name="Açıklama")
    yazar_sayisi = models.IntegerField(default=1, verbose_name="Yazar Sayısı")
    baslica_yazar_mi = models.BooleanField(default=False, verbose_name="Başlıca Yazar mı?")
    kisi_puani = models.FloatField(blank=True, null=True, verbose_name="Kişi Puanı")
    kanit_belgesi = models.FileField(upload_to='kanitlar/', verbose_name="Kanıt Belgesi")
    olusturulma_tarihi = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Aday Faaliyet'
        verbose_name_plural = 'Aday Faaliyetler'

    def save(self, *args, **kwargs):
        base_puan = self.faaliyet.puan
        # ... (size'a göre k_katsayisi ve hesaplama) ...
        super().save(*args, **kwargs)

class BasvuruSonuc(models.Model):
    basvuru = models.OneToOneField(Basvuru, on_delete=models.CASCADE, related_name="sonuc")
    karar = models.CharField(max_length=15, choices=Basvuru.BASVURU_DURUMU_CHOICES, verbose_name="Karar")
    karar_tarihi = models.DateTimeField(auto_now_add=True)
    karar_veren = models.ForeignKey(User, on_delete=models.CASCADE, related_name="verdigi_kararlar")
    karar_raporu = models.FileField(upload_to='karar_raporlari/', blank=True, null=True, verbose_name="Karar Raporu")
    aciklama = models.TextField(blank=True, null=True, verbose_name="Açıklama")

    class Meta:
        verbose_name = 'Başvuru Sonuç'
        verbose_name_plural = 'Başvuru Sonuçları'

class Tablo5(models.Model):
    basvuru = models.OneToOneField(Basvuru, on_delete=models.CASCADE, related_name="tablo5")
    pdf_dosyasi = models.FileField(upload_to='tablo5/', verbose_name="Tablo 5 PDF Dosyası")
    toplam_puan = models.FloatField(verbose_name="Toplam Puan")
    olusturulma_tarihi = models.DateTimeField(auto_now_add=True)
    guncelleme_tarihi = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Tablo 5'
        verbose_name_plural = 'Tablo 5 Dosyaları'
from rest_framework import serializers
from .models import Basvuru, AdayFaaliyet, BasvuruSonuc, Tablo5
from apps.users.serializers import UserSerializer
from apps.ilanlar.serializers import IlanSerializer
from apps.ilanlar.models import Ilan

class BasvuruSerializer(serializers.ModelSerializer):
    aday = UserSerializer(read_only=True)
    ilan = serializers.PrimaryKeyRelatedField(queryset=Ilan.objects.all())
    ozgecmis_dosyasi = serializers.FileField(required=False)
    diploma_belgeleri = serializers.FileField(required=False)
    yabanci_dil_belgesi = serializers.FileField(required=False)

    class Meta:
        model = Basvuru
        fields = '__all__'
        read_only_fields = ['id', 'basvuru_tarihi', 'guncelleme_tarihi']

    def to_representation(self, instance):
        """Convert the instance to a representation that includes file URLs"""
        ret = super().to_representation(instance)
        request = self.context.get('request')
        
        if request is not None:
            if instance.ozgecmis_dosyasi:
                ret['ozgecmis_dosyasi'] = request.build_absolute_uri(instance.ozgecmis_dosyasi.url)
            if instance.diploma_belgeleri:
                ret['diploma_belgeleri'] = request.build_absolute_uri(instance.diploma_belgeleri.url)
            if instance.yabanci_dil_belgesi:
                ret['yabanci_dil_belgesi'] = request.build_absolute_uri(instance.yabanci_dil_belgesi.url)
        
        return ret

class AdayFaaliyetSerializer(serializers.ModelSerializer):
    class Meta:
        model = AdayFaaliyet
        fields = '__all__'
        read_only_fields = ['id', 'kisi_puani', 'olusturulma_tarihi']

class BasvuruSonucSerializer(serializers.ModelSerializer):
    class Meta:
        model = BasvuruSonuc
        fields = '__all__'
        read_only_fields = ['id', 'karar_tarihi']

class Tablo5Serializer(serializers.ModelSerializer):
    class Meta:
        model = Tablo5
        fields = '__all__'
        read_only_fields = ['id', 'olusturulma_tarihi', 'guncelleme_tarihi']
from rest_framework import viewsets
from .models import BelgeSablonu
from .serializers import BelgeSablonuSerializer

class BelgeSablonuViewSet(viewsets.ModelViewSet):
    queryset = BelgeSablonu.objects.all()
    serializer_class = BelgeSablonuSerializerfrom rest_framework import serializers
from .models import BelgeSablonu

class BelgeSablonuSerializer(serializers.ModelSerializer):
    class Meta:
        model = BelgeSablonu
        fields = [
            'id', 'tur', 'baslik', 'icerik', 'aktif',
            'olusturulma_tarihi', 'guncelleme_tarihi'
        ]
        read_only_fields = ['id', 'olusturulma_tarihi', 'guncelleme_tarihi']from django.db import models

class BelgeSablonu(models.Model):
    SABLON_TURU_CHOICES = (
        ('TABLO5', 'Tablo 5 Şablonu'),
        ('JURI_RAPORU', 'Jüri Rapor Şablonu'),
        ('KARAR_RAPORU', 'Karar Rapor Şablonu'),
        ('BASVURU_FORMU', 'Başvuru Formu'),
    )
    tur = models.CharField(max_length=15, choices=SABLON_TURU_CHOICES, verbose_name="Şablon Türü")
    baslik = models.CharField(max_length=255, verbose_name="Şablon Başlığı")
    icerik = models.TextField(verbose_name="Şablon İçeriği")
    aktif = models.BooleanField(default=True, verbose_name="Aktif mi?")
    olusturulma_tarihi = models.DateTimeField(auto_now_add=True)
    guncelleme_tarihi = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Belge Şablonu'
        verbose_name_plural = 'Belge Şablonları'

    def __str__(self):
        return f"{self.baslik} ({self.get_tur_display()})"
from django.db import models
from apps.temel_alan.models import TemelAlan
from apps.kadro_tipi.models import KadroTipi

class FaaliyetKategorisi(models.Model):
    kod = models.CharField(max_length=5, verbose_name="Kategori Kodu")
    baslik = models.CharField(max_length=255, verbose_name="Kategori Başlığı")
    aciklama = models.TextField(blank=True, null=True, verbose_name="Açıklama")

    class Meta:
        verbose_name = 'Faaliyet Kategorisi'
        verbose_name_plural = 'Faaliyet Kategorileri'

    def __str__(self):
        return f"{self.kod}. {self.baslik}"

class Faaliyet(models.Model):
    kategori = models.ForeignKey(FaaliyetKategorisi, on_delete=models.CASCADE, related_name="faaliyetler")
    kod = models.CharField(max_length=10, verbose_name="Faaliyet Kodu")
    baslik = models.CharField(max_length=255, verbose_name="Faaliyet Başlığı")
    puan = models.IntegerField(verbose_name="Puan Değeri")
    aciklama = models.TextField(blank=True, null=True, verbose_name="Açıklama")

    class Meta:
        verbose_name = 'Faaliyet'
        verbose_name_plural = 'Faaliyetler'
        unique_together = ('kategori', 'kod')

    def __str__(self):
        return f"{self.kod} - {self.baslik}"

# Detay modelleri:
class MakaleDetay(models.Model):
    Q_DILIMI_CHOICES = (('Q1','Q1'),('Q2','Q2'),('Q3','Q3'),('Q4','Q4'),('NONE','Yok'))
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="makale_detay")
    dergi_adi = models.CharField(max_length=255, verbose_name="Dergi Adı")
    cilt_no = models.CharField(max_length=50, verbose_name="Cilt No")
    sayfa = models.CharField(max_length=50, verbose_name="Sayfa")
    yil = models.IntegerField(verbose_name="Yıl")
    doi = models.CharField(max_length=255, blank=True, null=True, verbose_name="DOI")
    indeks = models.CharField(max_length=50, blank=True, null=True, verbose_name="İndeks")
    q_dilimi = models.CharField(max_length=4, choices=Q_DILIMI_CHOICES, default='NONE', verbose_name="Q Dilimi")
    derleme_mi = models.BooleanField(default=False, verbose_name="Derleme Makalesi mi?")

    class Meta:
        verbose_name = 'Makale Detay'
        verbose_name_plural = 'Makale Detayları'

class KitapDetay(models.Model):
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="kitap_detay")
    yayinevi = models.CharField(max_length=255, verbose_name="Yayınevi")
    isbn = models.CharField(max_length=20, verbose_name="ISBN")
    basim_yili = models.IntegerField(verbose_name="Basım Yılı")
    uluslararasi_mi = models.BooleanField(default=False, verbose_name="Uluslararası mı?")

    class Meta:
        verbose_name = 'Kitap Detay'
        verbose_name_plural = 'Kitap Detayları'

class AtifDetay(models.Model):
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="atif_detay")
    atif_yapilan_eser = models.CharField(max_length=255, verbose_name="Atıf Yapılan Eser")
    atif_yapan_eser = models.CharField(max_length=255, verbose_name="Atıf Yapan Eser")
    atif_yili = models.IntegerField(verbose_name="Atıf Yılı")
    atif_indeksi = models.CharField(max_length=50, blank=True, null=True, verbose_name="Atıf İndeksi")

    class Meta:
        verbose_name = 'Atıf Detay'
        verbose_name_plural = 'Atıf Detayları'

class TezDanismanligiDetay(models.Model):
    TEZ_TURU_CHOICES = (
        ('YUKSEK_LISANS','Yüksek Lisans'),
        ('DOKTORA','Doktora/Sanatta Yeterlik'),
        ('TIP_DIS_UZMANLIK','Tıp/Diş Uzmanlık'),
    )
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="tez_danismanligi_detay")
    ogrenci_adi = models.CharField(max_length=255, verbose_name="Öğrenci Adı")
    tez_konusu = models.CharField(max_length=255, verbose_name="Tez Konusu")
    tez_turu = models.CharField(max_length=20, choices=TEZ_TURU_CHOICES, verbose_name="Tez Türü")
    tamamlanma_tarihi = models.DateField(verbose_name="Tamamlanma Tarihi")
    es_danisman_mi = models.BooleanField(default=False, verbose_name="Eş Danışman mı?")

    class Meta:
        verbose_name = 'Tez Danışmanlığı Detay'
        verbose_name_plural = 'Tez Danışmanlığı Detayları'

class ProjeDetay(models.Model):
    PROJE_TURU_CHOICES = (
        ('AB','AB Çerçeve'),
        ('TUBITAK','TÜBİTAK'),
        ('KALKINMA_AJANSI','Kalkınma Ajansı'),
        ('SANAYI','Sanayi'),
        ('BAP','BAP'),
        ('DIGER','Diğer'),
    )
    PROJE_ROLU_CHOICES = (
        ('KOORDINATOR','Koordinatör'),
        ('YURUTUCU','Yürütücü'),
        ('ARASTIRMACI','Araştırmacı'),
        ('DANISMAN','Danışman'),
    )
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="proje_detay")
    proje_turu = models.CharField(max_length=20, choices=PROJE_TURU_CHOICES, verbose_name="Proje Türü")
    proje_rolu = models.CharField(max_length=15, choices=PROJE_ROLU_CHOICES, verbose_name="Proje Rolü")
    proje_butcesi = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="Proje Bütçesi")
    baslangic_tarihi = models.DateField(verbose_name="Başlangıç Tarihi")
    bitis_tarihi = models.DateField(blank=True, null=True, verbose_name="Bitiş Tarihi")
    destekleyen_kurulus = models.CharField(max_length=255, verbose_name="Destekleyen Kuruluş")

    class Meta:
        verbose_name = 'Proje Detay'
        verbose_name_plural = 'Proje Detayları'

class SanatsalFaaliyetDetay(models.Model):
    ETKINLIK_TURU_CHOICES = (
        ('KISISEL','Kişisel'),
        ('KARMA','Karma'),
        ('RESITAL','Resital'),
        ('KONSER','Konser'),
        ('DIGER','Diğer'),
    )
    aday_faaliyet = models.OneToOneField('basvuru.AdayFaaliyet', on_delete=models.CASCADE, related_name="sanatsal_faaliyet_detay")
    etkinlik_turu = models.CharField(max_length=10, choices=ETKINLIK_TURU_CHOICES, verbose_name="Etkinlik Türü")
    etkinlik_yeri = models.CharField(max_length=255, verbose_name="Etkinlik Yeri")
    etkinlik_tarihi = models.DateField(verbose_name="Etkinlik Tarihi")
    uluslararasi_mi = models.BooleanField(default=False, verbose_name="Uluslararası mı?")

    class Meta:
        verbose_name = 'Sanatsal Faaliyet Detay'
        verbose_name_plural = 'Sanatsal Faaliyet Detayları'
from django.db import models
from apps.birim.models import Birim
from apps.bolum.models import Bolum
from apps.anabilim_dali.models import AnabilimDali
from apps.kadro_tipi.models import KadroTipi

class Ilan(models.Model):
    baslik = models.CharField(max_length=255, verbose_name="İlan Başlığı")
    aciklama = models.TextField(verbose_name="İlan Açıklaması")
    birim = models.ForeignKey(Birim, on_delete=models.CASCADE, related_name="ilanlar")
    bolum = models.ForeignKey(Bolum, on_delete=models.CASCADE, related_name="ilanlar")
    anabilim_dali = models.ForeignKey(AnabilimDali, on_delete=models.CASCADE, related_name="ilanlar")
    kadro_tipi = models.ForeignKey(KadroTipi, on_delete=models.CASCADE, related_name="ilanlar")
    baslangic_tarihi = models.DateTimeField(verbose_name="Başlangıç Tarihi")
    bitis_tarihi = models.DateTimeField(verbose_name="Bitiş Tarihi")
    olusturulma_tarihi = models.DateTimeField(auto_now_add=True)
    olusturan = models.ForeignKey(
        'users.User', 
        on_delete=models.CASCADE, 
        related_name="olusturulan_ilanlar"
    )
    aktif = models.BooleanField(default=True, verbose_name="Aktif mi?")

    class Meta:
        verbose_name = 'İlan'
        verbose_name_plural = 'İlanlar'

    def __str__(self):
        return self.baslik
# apps/ilanlar/serializers.py
from rest_framework import serializers
from .models import Ilan
# İlişkili isimleri göstermek için StringRelatedField veya diğer serializer'lar import edilebilir
# from django.contrib.auth import get_user_model
# User = get_user_model()

class IlanSerializer(serializers.ModelSerializer):
    # ===> Okuma İşlemleri İçin İlişkili Alan Adları (Önerilen) <====
    # Bu alanlar API yanıtında ID yerine isimlerin görünmesini sağlar
    # source kullanarak doğru model alanlarına işaret edilir
    olusturan_username = serializers.CharField(source='olusturan.username', read_only=True)
    kadro_tipi_ad = serializers.CharField(source='kadro_tipi.tip', read_only=True)
    birim_ad = serializers.CharField(source='birim.ad', read_only=True)
    bolum_ad = serializers.CharField(source='bolum.ad', read_only=True)
    anabilim_dali_ad = serializers.CharField(source='anabilim_dali.ad', read_only=True)

    class Meta:
        model = Ilan
        fields = [
            'id', 'baslik', 'aciklama',
            'birim',        # Yazma işlemi için Birim ID'si
            'bolum',        # Yazma işlemi için Bolum ID'si
            'anabilim_dali',# Yazma işlemi için AnabilimDali ID'si
            'kadro_tipi',   # Yazma işlemi için KadroTipi ID'si
            'baslangic_tarihi', 'bitis_tarihi', 'aktif',
            'olusturulma_tarihi', # ReadOnly
            'olusturan',    # Yazma için ReadOnly olacak, Okuma için ID dönecek
            # Okuma için eklenen alanlar:
            'olusturan_username', 'kadro_tipi_ad', 'birim_ad', 'bolum_ad', 'anabilim_dali_ad',
        ]
        # ====> DÜZELTME: 'olusturan' BURAYA EKLENDİ <====
        # 'olusturan' alanı view (perform_create) tarafından set edileceği için
        # serializer'ın input olarak beklemesine gerek yok.
        read_only_fields = ['id', 'olusturulma_tarihi', 'olusturan']# apps/ilanlar/views.py

from rest_framework import viewsets, status, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly
from rest_framework.response import Response
from django.utils import timezone
from datetime import timedelta
from django.db.models import Count, Q
# ===> DOĞRU USER MODELİ IMPORTU <====
from django.contrib.auth import get_user_model
User = get_user_model() # Aktif User modelini al

# Bu view dosyasının modelleri ve serializer'ı
from .models import Ilan
from .serializers import IlanSerializer

# Diğer app modelleri (doğru yollardan import edin)
from apps.basvuru.models import Basvuru
from apps.juri.models import JuriAtama, JuriDegerlendirme
# from apps.bolum.models import Bolum # Gerekiyorsa import edin


# --- IlanViewSet ---
class IlanViewSet(viewsets.ModelViewSet):
    queryset = Ilan.objects.all().order_by('-olusturulma_tarihi')
    serializer_class = IlanSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly] # İzinleri ayarlayın

    # ====> BU METOT ÖNEMLİ <====
    def perform_create(self, serializer):
        """Yeni ilan oluşturulurken 'olusturan' alanını otomatik olarak ayarlar."""
        serializer.save(olusturan=self.request.user)


# --- Yönetici Dashboard View Fonksiyonu ---
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_manager_dashboard_data(request):
    """
    Yönetici Paneli için özet verileri hesaplar ve döndürür.
    """
    # Kullanıcının yönetici olup olmadığını kontrol et
    if getattr(request.user, 'user_type', None) != 'YONETICI':
        return Response({"detail": "Bu sayfaya erişim yetkiniz yok."}, status=status.HTTP_403_FORBIDDEN)

    today = timezone.localdate()
    next_week = today + timedelta(days=7)
    try:
        # İstatistikler
        all_ilanlar = Ilan.objects.all()
        active_ilan_count = all_ilanlar.filter(aktif=True).count()
        total_ilan_count = all_ilanlar.count()
        today_basvuru_count = Basvuru.objects.filter(basvuru_tarihi__date=today).count()
        ongoing_application_statuses = ['Beklemede', 'Değerlendirmede', 'Jüri Atandı']
        ongoing_applications_count = Basvuru.objects.filter(durum__in=ongoing_application_statuses).count()
        completed_eval_count = JuriDegerlendirme.objects.count()
        past_due_assignments = JuriAtama.objects.filter(ilan__bitis_tarihi__date__lt=today)
        evaluated_past_due_count = JuriDegerlendirme.objects.filter(juri_atama__in=past_due_assignments).count()
        missing_reports_count = past_due_assignments.count() - evaluated_past_due_count
        most_applied = Ilan.objects.annotate(num_basvurular=Count('basvurular')).filter(num_basvurular__gt=0).order_by('-num_basvurular').first()
        most_applied_text = most_applied.baslik if most_applied else "-"
        stats = {
            'totalPostings': total_ilan_count, 'activePostings': active_ilan_count,
            'ongoingApplications': ongoing_applications_count, 'completedEvaluations': completed_eval_count,
            'missingReports': max(0, missing_reports_count), 'mostApplied': most_applied_text,
            'todayApplications': today_basvuru_count
        }
        # Yaklaşan Bitiş Tarihleri
        upcoming_deadlines_query = Ilan.objects.filter(aktif=True, bitis_tarihi__date__gte=today, bitis_tarihi__date__lte=next_week).order_by('bitis_tarihi').values('id', 'baslik', 'bitis_tarihi')[:5]
        upcoming_deadlines = list(upcoming_deadlines_query)
        # Bölümlere Göre Dağılım
        department_applications_query = Basvuru.objects.values('ilan__bolum__ad').annotate(value=Count('id')).order_by('-value')
        department_applications = [{'name': item['ilan__bolum__ad'], 'value': item['value']} for item in department_applications_query if item['ilan__bolum__ad']]
        # Uyarılar
        alerts = []
        unassigned_ilan_count = Ilan.objects.filter(aktif=True, juri_atamalari__isnull=True).distinct().count()
        if unassigned_ilan_count > 0: alerts.append({"id": "unassigned_jury", "type": "danger", "text": f"{unassigned_ilan_count} aktif ilan için jüri ataması yapılmamış."})
        # Veriyi Birleştir
        data = { 'stats': stats, 'upcomingDeadlines': upcoming_deadlines, 'departmentApplications': department_applications, 'alerts': alerts }
        return Response(data)
    except Exception as e:
        import traceback
        print("Error calculating manager dashboard data:")
        print(traceback.format_exc())
        return Response({"detail": f"Dashboard verileri hesaplanırken bir hata oluştu: {e}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# --- Admin Dashboard View Fonksiyonu ---
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_admin_dashboard_data(request):
    """
    Admin Paneli için özet verileri hesaplar ve döndürür.
    """
    try:
        # İstatistik Hesaplamaları
        all_ilanlar = Ilan.objects.all()
        total_postings = all_ilanlar.count()
        active_postings = all_ilanlar.filter(aktif=True).count()
        ongoing_apps_statuses = ['Beklemede', 'Değerlendirmede', 'Jüri Atandı']
        ongoing_applications = Basvuru.objects.filter(durum__in=ongoing_apps_statuses).count()
        most_applied_obj = Ilan.objects.annotate(num_basvurular=Count('basvurular')).filter(num_basvurular__gt=0).order_by('-num_basvurular').first()
        most_applied = most_applied_obj.baslik if most_applied_obj else "-"
        stats = {
            'totalPostings': total_postings, 'activePostings': active_postings,
            'ongoingApplications': ongoing_applications, 'mostApplied': most_applied,
            'totalUsers': User.objects.count(), # User modeli artık import edildi
            'totalApplications': Basvuru.objects.count(),
        }
        # Bölümlere Göre Başvuru Dağılımı
        department_apps_query = Basvuru.objects.values('ilan__bolum__ad').annotate(value=Count('id')).order_by('-value')
        department_applications = [{'name': item['ilan__bolum__ad'], 'value': item['value']} for item in department_apps_query if item['ilan__bolum__ad']]
        # Yanıt Verisi
        data = { 'stats': stats, 'departmentApplications': department_applications }
        return Response(data)
    except Exception as e:
        import traceback
        print(f"Admin dashboard verisi hesaplanırken hata: {e}")
        print(traceback.format_exc())
        return Response({"detail": "Dashboard verileri hesaplanırken sunucu hatası oluştu."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)from django.db import models
from django.contrib.auth import get_user_model
from apps.ilanlar.models import Ilan
from apps.basvuru.models import Basvuru

User = get_user_model()

class JuriAtama(models.Model):
    juri_uyesi = models.ForeignKey(User, on_delete=models.CASCADE, related_name='juri_atamalari')
    ilan = models.ForeignKey(Ilan, on_delete=models.CASCADE, related_name='juri_atamalari')
    atama_tarihi = models.DateTimeField(auto_now_add=True)
    aktif = models.BooleanField(default=True)

    class Meta:
        unique_together = ('juri_uyesi', 'ilan')
        verbose_name = 'Jüri Ataması'
        verbose_name_plural = 'Jüri Atamaları'

    def __str__(self):
        return f"{self.juri_uyesi.get_full_name()} - {self.ilan.baslik}"

class JuriDegerlendirme(models.Model):
    SONUC_CHOICES = [
        ('OLUMLU', 'Olumlu'),
        ('OLUMSUZ', 'Olumsuz'),
    ]

    juri_atama = models.ForeignKey(JuriAtama, on_delete=models.CASCADE, related_name='degerlendirmeler')
    basvuru = models.ForeignKey(Basvuru, on_delete=models.CASCADE, related_name='juri_degerlendirmeleri')
    sonuc = models.CharField(max_length=20, choices=SONUC_CHOICES)
    aciklama = models.TextField(blank=True, null=True)
    rapor = models.FileField(upload_to='juri_raporlari/%Y/%m/%d/', null=True, blank=True)
    degerlendirme_tarihi = models.DateTimeField(auto_now_add=True)
    guncelleme_tarihi = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('juri_atama', 'basvuru')
        verbose_name = 'Jüri Değerlendirmesi'
        verbose_name_plural = 'Jüri Değerlendirmeleri'

    def __str__(self):
        return f"{self.juri_atama.juri_uyesi.get_full_name()} - {self.basvuru.aday.get_full_name()}"
from rest_framework import serializers
from .models import JuriAtama, JuriDegerlendirme
from apps.ilanlar.serializers import IlanSerializer
from apps.basvuru.serializers import BasvuruSerializer
from apps.users.serializers import UserSerializer
from apps.basvuru.models import Basvuru

class JuriAtamaSerializer(serializers.ModelSerializer):
    ilan = IlanSerializer(read_only=True)
    juri_uyesi = UserSerializer(read_only=True)
    ilan_id = serializers.IntegerField(write_only=True)
    juri_uyesi_id = serializers.IntegerField(write_only=True)

    class Meta:
        model = JuriAtama
        fields = ['id', 'ilan', 'juri_uyesi', 'atama_tarihi', 'aktif', 'ilan_id', 'juri_uyesi_id']
        read_only_fields = ['atama_tarihi']

class JuriDegerlendirmeSerializer(serializers.ModelSerializer):
    juri_atama = JuriAtamaSerializer(read_only=True)
    basvuru = BasvuruSerializer(read_only=True)
    juri_atama_id = serializers.IntegerField(write_only=True)
    basvuru_id = serializers.IntegerField(write_only=True)
    sonuc = serializers.ChoiceField(choices=JuriDegerlendirme.SONUC_CHOICES)

    class Meta:
        model = JuriDegerlendirme
        fields = ['id', 'juri_atama', 'basvuru', 'sonuc', 'aciklama', 'rapor', 
                 'degerlendirme_tarihi', 'guncelleme_tarihi', 'juri_atama_id', 'basvuru_id']
        read_only_fields = ['degerlendirme_tarihi', 'guncelleme_tarihi']

class JuriAtamaDetaySerializer(serializers.ModelSerializer):
    basvurular = serializers.SerializerMethodField()
    ilan = IlanSerializer(read_only=True)
    juri_uyesi = UserSerializer(read_only=True)

    class Meta:
        model = JuriAtama
        fields = ['id', 'ilan', 'juri_uyesi', 'atama_tarihi', 'aktif', 'basvurular']

    def get_basvurular(self, obj):
        # İlgili ilana yapılmış tüm başvuruları getir
        basvurular = obj.ilan.basvurular.all()
        return BasvuruSerializer(basvurular, many=True).data

class JuriAtamaBasvuruDetaySerializer(serializers.ModelSerializer):
    basvuru = serializers.SerializerMethodField()

    class Meta:
        model = JuriAtama
        fields = ['id', 'ilan', 'juri_uyesi', 'atama_tarihi', 'aktif', 'basvuru']

    def get_basvuru(self, obj):
        basvuru = Basvuru.objects.filter(ilan=obj.ilan, aday=obj.juri_uyesi).first()
        if basvuru:
            return BasvuruSerializer(basvuru).data
        return None# apps/juri/views.py

from rest_framework import viewsets, status, permissions
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.utils import timezone
from django.db.models import Count, Q
from .models import JuriAtama, JuriDegerlendirme
from .serializers import JuriAtamaSerializer, JuriDegerlendirmeSerializer, JuriAtamaDetaySerializer, JuriAtamaBasvuruDetaySerializer
from apps.ilanlar.models import Ilan
from apps.basvuru.models import Basvuru

# ---- Mevcut ViewSet'leriniz ----
class JuriAtamaViewSet(viewsets.ModelViewSet):
    queryset = JuriAtama.objects.all()
    serializer_class = JuriAtamaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_assignments parametresi varsa, sadece kullanıcının atamalarını getir
        if self.request.query_params.get('my_assignments') == 'true':
            queryset = queryset.filter(juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save(juri_uyesi=self.request.user)

    @action(detail=False, methods=['get'], url_path='detayli')
    def detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaDetaySerializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='basvuru-detayli')
    def basvuru_detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaBasvuruDetaySerializer(queryset, many=True)
        return Response(serializer.data)

class JuriDegerlendirmeViewSet(viewsets.ModelViewSet):
    queryset = JuriDegerlendirme.objects.all()
    serializer_class = JuriDegerlendirmeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_evaluations parametresi varsa, sadece kullanıcının değerlendirmelerini getir
        if self.request.query_params.get('my_evaluations') == 'true':
            queryset = queryset.filter(juri_atama__juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save()

    @action(detail=True, methods=['get'])
    def basvuru_detay(self, request, pk=None):
        degerlendirme = self.get_object()
        basvuru = degerlendirme.basvuru
        return Response({
            'basvuru_id': basvuru.id,
            'basvuru_durumu': basvuru.durum,
            'basvuru_tarihi': basvuru.basvuru_tarihi,
            'basvuru_notu': basvuru.basvuru_notu,
            'basvuru_dosyalari': [dosya.url for dosya in basvuru.basvuru_dosyalari.all()]
        })

# ---- YENİ EKLENECEK VIEW FONKSİYONU ----
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_jury_dashboard_stats(request):
    """
    Jüri üyesi için dashboard istatistiklerini hesaplar ve döndürür.
    """
    if getattr(request.user, 'user_type', None) != 'JURI':
        return Response({"detail": "Bu sayfaya erişim yetkiniz yok."}, 
                      status=status.HTTP_403_FORBIDDEN)

    try:
        # Toplam atanan başvuru sayısı
        total_assignments = JuriAtama.objects.filter(juri_uyesi=request.user).count()

        # Tamamlanan değerlendirme sayısı
        completed_evaluations = JuriDegerlendirme.objects.filter(
            juri_atama__juri_uyesi=request.user
        ).count()

        # Bekleyen rapor sayısı
        pending_reports = total_assignments - completed_evaluations

        stats_data = {
            'totalApplications': total_assignments,
            'completedEvaluations': completed_evaluations,
            'pendingReports': max(0, pending_reports)
        }
        return Response(stats_data)

    except Exception as e:
        print(f"Error calculating jury stats for user {request.user.id}: {e}")
        return Response(
            {"detail": "İstatistikler hesaplanırken sunucu hatası oluştu."}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
# apps/juri/views.py

from rest_framework import viewsets, status, permissions
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.utils import timezone
from django.db.models import Count, Q
from .models import JuriAtama, JuriDegerlendirme
from .serializers import JuriAtamaSerializer, JuriDegerlendirmeSerializer, JuriAtamaDetaySerializer, JuriAtamaBasvuruDetaySerializer
from apps.ilanlar.models import Ilan
from apps.basvuru.models import Basvuru

# ---- Mevcut ViewSet'leriniz ----
class JuriAtamaViewSet(viewsets.ModelViewSet):
    queryset = JuriAtama.objects.all()
    serializer_class = JuriAtamaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_assignments parametresi varsa, sadece kullanıcının atamalarını getir
        if self.request.query_params.get('my_assignments') == 'true':
            queryset = queryset.filter(juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save(juri_uyesi=self.request.user)

    @action(detail=False, methods=['get'], url_path='detayli')
    def detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaDetaySerializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='basvuru-detayli')
    def basvuru_detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaBasvuruDetaySerializer(queryset, many=True)
        return Response(serializer.data)

class JuriDegerlendirmeViewSet(viewsets.ModelViewSet):
    queryset = JuriDegerlendirme.objects.all()
    serializer_class = JuriDegerlendirmeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_evaluations parametresi varsa, sadece kullanıcının değerlendirmelerini getir
        if self.request.query_params.get('my_evaluations') == 'true':
            queryset = queryset.filter(juri_atama__juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save()

    @action(detail=True, methods=['get'])
    def basvuru_detay(self, request, pk=None):
        degerlendirme = self.get_object()
        basvuru = degerlendirme.basvuru
        return Response({
            'basvuru_id': basvuru.id,
            'basvuru_durumu': basvuru.durum,
            'basvuru_tarihi': basvuru.basvuru_tarihi,
            'basvuru_notu': basvuru.basvuru_notu,
            'basvuru_dosyalari': [dosya.url for dosya in basvuru.basvuru_dosyalari.all()]
        })

# ---- YENİ EKLENECEK VIEW FONKSİYONU ----
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_jury_dashboard_stats(request):
    """
    Jüri üyesi için dashboard istatistiklerini hesaplar ve döndürür.
    """
    if getattr(request.user, 'user_type', None) != 'JURI':
        return Response({"detail": "Bu sayfaya erişim yetkiniz yok."}, 
                      status=status.HTTP_403_FORBIDDEN)

    try:
        # Toplam atanan başvuru sayısı
        total_assignments = JuriAtama.objects.filter(juri_uyesi=request.user).count()

        # Tamamlanan değerlendirme sayısı
        completed_evaluations = JuriDegerlendirme.objects.filter(
            juri_atama__juri_uyesi=request.user
        ).count()

        # Bekleyen rapor sayısı
        pending_reports = total_assignments - completed_evaluations

        stats_data = {
            'totalApplications': total_assignments,
            'completedEvaluations': completed_evaluations,
            'pendingReports': max(0, pending_reports)
        }
        return Response(stats_data)

    except Exception as e:
        print(f"Error calculating jury stats for user {request.user.id}: {e}")
        return Response(
            {"detail": "İstatistikler hesaplanırken sunucu hatası oluştu."}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )# apps/juri/views.py

from rest_framework import viewsets, status, permissions
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.utils import timezone
from django.db.models import Count, Q
from .models import JuriAtama, JuriDegerlendirme
from .serializers import JuriAtamaSerializer, JuriDegerlendirmeSerializer, JuriAtamaDetaySerializer, JuriAtamaBasvuruDetaySerializer
from apps.ilanlar.models import Ilan
from apps.basvuru.models import Basvuru

# ---- Mevcut ViewSet'leriniz ----
class JuriAtamaViewSet(viewsets.ModelViewSet):
    queryset = JuriAtama.objects.all()
    serializer_class = JuriAtamaSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_assignments parametresi varsa, sadece kullanıcının atamalarını getir
        if self.request.query_params.get('my_assignments') == 'true':
            queryset = queryset.filter(juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save(juri_uyesi=self.request.user)

    @action(detail=False, methods=['get'], url_path='detayli')
    def detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaDetaySerializer(queryset, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='basvuru-detayli')
    def basvuru_detayli(self, request):
        queryset = self.get_queryset()
        serializer = JuriAtamaBasvuruDetaySerializer(queryset, many=True)
        return Response(serializer.data)

class JuriDegerlendirmeViewSet(viewsets.ModelViewSet):
    queryset = JuriDegerlendirme.objects.all()
    serializer_class = JuriDegerlendirmeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()
        # Eğer my_evaluations parametresi varsa, sadece kullanıcının değerlendirmelerini getir
        if self.request.query_params.get('my_evaluations') == 'true':
            queryset = queryset.filter(juri_atama__juri_uyesi=self.request.user)
        return queryset

    def perform_create(self, serializer):
        serializer.save()

    @action(detail=True, methods=['get'])
    def basvuru_detay(self, request, pk=None):
        degerlendirme = self.get_object()
        basvuru = degerlendirme.basvuru
        return Response({
            'basvuru_id': basvuru.id,
            'basvuru_durumu': basvuru.durum,
            'basvuru_tarihi': basvuru.basvuru_tarihi,
            'basvuru_notu': basvuru.basvuru_notu,
            'basvuru_dosyalari': [dosya.url for dosya in basvuru.basvuru_dosyalari.all()]
        })

# ---- YENİ EKLENECEK VIEW FONKSİYONU ----
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_jury_dashboard_stats(request):
    """
    Jüri üyesi için dashboard istatistiklerini hesaplar ve döndürür.
    """
    if getattr(request.user, 'user_type', None) != 'JURI':
        return Response({"detail": "Bu sayfaya erişim yetkiniz yok."}, 
                      status=status.HTTP_403_FORBIDDEN)

    try:
        # Toplam atanan başvuru sayısı
        total_assignments = JuriAtama.objects.filter(juri_uyesi=request.user).count()

        # Tamamlanan değerlendirme sayısı
        completed_evaluations = JuriDegerlendirme.objects.filter(
            juri_atama__juri_uyesi=request.user
        ).count()

        # Bekleyen rapor sayısı
        pending_reports = total_assignments - completed_evaluations

        stats_data = {
            'totalApplications': total_assignments,
            'completedEvaluations': completed_evaluations,
            'pendingReports': max(0, pending_reports)
        }
        return Response(stats_data)

    except Exception as e:
        print(f"Error calculating jury stats for user {request.user.id}: {e}")
        return Response(
            {"detail": "İstatistikler hesaplanırken sunucu hatası oluştu."}, 
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )from django.db import models

class KadroTipi(models.Model):
    KADRO_TIPI_CHOICES = (
        ('DR_OGR_UYESI', 'Dr. Öğretim Üyesi'),
        ('DOCENT', 'Doçent'),
        ('PROFESOR', 'Profesör'),
    )
    tip = models.CharField(max_length=20, choices=KADRO_TIPI_CHOICES, unique=True)

    class Meta:
        verbose_name = 'Kadro Tipi'
        verbose_name_plural = 'Kadro Tipleri'

    def __str__(self):
        return self.get_tip_display()
from rest_framework import serializers
from .models import KadroTipi

class KadroTipiSerializer(serializers.ModelSerializer):
    class Meta:
        model = KadroTipi
        fields = ['id', 'tip']
        read_only_fields = ['id']from rest_framework import viewsets
from .models import KadroTipi
from .serializers import KadroTipiSerializer

class KadroTipiViewSet(viewsets.ModelViewSet):
    queryset = KadroTipi.objects.all()
    serializer_class = KadroTipiSerializerfrom django.db import models
from apps.users.models import User

class LogKaydi(models.Model):
    ISLEM_TURU_CHOICES = (
        ('GIRIS', 'Giriş'),
        ('CIKIS', 'Çıkış'),
        ('EKLEME', 'Ekleme'),
        ('GUNCELLEME', 'Güncelleme'),
        ('SILME', 'Silme'),
        ('BILDIRIM', 'Bildirim'),
        ('DIGER', 'Diğer'),
    )
    kullanici = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name="log_kayitlari")
    islem_turu = models.CharField(max_length=15, choices=ISLEM_TURU_CHOICES, verbose_name="İşlem Türü")
    islem_detayi = models.TextField(verbose_name="İşlem Detayı")
    islem_tarihi = models.DateTimeField(auto_now_add=True)
    ip_adresi = models.GenericIPAddressField(verbose_name="IP Adresi", blank=True, null=True)

    class Meta:
        verbose_name = 'Log Kaydı'
        verbose_name_plural = 'Log Kayıtları'
        ordering = ['-islem_tarihi']

    def __str__(self):
        return f"{self.kullanici} - {self.get_islem_turu_display()} - {self.islem_tarihi}"
from rest_framework import serializers
from .models import LogKaydi

class LogKaydiSerializer(serializers.ModelSerializer):
    class Meta:
        model = LogKaydi
        fields = [
            'id', 'kullanici', 'islem_turu', 'islem_detayi',
            'islem_tarihi', 'ip_adresi'
        ]
        read_only_fields = ['id', 'islem_tarihi']from rest_framework import serializers
from .models import LogKaydi

class LogKaydiSerializer(serializers.ModelSerializer):
    class Meta:
        model = LogKaydi
        fields = [
            'id', 'kullanici', 'islem_turu', 'islem_detayi',
            'islem_tarihi', 'ip_adresi'
        ]
        read_only_fields = ['id', 'islem_tarihi']from django.db import models

class SistemAyarlari(models.Model):
    anahtar = models.CharField(max_length=100, unique=True, verbose_name="Ayar Anahtarı")
    deger = models.TextField(verbose_name="Ayar Değeri")
    aciklama = models.TextField(blank=True, null=True, verbose_name="Açıklama")

    class Meta:
        verbose_name = 'Sistem Ayarı'
        verbose_name_plural = 'Sistem Ayarları'

    def __str__(self):
        return self.anahtar
from rest_framework import serializers
from .models import SistemAyarlari

class SistemAyarlariSerializer(serializers.ModelSerializer):
    class Meta:
        model = SistemAyarlari
        fields = ['id', 'anahtar', 'deger', 'aciklama']
        read_only_fields = ['id']from rest_framework import viewsets
from .models import SistemAyarlari
from .serializers import SistemAyarlariSerializer

class SistemAyarlariViewSet(viewsets.ModelViewSet):
    queryset = SistemAyarlari.objects.all()
    serializer_class = SistemAyarlariSerializerfrom rest_framework import serializers
from .models import TemelAlan

class TemelAlanSerializer(serializers.ModelSerializer):
    class Meta:
        model = TemelAlan
        fields = ['id', 'ad']
        read_only_fields = ['id']from rest_framework import viewsets
from .models import TemelAlan
from .serializers import TemelAlanSerializer

class TemelAlanViewSet(viewsets.ModelViewSet):
    queryset = TemelAlan.objects.all()
    serializer_class = TemelAlanSerializerfrom django.db import models
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    TC_KIMLIK = models.CharField(
        max_length=11,
        unique=True,
        verbose_name="TC Kimlik Numarası"
    )

    USER_TYPE_CHOICES = (
        ('ADAY', 'Aday'),
        ('ADMIN', 'Admin'),
        ('YONETICI', 'Yönetici'),
        ('JURI', 'Jüri Üyesi'),
    )
    user_type = models.CharField(
        max_length=10,
        choices=USER_TYPE_CHOICES,
        default='ADAY'
    )
    telefon = models.CharField(max_length=15, blank=True, null=True)
    adres = models.TextField(blank=True, null=True)
    akademik_unvan = models.ForeignKey(
        'kadro_tipi.KadroTipi',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="kullanicilar",
        verbose_name="Akademik Ünvan"
    )

    class Meta:
        verbose_name = 'Kullanıcı'
        verbose_name_plural = 'Kullanıcılar'

    def __str__(self):
        unvan = self.akademik_unvan.get_tip_display() if self.akademik_unvan else ""
        return f"{unvan} {self.first_name} {self.last_name} ({self.get_user_type_display()})"
# apps/users/serializers.py

from rest_framework import serializers
# ===> User modelini doğru yerden import edin <====
# Eğer User modeliniz Django'nun yerleşik User modeli DEĞİLSE, kendi modelinizi import edin:
# from .models import User
# Eğer Django'nun User modelini doğrudan KULLANMIYORSANIZ ama AbstractUser'dan türettiyseniz:
from django.contrib.auth import get_user_model
User = get_user_model() # Projedeki aktif User modelini alır

# KadroTipi'ni göstermek için (opsiyonel, eğer ilişkiliyse)
# from apps.kadro_tipi.serializers import KadroTipiSerializer # Veya sadece PrimaryKeyRelatedField

class UserSerializer(serializers.ModelSerializer):
    # İlişkili alanları daha okunabilir göstermek için (opsiyonel)
    # akademik_unvan = KadroTipiSerializer(read_only=True) # Nested serializer örneği
    # VEYA sadece ID ile işlem yapmak için:
    # akademik_unvan = serializers.PrimaryKeyRelatedField(queryset=KadroTipi.objects.all(), allow_null=True, required=False)

    class Meta:
        model = User
        # Admin listesinde ve detayında görmek isteyeceğiniz tüm alanları ekleyin
        fields = [
            'id', 'username', 'password', # Password write_only olacak
            'first_name', 'last_name', 'email',
            'TC_KIMLIK', 'user_type', 'telefon', 'adres',
            'akademik_unvan', # Foreign Key ID'si veya Nested Serializer
            'is_active', 'is_staff', 'is_superuser',
            'last_login', 'date_joined'
        ]
        # Sadece okunabilir alanlar (oluşturma/güncellemede dikkate alınmaz)
        read_only_fields = ['id', 'last_login', 'date_joined']

        # Alanlara özel ayarlar (örn: şifre sadece yazılabilir)
        extra_kwargs = {
            'password': {
                'write_only': True,       # Listelemede görünmez
                'required': True,         # Oluştururken zorunlu
                'style': {'input_type': 'password'} # API arayüzünde gizli gösterir
             },
             # TCKN oluşturulduktan sonra değiştirilemesin (isteğe bağlı)
             # 'TC_KIMLIK': {'read_only': True}, # Eğer AbstractUser kullanıyorsanız bu zaten unique
             # 'username': {'read_only': True} # Kullanıcı adı değiştirilemesin?
        }

    def create(self, validated_data):
        """ Yeni kullanıcı oluştururken parolayı hashler. """
        # `create_user` metodu AbstractUser ve AbstractBaseUser için vardır
        # ve parolayı otomatik hashler.
        user = User.objects.create_user(**validated_data)
        # Eğer akademik_unvan ID olarak geliyorsa ve set edilmesi gerekiyorsa:
        # unvan_id = validated_data.get('akademik_unvan')
        # if unvan_id:
        #     user.akademik_unvan_id = unvan_id
        # user.save() # create_user zaten kaydeder
        return user

    def update(self, instance, validated_data):
        """ Kullanıcı güncellenirken parola gelirse onu hashler. """
        # Parolayı ayrıca al ve validated_data'dan çıkar
        password = validated_data.pop('password', None)
        # Diğer alanları normal şekilde güncelle
        user = super().update(instance, validated_data)

        # Eğer yeni bir parola gönderildiyse, onu set et
        if password:
            user.set_password(password)
            user.save()

        return userimport requests
from xml.etree import ElementTree as ET


def verify_tc_kimlik(tc_kimlik_no, ad, soyad, dogum_yili):
    """
    TC Kimlik numarası doğrulama fonksiyonu

    :param tc_kimlik_no: TC Kimlik numarası (11 haneli)
    :param ad: Kişinin adı (Türkçe karakter içerebilir)
    :param soyad: Kişinin soyadı (Türkçe karakter içerebilir)
    :param dogum_yili: Doğum yılı (YYYY formatında)
    :return: Doğrulama sonucu (True/False)
    """
    # XML SOAP isteği için şablon
    soap_request = """<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <soap:Body>
        <TCKimlikNoDogrula xmlns="http://tckimlik.nvi.gov.tr/WS">
          <TCKimlikNo>{}</TCKimlikNo>
          <Ad>{}</Ad>
          <Soyad>{}</Soyad>
          <DogumYili>{}</DogumYili>
        </TCKimlikNoDogrula>
      </soap:Body>
    </soap:Envelope>""".format(tc_kimlik_no, ad.upper(), soyad.upper(), dogum_yili)

    # HTTP başlıkları
    headers = {
        "Content-Type": "text/xml; charset=utf-8",
        "SOAPAction": "http://tckimlik.nvi.gov.tr/WS/TCKimlikNoDogrula"
    }

    try:
        # SOAP isteği gönder
        response = requests.post(
            "https://tckimlik.nvi.gov.tr/Service/KPSPublic.asmx",
            data=soap_request.encode('utf-8'),
            headers=headers
        )

        # XML yanıtını ayrıştır
        root = ET.fromstring(response.content)

        # Namespace'i tanımla
        namespace = {'soap': 'http://schemas.xmlsoap.org/soap/envelope/',
                     'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
                     'xsd': 'http://www.w3.org/2001/XMLSchema',
                     'ns': 'http://tckimlik.nvi.gov.tr/WS'}

        # Sonucu al
        result = root.find('.//ns:TCKimlikNoDogrulaResult', namespace)

        if result is not None:
            return result.text.lower() == 'true'
        else:
            print("Sonuç bulunamadı.")
            return False

    except Exception as e:
        print(f"Doğrulama sırasında hata oluştu: {str(e)}")
        return False


if __name__ == "__main__":
    tc_no = "34177749530"
    ad = "ceyda"
    soyad = "özmen"
    dogum_yili = "2003"

    result = verify_tc_kimlik(tc_no, ad, soyad, dogum_yili)
    print(result)
    if result:
        print("TC Kimlik numarası doğrulandı.")
    else:
        print("TC Kimlik numarası doğrulanamadı.")# apps/users/views.py

from rest_framework import viewsets, permissions, status
from django.views.decorators.csrf import ensure_csrf_cookie
from django.http import JsonResponse
from rest_framework.decorators import api_view, permission_classes as func_permission_classes, action
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from django.contrib.auth import get_user_model
from .serializers import UserSerializer

User = get_user_model()

class UserViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to be viewed or edited.
    """
    queryset = User.objects.all().order_by('-date_joined')
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """
        Filtreleme ve arama için queryset'i özelleştir
        """
        queryset = User.objects.all()
        tc_kimlik = self.request.query_params.get('TC_KIMLIK', None)
        user_type = self.request.query_params.get('user_type', None)
        
        if tc_kimlik:
            queryset = queryset.filter(TC_KIMLIK=tc_kimlik)
        if user_type:
            queryset = queryset.filter(user_type=user_type)
            
        return queryset

    @action(detail=False, methods=['get'])
    def me(self, request):
        """
        Giriş yapmış kullanıcının bilgilerini döndürür
        """
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def options(self, request):
        """
        Dropdown menüler için kullanıcı seçeneklerini döndürür
        """
        user_type = request.query_params.get('user_type', None)
        queryset = self.get_queryset()
        
        if user_type:
            queryset = queryset.filter(user_type=user_type)
            
        users = queryset.values('id', 'first_name', 'last_name', 'TC_KIMLIK')
        return Response(users)

@ensure_csrf_cookie
@api_view(['GET'])
@func_permission_classes([AllowAny])
def set_csrf_token(request):
    """Bu view sadece CSRF çerezinin yanıta eklenmesini sağlar."""
    return JsonResponse({"detail": "CSRF cookie should be set"})

# --- Özel Login/Logout View'leriniz (Artık Kullanılmıyor Olmalı) ---
# from django.contrib.auth import authenticate, login, logout
# from django.http import JsonResponse
# from django.views.decorators.csrf import csrf_exempt
# import json

# @csrf_exempt
# def login_view(request): ... (Bu fonksiyon artık dj_rest_auth kullanıldığı için gereksiz)

# @csrf_exempt
# def logout_view(request): ... (Bu fonksiyon artık dj_rest_auth kullanıldığı için gereksiz)# apps/users/urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

app_name = 'users' # App ismi tanımlamak iyi bir pratiktir

router = DefaultRouter()
router.register(r'', views.UserViewSet, basename='user')

urlpatterns = [
    path('', include(router.urls)),
    path('csrf/', views.set_csrf_token, name='csrf'),
    # Şu anda bu app için özel bir URL tanımlamıyoruz.
    # İleride kullanıcı profili, özel ayarlar vb. için buraya eklenebilir.
    # Örnek: path('profile/', views.user_profile_view, name='user-profile'),
]#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "academic_portal.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Django yüklenemedi. Sanal ortamınız aktif mi, yoksa Django kurulu mu kontrol edin."
        ) from exc
    execute_from_command_line(sys.argv)
// src/components/navbars/AdminNavbar.jsx

import React, { useState, useEffect } from "react";
import { NavLink, useNavigate } from "react-router-dom";
import logo from "../../assets/kou_logo.png";
import { useAuth } from "../../context/AuthContext"; // AuthContext hook'unu import edin

// SVG Icon bileşeni
const Icon = ({ name, width = 18, height = 18 }) => (
  <svg width={width} height={height} className="icon" aria-hidden="true">
    <use href={`/sprite.svg#${name}`} />
  </svg>
);

export default function AdminNavbar() {
  const navigate = useNavigate();
  const { user, logout, isAuthenticated } = useAuth(); // Context'ten user ve logout fonksiyonunu alın
  const [menuOpen, setMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 850);

  // ===> DÜZELTİLMİŞ handleLogout Fonksiyonu <===
  const handleLogout = async () => {
    console.log("Admin Logout button clicked");
    try {
        await logout(); // Context'teki async logout fonksiyonunu çağır ve bitmesini bekle
        console.log("Context logout finished, navigating to /login");
        navigate('/login'); // Context işlemi bitince login'e yönlendir
    } catch (error) {
        console.error("Error during logout process:", error);
        navigate('/login'); // Hata olsa bile login'e yönlendir
    }
    closeMenu(); // Mobil menüyü kapat
  };

  const toggleMenu = () => setMenuOpen(!menuOpen);
  const closeMenu = () => setMenuOpen(false);

  // Mobil görünüm için useEffect
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 850);
      if (window.innerWidth > 850) setMenuOpen(false);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <>
      {/* CSS Kodları */}
      <style>{`
        .navbar {
          font-family: 'Segoe UI', sans-serif;
          background-color: #ffffff;
          box-shadow: 0 2px 8px rgba(0,0,0,0.05);
          padding: 10px 20px;
          position: relative; /* Mobil menü için */
          z-index: 100; /* Diğer içeriklerin üzerinde kalması için */
        }
        .navbar_top {
          display: flex;
          align-items: center;
          justify-content: space-between;
          max-width: 1400px; /* İçeriği sınırlama */
          margin: 0 auto; /* Ortala */
        }
        .logo { height: 50px; width: 50px; object-fit: contain; }
        .hamburger-button { background: none; border: none; cursor: pointer; display: none; /* Başlangıçta gizle */}
        .navbar_links { list-style: none; padding: 0; margin: 0; display: flex; gap: 5px; /* Linkler arası boşluk */}
        .navbar_links.desktop { /* Bu sınıf artık doğrudan ul'de kullanılmıyor */ }
        .navbar_links a, .logout-button {
          display: flex; align-items: center; gap: 8px; padding: 10px 14px; /* Padding ayarlandı */
          text-decoration: none; color: #343a40; /* Koyu gri */ background-color: transparent;
          font-weight: 500; border-radius: 8px; /* Daha yumuşak köşe */ transition: all 0.2s ease;
          border: none; font-size: 0.95rem; /* Font boyutu ayarlandı */ cursor: pointer;
        }
        .navbar_links a:hover, .logout-button:hover {
          background-color: #e9f5e9; /* Daha soft yeşil */ color: #007c39; /* Koyu yeşil */
        }
        .logout-button { color: var(--danger-color, #dc3545); } /* Kırmızı çıkış butonu */
        .logout-button:hover { background-color: #f8d7da; color: #721c24; } /* Kırmızı hover */
        .navbar_links a.active {
          background-color: var(--primary-color, #009944); color: white;
          box-shadow: 0 2px 5px rgba(0, 153, 68, 0.2);
        }
        .navbar_links.mobile { /* Mobil menü stilleri */
          display: ${menuOpen ? "flex" : "none"}; flex-direction: column; gap: 5px; /* Daha az boşluk */
          background-color: #ffffff; padding: 15px; position: absolute;
          top: 100%; /* Navbar'ın hemen altı */ left: 0; right: 0;
          box-shadow: 0 4px 10px rgba(0,0,0,0.1); border-top: 1px solid #eaeaea; z-index: 99;
        }
        .navbar_links.mobile a, .navbar_links.mobile .logout-button { width: 100%; justify-content: flex-start; padding: 12px 15px; font-size: 1rem;}
        .icon { margin-right: 6px; /* İkon ve yazı arası boşluk */ }

        @media(max-width: 850px) { /* Kırılım noktası */
           .navbar_links { display: none; } /* Masaüstü linklerini gizle */
           .hamburger-button { display: block; } /* Hamburgeri göster */
           /* .navbar_links.mobile { display: ${menuOpen ? "flex" : "none"}; } // JS kontrol ediyor */
        }
      `}</style>

      <nav className="navbar">
        <div className="navbar_top">
           {/* Logo (Admin login ise /admin'e yönlendirir) */}
          <NavLink to={isAuthenticated ? "/admin" : "/"} onClick={closeMenu}>
            <img src={logo} alt="KOU Logo" className="logo" />
          </NavLink>

           {/* Hamburger Butonu (sadece mobilde ve login olmuşsa görünür) */}
           {isAuthenticated && (
               <button className="hamburger-button" onClick={toggleMenu}>
                 <Icon name={menuOpen ? "close" : "hamburger"} width={24} height={24} />
               </button>
           )}

           {/* Navigasyon Linkleri (Masaüstü veya Mobil) */}
           {/* isAuthenticated kontrolü mobil için de geçerli olacak */}
           {isAuthenticated && (
            <ul className={`navbar_links ${isMobile ? "mobile" : ""}`}> {/* 'desktop' class'ı kaldırıldı */}
              <li>
                <NavLink to="/admin" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")} end> {/* 'end' prop'u eklendi */}
                  <Icon name="home" /> Ana Sayfa
                </NavLink>
              </li>
              <li>
                <NavLink to="/admin-advertisements" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="list" /> İlan Listesi
                </NavLink>
              </li>
              <li>
                <NavLink to="/admin-applications" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="agreement" /> Başvurular
                </NavLink>
              </li>
              <li>
                <NavLink to="/admin-users" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="users" /> Kullanıcılar
                </NavLink>
              </li>
              {/* Diğer Admin linkleri buraya eklenebilir */}
              <li>
                 {/* Düzeltilmiş Logout Butonu */}
                <button onClick={handleLogout} className="logout-button">
                  <Icon name="log-out" /> Çıkış Yap {user?.username ? `(${user.username})` : ''}
                </button>
              </li>
            </ul>
           )}
           {/* Eğer login değilse masaüstünde hiçbir link göstermemek için */}
           {!isAuthenticated && !isMobile && <div style={{height: '50px'}}></div>}
        </div>
      </nav>
    </>
  );
}import React, { useState, useEffect } from "react";
import { NavLink, useNavigate } from "react-router-dom";
import logo from "../../assets/kou_logo.png";
import { useAuth } from "../../context/AuthContext"; // AuthContext hook'unu import edin

// SVG Icon bileşeni
const Icon = ({ name, width = 18, height = 18 }) => (
  <svg width={width} height={height} className="icon" aria-hidden="true">
    <use href={`/sprite.svg#${name}`} />
  </svg>
);

export default function JuryNavbar() {
  const navigate = useNavigate();
  const { user, logout, isAuthenticated } = useAuth(); // Context'ten user ve logout fonksiyonunu alın
  const [menuOpen, setMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 850);

  // ===> DÜZELTİLMİŞ handleLogout Fonksiyonu <===
  const handleLogout = async () => {
    console.log("Jury Logout button clicked");
    try {
        await logout(); // Context'teki async logout fonksiyonunu çağır ve bitmesini bekle
        console.log("Context logout finished, navigating to /login");
        navigate('/login'); // Context işlemi bitince login'e yönlendir
    } catch (error) {
        console.error("Error during logout process:", error);
        navigate('/login'); // Hata olsa bile login'e yönlendir
    }
    closeMenu(); // Mobil menüyü kapat
  };

  const toggleMenu = () => setMenuOpen(!menuOpen);
  const closeMenu = () => setMenuOpen(false);

  // Mobil görünüm için useEffect
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 850);
      if (window.innerWidth > 850) setMenuOpen(false);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <>
      {/* CSS Kodları (Değişiklik Yok) */}
      <style>{`
        .navbar {
          font-family: 'Segoe UI', sans-serif;
          background-color: #ffffff;
          box-shadow: 0 2px 8px rgba(0,0,0,0.05);
          padding: 10px 20px;
          position: relative;
        }
        .navbar_top {
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        .logo {
          height: 50px;
          width: 50px;
          object-fit: contain;
        }
        .hamburger-button {
          background: none;
          border: none;
          cursor: pointer;
        }
        .navbar_links {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        .navbar_links.desktop {
          display: flex;
          gap: 20px;
          align-items: center;
        }
        .navbar_links.desktop a,
        .logout-button { /* Logout butonu stilleri linklerle aynı */
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 10px 16px;
          text-decoration: none;
          color: #2c3e50;
          background-color: transparent;
          font-weight: 500;
          border-radius: 12px;
          transition: all 0.3s ease;
          border: none;
          font-size: 15px;
          cursor: pointer; /* Buton için eklendi */
        }
        .navbar_links.desktop a:hover,
        .logout-button:hover {
          background-color: #f0fdf4;
          color: #009944;
        }
        .navbar_links.desktop a.active {
          background-color: #009944;
          color: white;
          box-shadow: 0 3px 8px rgba(0, 153, 68, 0.2);
        }
        .logout-button { /* Logout butonuna özel ek stiller (isteğe bağlı) */
           color: #DC3545; /* Kırmızı renk */
        }
        .logout-button:hover {
           background-color: #f8d7da; /* Hafif kırmızı arka plan */
           color: #721c24; /* Daha koyu kırmızı */
        }
        /* Mobil menü stilleri */
        .navbar_links.mobile {
          display: ${menuOpen ? "flex" : "none"};
          flex-direction: column;
          gap: 12px;
          background-color: #ffffff;
          padding: 20px;
          position: absolute;
          top: 70px; /* Adjust based on your navbar height */
          left: 0;
          right: 0;
          box-shadow: 0 4px 10px rgba(0,0,0,0.05);
          border-top: 1px solid #eaeaea;
          z-index: 1000;
        }
        .navbar_links.mobile a,
        .navbar_links.mobile .logout-button {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 10px 12px;
          text-decoration: none;
          color: #2c3e50;
          background-color: transparent;
          font-size: 16px;
          font-weight: 500;
          border-radius: 10px;
          transition: all 0.3s ease;
          border: none; /* Buton için */
          width: 100%; /* Mobil düzgün görünüm için */
          text-align: left; /* Mobil düzgün görünüm için */
          cursor: pointer; /* Buton için */
        }
        .navbar_links.mobile a:hover,
        .navbar_links.mobile .logout-button:hover {
          background-color: #f0fdf4;
          color: #009944;
        }
         .navbar_links.mobile .logout-button {
            color: #DC3545;
         }
          .navbar_links.mobile .logout-button:hover {
             background-color: #f8d7da;
             color: #721c24;
         }
        .navbar_links.mobile a.active {
          background-color: #009944;
          color: white;
        }
        .icon { margin-right: 4px; }
        @media(min-width: 851px) { .hamburger-button { display: none; } }
      `}</style>

      <nav className="navbar">
        <div className="navbar_top">
           {/* Logo linki (jury login ise /jury'e, değilse /'a gidebilir) */}
          <NavLink to={isAuthenticated ? "/jury" : "/"} onClick={closeMenu}>
            <img src={logo} alt="KOU Logo" className="logo" />
          </NavLink>

           {/* Hamburger Butonu (sadece mobilde ve login olmuşsa görünür) */}
           {isAuthenticated && (
               <button className="hamburger-button" onClick={toggleMenu} style={{ display: isMobile ? 'block' : 'none' }}>
                 <Icon name={menuOpen ? "close" : "hamburger"} width={24} height={24} />
               </button>
           )}


           {/* Navigasyon Linkleri (sadece login olmuşsa görünür) */}
          {isAuthenticated && (
            <ul className={`navbar_links ${isMobile ? "mobile" : "desktop"}`}>
              <li>
                <NavLink to="/jury" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="home" /> Anasayfa
                </NavLink>
              </li>
              <li>
                <NavLink
                  to="/jury-applications"
                  onClick={closeMenu}
                  className={({ location }) => {
                    const path = location?.pathname || window.location.pathname;
                    return (path.startsWith('/jury-applications') || path.startsWith('/jury-userapplication')) ? "active" : "";
                  }}
                >
                  <Icon name="agreement" /> Başvurular
                </NavLink>
              </li>
              <li>
                <NavLink to="/jury-rapor" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="files" /> Raporlar
                </NavLink>
              </li>
              <li>
                 {/* ====> DÜZELTİLMİŞ Buton <==== */}
                <button onClick={handleLogout} className="logout-button">
                  <Icon name="log-out" /> Çıkış Yap {user?.username ? `(${user.username})` : ''}
                </button>
              </li>
            </ul>
          )}
        </div>
      </nav>
    </>
  );
}// src/components/navbars/ManagerNavbar.jsx (Dosya adı varsayılan)

import React, { useState, useEffect } from "react";
import { NavLink, useNavigate } from "react-router-dom";
import logo from "../../assets/kou_logo.png";
import { useAuth } from "../../context/AuthContext"; // AuthContext hook'unu import edin

// SVG Icon bileşeni
const Icon = ({ name, width = 18, height = 18 }) => (
  <svg width={width} height={height} className="icon" aria-hidden="true">
    <use href={`/sprite.svg#${name}`} />
  </svg>
);

export default function YoneticiNavbar() {
  const navigate = useNavigate();
  const { user, logout, isAuthenticated } = useAuth(); // Context'ten user ve logout fonksiyonunu alın
  const [menuOpen, setMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 850);

  // ===> DÜZELTİLMİŞ handleLogout Fonksiyonu <===
  const handleLogout = async () => {
    console.log("Manager Logout button clicked");
    try {
        await logout(); // Context'teki async logout fonksiyonunu çağır ve bitmesini bekle
        console.log("Context logout finished, navigating to /login");
        navigate('/login'); // Context işlemi bitince login'e yönlendir
    } catch (error) {
        console.error("Error during logout process:", error);
        navigate('/login'); // Hata olsa bile login'e yönlendir
    }
    closeMenu(); // Mobil menüyü kapat
  };

  const toggleMenu = () => setMenuOpen(!menuOpen);
  const closeMenu = () => setMenuOpen(false);

  // Mobil görünüm için useEffect
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 850);
      if (window.innerWidth > 850) setMenuOpen(false);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <>
      {/* CSS Kodları (Diğer navbar'larla aynı varsayıldı) */}
      <style>{`
         /* Diğer navbarlarda kullanılan aynı veya benzer CSS kurallarını buraya ekleyin */
         /* Örnek: */
        .navbar { font-family: 'Segoe UI', sans-serif; background-color: #ffffff; box-shadow: 0 2px 8px rgba(0,0,0,0.05); padding: 10px 20px; position: relative; z-index: 100; }
        .navbar_top { display: flex; align-items: center; justify-content: space-between; max-width: 1400px; margin: 0 auto; }
        .logo { height: 50px; width: 50px; object-fit: contain; }
        .hamburger-button { background: none; border: none; cursor: pointer; display: none; }
        .navbar_links { list-style: none; padding: 0; margin: 0; display: flex; gap: 5px; }
        .navbar_links a, .logout-button { display: flex; align-items: center; gap: 8px; padding: 10px 14px; text-decoration: none; color: #343a40; background-color: transparent; font-weight: 500; border-radius: 8px; transition: all 0.2s ease; border: none; font-size: 0.95rem; cursor: pointer; }
        .navbar_links a:hover, .logout-button:hover { background-color: #e9f5e9; color: #007c39; }
        .logout-button { color: var(--danger-color, #dc3545); }
        .logout-button:hover { background-color: #f8d7da; color: #721c24; }
        .navbar_links a.active { background-color: var(--primary-color, #009944); color: white; box-shadow: 0 2px 5px rgba(0, 153, 68, 0.2); }
        .navbar_links.mobile { display: ${menuOpen ? "flex" : "none"}; flex-direction: column; gap: 5px; background-color: #ffffff; padding: 15px; position: absolute; top: 100%; left: 0; right: 0; box-shadow: 0 4px 10px rgba(0,0,0,0.1); border-top: 1px solid #eaeaea; z-index: 99; }
        .navbar_links.mobile a, .navbar_links.mobile .logout-button { width: 100%; justify-content: flex-start; padding: 12px 15px; font-size: 1rem; }
        .icon { margin-right: 6px; }
        @media(max-width: 850px) { .navbar_links { display: none; } .hamburger-button { display: block; } }
      `}</style>

      <nav className="navbar">
        <div className="navbar_top">
          <NavLink to={isAuthenticated ? "/manager" : "/"} onClick={closeMenu}>
            <img src={logo} alt="KOU Logo" className="logo" />
          </NavLink>

          {isAuthenticated && (
               <button className="hamburger-button" onClick={toggleMenu}>
                 <Icon name={menuOpen ? "close" : "hamburger"} width={24} height={24} />
               </button>
           )}

           {isAuthenticated && (
            <ul className={`navbar_links ${isMobile ? "mobile" : ""}`}>
              <li>
                <NavLink to="/manager" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")} end>
                  <Icon name="home" /> Dashboard
                </NavLink>
              </li>
              {/* <li>
                <NavLink to="/manager-criteriapage" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="settings" /> Kadro Kriterleri
                </NavLink>
              </li> */}
              {/* <li>
                <NavLink to="/manager-juri-atama" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="users" /> Jüri Atama
                </NavLink>
              </li> */}
              <li>
                <NavLink to="/manager-basvurular" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="inbox" /> Başvurular
                </NavLink>
              </li>
              <li>
                <NavLink to="/manager-ilan" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="list" /> İlana Kriter Ekle {/* İkon değiştirildi */}
                </NavLink>
              </li>
              <li>
                <NavLink to="/manager-profile" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                  <Icon name="profile" /> Profil {/* İkon değiştirildi */}
                </NavLink>
              </li>
              <li>
                <button onClick={handleLogout} className="logout-button">
                  <Icon name="log-out" /> Çıkış Yap {user?.username ? `(${user.username})` : ''}
                </button>
              </li>
            </ul>
           )}
           {!isAuthenticated && !isMobile && <div style={{height: '50px'}}></div>}
        </div>
      </nav>
    </>
  );
}// src/components/navbars/UserNavbar.jsx

import React, { useState, useEffect } from "react";
import { NavLink, useNavigate } from "react-router-dom";
import logo from "../../assets/kou_logo.png";
import { useAuth } from "../../context/AuthContext"; // AuthContext hook'unu import edin

// SVG Icon bileşeni (Mevcut kodunuzdaki gibi)
const Icon = ({ name, width = 18, height = 18 }) => (
  <svg width={width} height={height} className="icon" aria-hidden="true">
    <use href={`/sprite.svg#${name}`} />
  </svg>
);

export default function UserNavbar() {
  const navigate = useNavigate();
  const { user, logout, isAuthenticated } = useAuth(); // Context'ten user ve logout fonksiyonunu alın
  const [menuOpen, setMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 850);

  // ===> DÜZELTİLMİŞ handleLogout Fonksiyonu <===
  const handleLogout = async () => {
    console.log("Logout button clicked");
    try {
        await logout(); // Context'teki async logout fonksiyonunu çağır ve bitmesini bekle
        console.log("Context logout finished, navigating to /login");
        navigate('/login'); // Context işlemi bitince login'e yönlendir
    } catch (error) {
        console.error("Error during logout process:", error);
        // Kullanıcıya hata mesajı gösterilebilir
        // Hata olsa bile login'e yönlendirmek genellikle mantıklıdır
        navigate('/login');
    }
    closeMenu(); // Mobil menüyü kapat (eğer açıksa)
  };

  const toggleMenu = () => setMenuOpen(!menuOpen);
  const closeMenu = () => setMenuOpen(false);

  // Mobil görünüm için useEffect (Mevcut kodunuzdaki gibi)
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 850);
      if (window.innerWidth > 850) setMenuOpen(false);
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);


  // Eğer kullanıcı giriş yapmamışsa (örneğin context yüklenirken)
  // veya kullanıcı bilgisi henüz gelmemişse Navbar'ı gösterme veya farklı göster
  // Bu kontrol AuthContext'in isLoading state'ine göre daha iyi yapılabilir
  // if (!isAuthenticated) {
  //    return null; // veya sadece login linki olan basit bir navbar
  // }

  return (
    <>
      <style>{`
        .navbar {
          font-family: 'Segoe UI', sans-serif;
          background-color: #ffffff;
          box-shadow: 0 2px 8px rgba(0,0,0,0.05);
          padding: 10px 20px;
          position: relative;
        }

        .navbar_top {
          display: flex;
          align-items: center;
          justify-content: space-between;
        }

        .logo {
          height: 50px;
          width: 50px;
          object-fit: contain;
        }

        .hamburger-button {
          background: none;
          border: none;
          cursor: pointer;
        }

        .navbar_links {
          list-style: none;
          padding: 0;
          margin: 0;
        }

        .navbar_links.desktop {
          display: flex;
          gap: 20px;
          align-items: center;
        }

        .navbar_links.desktop a,
        .logout-button {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 10px 16px;
          text-decoration: none;
          color: #2c3e50;
          background-color: transparent;
          font-weight: 500;
          border-radius: 12px;
          transition: all 0.3s ease;
          border: none;
          font-size: 15px;
        }

        .navbar_links.desktop a:hover,
        .logout-button:hover {
          background-color: #f0fdf4;
          color: #009944;
        }

        .navbar_links.desktop a.active {
          background-color: #009944;
          color: white;
          box-shadow: 0 3px 8px rgba(0, 153, 68, 0.2);
        }

        /* Mobil menü */
        .navbar_links.mobile {
          display: ${menuOpen ? "flex" : "none"};
          flex-direction: column;
          gap: 12px;
          background-color: #ffffff;
          padding: 20px;
          position: absolute;
          top: 70px;
          left: 0;
          right: 0;
          box-shadow: 0 4px 10px rgba(0,0,0,0.05);
          border-top: 1px solid #eaeaea;
          z-index: 1000;
        }

        .navbar_links.mobile a,
        .logout-button {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 10px 12px;
          text-decoration: none;
          color: #2c3e50;
          background-color: transparent;
          font-size: 16px;
          font-weight: 500;
          border-radius: 10px;
          transition: all 0.3s ease;
          border: none;
        }

        .navbar_links.mobile a:hover,
        .logout-button:hover {
          background-color: #f0fdf4;
          color: #009944;
        }

        .navbar_links.mobile a.active {
          background-color: #009944;
          color: white;
        }

        .icon {
          margin-right: 4px;
        }

        @media(min-width: 851px) {
          .hamburger-button {
            display: none;
          }
        }
      `}</style>

      <nav className="navbar">
        <div className="navbar_top">
          {/* Logo linki (user login ise /user'a, değilse /'a gidebilir) */}
          <NavLink to={isAuthenticated ? "/user" : "/"} onClick={closeMenu}>
            <img src={logo} alt="KOU Logo" className="logo" />
          </NavLink>

          {/* Hamburger Butonu (sadece mobilde görünür) */}
          {isAuthenticated && ( // Sadece giriş yapılmışsa hamburgeri göster
               <button className="hamburger-button" onClick={toggleMenu} style={{ display: isMobile ? 'block' : 'none' }}>
                 <Icon name={menuOpen ? "close" : "hamburger"} width={24} height={24} />
               </button>
          )}


          {/* Navigasyon Linkleri (isAuthenticated kontrolü eklendi) */}
          {isAuthenticated && (
              <ul className={`navbar_links ${isMobile ? "mobile" : "desktop"}`}>
                <li>
                  <NavLink to="/user" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                    <Icon name="home" /> Ana Sayfa {/* Home -> Ana Sayfa */}
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/listing" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                    <Icon name="post" /> İlanlar
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/basvurularim" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                    <Icon name="agreement" /> Başvurularım
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/profile" onClick={closeMenu} className={({ isActive }) => (isActive ? "active" : "")}>
                    <Icon name="profile" /> Profil {/* Kişisel Bilgiler -> Profil */}
                  </NavLink>
                </li>
                <li>
                   {/* ====> DÜZELTİLMİŞ Buton <==== */}
                   {/* Artık handleLogout fonksiyonunu çağırıyor */}
                  <button onClick={handleLogout} className="logout-button">
                    <Icon name="log-out" /> Çıkış Yap {user?.username ? `(${user.username})` : ''}
                  </button>
                </li>
              </ul>
          )}
        </div>
      </nav>
    </>
  );
}// src/context/AuthContext.jsx
import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';
import api from '../services/api';

// CSRF token'ı çerezden okumak için yardımcı fonksiyon
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// 1. Context'i oluştur
const AuthContext = createContext(null);

// 2. Provider Component'i oluştur
export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [authToken, setAuthToken] = useState(localStorage.getItem('authToken'));

    const checkUserSession = useCallback(async () => {
        console.log("AuthProvider: Checking user session...");
        setIsLoading(true);
        
        if (!authToken) {
            console.log("AuthProvider: No auth token found");
            setUser(null);
            setIsLoading(false);
            return;
        }

        try {
            const response = await api.get('/auth/user/');
            
            if (response.data) {
                console.log("AuthProvider: Session valid, user data:", response.data);
                setUser(response.data);
            } else {
                console.log("AuthProvider: Invalid session, clearing auth data");
                localStorage.removeItem('authToken');
                setAuthToken(null);
                setUser(null);
            }
        } catch (error) {
            console.error("AuthProvider: Error checking session:", error);
            localStorage.removeItem('authToken');
            setAuthToken(null);
            setUser(null);
        } finally {
            setIsLoading(false);
        }
    }, [authToken]);

    useEffect(() => {
        checkUserSession();
    }, [checkUserSession]);

    const login = useCallback((userData, token) => {
        console.log("AuthProvider: Setting user data after login:", userData);
        if (token) {
            localStorage.setItem('authToken', token);
            setAuthToken(token);
        }
        setUser(userData);
    }, []);

    const logout = useCallback(async () => {
        console.log("AuthProvider: Logging out...");
        try {
            await api.post('/auth/logout/');
        } catch (err) {
            console.error("AuthProvider: Logout API call failed:", err);
        } finally {
            localStorage.removeItem('authToken');
            setAuthToken(null);
            setUser(null);
        }
    }, []);

    const hasRole = useCallback((requiredRole) => {
        if (!user) return false;
        if (requiredRole === 'admin') return user.user_type === 'ADMIN';
        if (requiredRole === 'manager') return user.user_type === 'YONETICI';
        if (requiredRole === 'jury') return user.user_type === 'JURI';
        if (requiredRole === 'candidate') return user.user_type === 'ADAY';
        return false;
    }, [user]);

    // Context Provider'ın sağladığı değerler
    const value = {
        user,
        isAuthenticated: !!user,
        isLoading,
        login,
        logout,
        authToken,
        hasRole
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

// 3. Context'i kolayca kullanmak için özel bir hook
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};// src/pages/admin/Advertisements.jsx (Veya dosya adınız neyse)

import React, { useState, useEffect } from "react";
import AdminNavbar from "../../components/navbars/AdminNavbar.jsx";
import { FaEye, FaEdit, FaTrashAlt, FaPlus, FaTimes } from "react-icons/fa";
import { advertisementService } from "../../services/adminService";

// CSRF token fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// Tarih formatlama (YYYY-MM-DD) - Input için
const formatDateForInput = (dateString) => {
    if (!dateString) return "";
    try {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        if(isNaN(year) || isNaN(month) || isNaN(day)) return "";
        return `${year}-${month}-${day}`;
    } catch (e) { return ""; }
};
// Tarih formatlama (Gösterim için - dd.mm.yyyy)
const formatDate = (dateString) => {
    if (!dateString) return "-";
    try { return new Date(dateString).toLocaleDateString("tr-TR"); }
    catch (e) { return dateString; }
};
// DateTime formatlama (Gösterim için - dd.mm.yyyy HH:MM)
const formatDateTime = (dateTimeString) => {
    if (!dateTimeString) return "-";
    try { return new Date(dateTimeString).toLocaleString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }); }
    catch (e) { return dateTimeString; }
};


const Advertisements = () => {
  // === State Tanımlamaları ===
  const [ilanlar, setIlanlar] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortConfig, setSortConfig] = useState({ key: 'olusturulma_tarihi', direction: "desc" });
  const [modalOpen, setModalOpen] = useState(false);
  const [detailModalIlan, setDetailModalIlan] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [formError, setFormError] = useState('');
  const [kadroTipiOptions, setKadroTipiOptions] = useState([]);
  const [birimOptions, setBirimOptions] = useState([]);
  const [bolumOptions, setBolumOptions] = useState([]);
  const [anabilimDaliOptions, setAnabilimDaliOptions] = useState([]);
  const initialFormState = { id: null, baslik: "", aciklama: "", kadro_tipi: "", birim: "", bolum: "", anabilim_dali: "", baslangic_tarihi: "", bitis_tarihi: "", aktif: true };
  const [form, setForm] = useState(initialFormState);

  // --- Veri Çekme Effect'leri ---
  useEffect(() => {
    fetchIlanlar();
    fetchOptions();
  }, []);

  const fetchIlanlar = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await advertisementService.getAll();
      if (Array.isArray(data?.results)) {
        setIlanlar(data.results);
      } else if (Array.isArray(data)) {
        setIlanlar(data);
      } else {
        throw new Error('Geçersiz ilan verisi');
      }
    } catch (err) {
      console.error("İlanlar çekilirken hata:", err);
      setError(err.message);
      setIlanlar([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchOptions = async () => {
    const fetchOption = async (url) => {
      try {
        const res = await fetch(`/api/${url}/`);
        if (!res.ok) throw new Error(`${url} verileri alınamadı`);
        const data = await res.json();
        return data.results || data;
      } catch (err) {
        console.error(`${url} verileri çekilirken hata:`, err);
        return [];
      }
    };

    try {
      const [kadroData, birimData, bolumData, anabilimData] = await Promise.all([
        fetchOption('kadro-tipi'),
        fetchOption('birim'),
        fetchOption('bolum'),
        fetchOption('anabilim-dali')
      ]);
      setKadroTipiOptions(kadroData);
      setBirimOptions(birimData);
      setBolumOptions(bolumData);
      setAnabilimDaliOptions(anabilimData);
    } catch (error) {
      console.error("Dropdown seçenekleri çekilirken hata:", error);
    }
  };

  // --- Filtreleme ve Sıralama ---
   const handleSearch = (e) => setSearchTerm(e.target.value);

   const handleSort = (key) => {
    let direction = "asc";
    // 'olusturan' için backend field'ı 'olusturan__username' varsayalım
    const backendKey = key === 'olusturan' ? 'olusturan_username' : key;
    if (sortConfig.key === backendKey && sortConfig.direction === "asc") direction = "desc";
    setSortConfig({ key: backendKey, direction }); // State'i backend key'i ile set et
};
const sortedIlanlar = [...ilanlar].sort((a, b) => {
  if (!sortConfig.key) return 0;
  let key = sortConfig.key;
  // Sıralanacak değerleri alırken ilişkili alanlara dikkat et
  let valA = key.includes('.') ? key.split('.').reduce((o, i) => o?.[i], a) : a[key];
  let valB = key.includes('.') ? key.split('.').reduce((o, i) => o?.[i], b) : b[key];

  // İlişkili alanlar için özel sıralama
  if (key === 'kadro_tipi.tip') { valA = a.kadro_tipi?.tip?.toLowerCase() || ''; valB = b.kadro_tipi?.tip?.toLowerCase() || ''; }
  else if (key === 'birim.ad') { valA = a.birim?.ad?.toLowerCase() || ''; valB = b.birim?.ad?.toLowerCase() || ''; }
  else if (key === 'bolum.ad') { valA = a.bolum?.ad?.toLowerCase() || ''; valB = b.bolum?.ad?.toLowerCase() || ''; }
  else if (key === 'olusturan_username') { valA = a.olusturan_username?.toLowerCase() || ''; valB = b.olusturan_username?.toLowerCase() || ''; } // OLUŞTURAN EKLENDİ
  // Tarih alanları
  else if (['baslangic_tarihi', 'bitis_tarihi', 'olusturulma_tarihi'].includes(key)) { valA = a[key] ? new Date(a[key]) : null; valB = b[key] ? new Date(b[key]) : null; if (valA === null && valB === null) return 0; if (valA === null) return sortConfig.direction === 'asc' ? 1 : -1; if (valB === null) return sortConfig.direction === 'asc' ? -1 : 1; }
  // Boolean (aktif)
  else if (key === 'aktif') { valA = a.aktif; valB = b.aktif; }
  // Diğer string alanlar
  else if (typeof valA === 'string' && typeof valB === 'string') { valA = valA.toLowerCase(); valB = valB.toLowerCase(); }

  // Genel karşılaştırma
  if (valA < valB) return sortConfig.direction === "asc" ? -1 : 1;
  if (valA > valB) return sortConfig.direction === "asc" ? 1 : -1;
  return 0;
});

const filteredIlanlar = sortedIlanlar.filter((ilan) => {
  if (!searchTerm) return true;
  const searchLower = searchTerm.toLowerCase();
  return (
      (ilan.baslik?.toLowerCase().includes(searchLower)) ||
      (ilan.kadro_tipi?.tip?.toLowerCase().includes(searchLower)) ||
      (ilan.birim?.ad?.toLowerCase().includes(searchLower)) ||
      (ilan.bolum?.ad?.toLowerCase().includes(searchLower)) ||
      (ilan.olusturan_username?.toLowerCase().includes(searchLower)) // OLUŞTURAN EKLENDİ
  );
});


const handleDelete = async (id) => {
  if (!window.confirm(`ID ${id} olan ilanı silmek istediğinizden emin misiniz?`)) return;
  const csrftoken = getCookie('csrftoken');
  if (!csrftoken) { alert("Güvenlik token'ı alınamadı."); return; }
  // Belirli bir satır için loading gösterilebilir veya genel state
  setError(null);
  try {
      const response = await fetch(`http://localhost:8000/api/ilanlar/${id}/`, {
          method: 'DELETE', headers: { 'X-CSRFToken': csrftoken }, credentials: 'include'
      });
      if (!response.ok && response.status !== 204) {
          const errorData = await response.text(); throw new Error(`İlan silinemedi (${response.status}): ${errorData}`);
      }
      setIlanlar(prev => prev.filter(i => i.id !== id));
      alert("İlan başarıyla silindi.");
  } catch (err) { console.error("İlan silme hatası:", err); setError(err.message); alert(`İlan silinirken hata: ${err.message}`); }
  // finally { setLoading(false); } // Genel loading varsa
};

const openForm = (ilan = null) => {
  setFormError('');
  if (ilan) { // Düzenleme Modu
    setForm({
        id: ilan.id, baslik: ilan.baslik || "", aciklama: ilan.aciklama || "",
        kadro_tipi: ilan.kadro_tipi?.id ?? ilan.kadro_tipi ?? "", // ID al
        birim: ilan.birim?.id ?? ilan.birim ?? "",             // ID al
        bolum: ilan.bolum?.id ?? ilan.bolum ?? "",             // ID al
        anabilim_dali: ilan.anabilim_dali?.id ?? ilan.anabilim_dali ?? "", // ID al
        baslangic_tarihi: formatDateForInput(ilan.baslangic_tarihi) || "",
        bitis_tarihi: formatDateForInput(ilan.bitis_tarihi) || "",
        aktif: ilan.aktif === undefined ? true : ilan.aktif
    });
    setEditMode(true);
  } else { // Ekleme Modu
    setForm(initialFormState); setEditMode(false);
  }
  setModalOpen(true);
};

const closeModal = () => { setModalOpen(false); setEditMode(false); setForm(initialFormState); setFormError(''); };

const handleChange = (e) => {
  const { name, value, type, checked } = e.target;
  setForm(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
  // Cascading dropdown: Birim değişince Bölüm ve Anabilim Dalını sıfırla
  if (name === 'birim') setForm(prev => ({ ...prev, bolum: '', anabilim_dali: '' }));
  if (name === 'bolum') setForm(prev => ({ ...prev, anabilim_dali: '' }));
};

const handleSave = async (e) => {
  e.preventDefault();
  setFormError('');
  setSubmitting(true);

  try {
    const payload = {
      baslik: form.baslik,
      aciklama: form.aciklama,
      aktif: form.aktif,
      kadro_tipi: form.kadro_tipi ? parseInt(form.kadro_tipi, 10) : null,
      birim: form.birim ? parseInt(form.birim, 10) : null,
      bolum: form.bolum ? parseInt(form.bolum, 10) : null,
      anabilim_dali: form.anabilim_dali ? parseInt(form.anabilim_dali, 10) : null,
      baslangic_tarihi: form.baslangic_tarihi || null,
      bitis_tarihi: form.bitis_tarihi || null,
    };

    if (editMode) {
      await advertisementService.update(form.id, payload);
    } else {
      await advertisementService.create(payload);
    }

    alert(`İlan başarıyla ${editMode ? 'güncellendi' : 'oluşturuldu'}!`);
    closeModal();
    fetchIlanlar();
  } catch (err) {
    console.error(`İlan ${editMode ? 'güncelleme' : 'kaydetme'} hatası:`, err);
    setFormError(err.response?.data?.detail || "İşlem sırasında bir hata oluştu");
  } finally {
    setSubmitting(false);
  }
};

  // --- Render ---
   if (loading) return (<><AdminNavbar /><div className="admin-ads-container is-loading"><p>İlanlar yükleniyor...</p></div><style>{css}</style></>);
   if (error && ilanlar.length === 0) return (<><AdminNavbar /><div className="admin-ads-container has-error"><h2 className="page-title">İlan Yönetimi</h2><p className="error-message">Hata: {error}</p></div><style>{css}</style></>);


  return (
    <>
    <AdminNavbar />
    <div className="admin-ads-container">
       <div className="page-header">
           <h2 className="page-title">İlan Yönetimi</h2>
           <button onClick={() => openForm()} className="button primary add-ilan-button">
               <FaPlus /> Yeni İlan Ekle
           </button>
       </div>

      {/* Arama input placeholder güncellendi */}
      <input type="text" placeholder="Başlık, Kadro, Birim, Bölüm, Oluşturan Ara..." value={searchTerm} onChange={handleSearch} className="search-input card"/>

      {error && <p className="error-message">{error}</p>}

      <div className="table-container card">
        <div className="desktop-table">
          <table>
            <thead>
            <tr>
                     <th onClick={() => handleSort("baslik")}>Başlık {sortConfig.key === "baslik" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th onClick={() => handleSort("kadro_tipi")}>Kadro {sortConfig.key === "kadro_tipi" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th onClick={() => handleSort("birim")}>Birim {sortConfig.key === "birim" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th onClick={() => handleSort("bolum")}>Bölüm {sortConfig.key === "bolum" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th>Tarihler</th>
                     <th onClick={() => handleSort("olusturan_username")}>Oluşturan Kullanıcı Adı {sortConfig.key === "olusturan_username" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th onClick={() => handleSort("aktif")}>Durum {sortConfig.key === "aktif" ? (sortConfig.direction === "asc" ? "▲" : "▼") : "↕"}</th>
                     <th>İşlemler</th>
                 </tr>
            </thead>
            <tbody>
                {filteredIlanlar.length > 0 ? filteredIlanlar.map((ilan) => (
                  <tr key={ilan.id}>
                    <td>{ilan.baslik}</td>
                    <td>{ilan.kadro_tipi?.tip || ilan.kadro_tipi || '-'}</td>
                    <td>{ilan.birim?.ad || ilan.birim || '-'}</td>
                    <td>{ilan.bolum?.ad || ilan.bolum || '-'}</td>
                    <td>{formatDate(ilan.baslangic_tarihi)} - {formatDate(ilan.bitis_tarihi)}</td>
                    <td>{ilan.olusturan_username || '-'}</td>
                    <td><span className={`status-tag ${ilan.aktif ? "aktif" : "pasif"}`}>{ilan.aktif ? "Aktif" : "Pasif"}</span></td>
                    <td>
                      <div className="actions">
                           <button onClick={() => setDetailModalIlan(ilan)} title="Detayları Gör" className="action-btn view"><FaEye /></button>
                           <button onClick={() => openForm(ilan)} title="İlanı Düzenle" className="action-btn edit"><FaEdit /></button>
                           <button onClick={() => handleDelete(ilan.id)} title="İlanı Sil" className="action-btn delete"><FaTrashAlt /></button>
                      </div>
                    </td>
                  </tr>
                )) : (<tr><td colSpan="7" className="no-results">Gösterilecek ilan bulunamadı.</td></tr>)}
              </tbody>
          </table>
        </div>

        {/* ====> MOBİL KARTLARA OLUŞTURAN EKLENDİ <==== */}
        <div className="mobile-cards">
               {filteredIlanlar.length > 0 ? filteredIlanlar.map((ilan) => (
                   <div key={ilan.id} className="ilan-card card"> 
                       <div className="card-header">
                           <h3>{ilan.baslik}</h3>
                           <span className={`status-tag ${ilan.aktif ? "aktif" : "pasif"}`}>{ilan.aktif ? "Aktif" : "Pasif"}</span>
                       </div>
                       <div className="card-body">
                           <p><strong>Kadro:</strong> {ilan.kadro_tipi?.tip || ilan.kadro_tipi || '-'}</p>
                           <p><strong>Birim:</strong> {ilan.birim?.ad || ilan.birim || '-'}</p>
                           <p><strong>Bölüm:</strong> {ilan.bolum?.ad || ilan.bolum || '-'}</p>
                           <p><strong>Oluşturan:</strong> {ilan.olusturan_username || '-'}</p>
                           <p><strong>Tarihler:</strong> {formatDate(ilan.baslangic_tarihi)} - {formatDate(ilan.bitis_tarihi)}</p>
                       </div>
                       <div className="actions">
                            {/* Mobil butonlar */}
                           <button className="button button-sm info" onClick={() => setDetailModalIlan(ilan)}><FaEye /> Detay</button>
                           <button className="button button-sm warning" onClick={() => openForm(ilan)}><FaEdit /> Düzenle</button>
                           <button className="button button-sm danger" onClick={() => handleDelete(ilan.id)}><FaTrashAlt /> Sil</button>
                       </div>
                   </div>
               )) : (
                   <p className="no-results">Gösterilecek ilan bulunamadı.</p>
               )}
          </div>
        </div>


        {/* Detay Modalı */}
        {detailModalIlan && (
           <div className="modal-overlay" onClick={() => setDetailModalIlan(null)}>
             <div className="modal-content view-modal" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h3>İlan Detayı</h3>
                    <button className="close-btn" onClick={() => setDetailModalIlan(null)}><FaTimes /></button>
                </div>
                 <div className="modal-body">
                    <p><strong>ID:</strong> {detailModalIlan.id}</p>
                    <p><strong>Başlık:</strong> {detailModalIlan.baslik}</p>
                    <p><strong>Açıklama:</strong> {detailModalIlan.aciklama || '-'}</p>
                    <p><strong>Kadro Tipi:</strong> {detailModalIlan.kadro_tipi?.tip || detailModalIlan.kadro_tipi || '-'}</p>
                    <p><strong>Birim:</strong> {detailModalIlan.birim?.ad || detailModalIlan.birim || '-'}</p>
                    <p><strong>Bölüm:</strong> {detailModalIlan.bolum?.ad || detailModalIlan.bolum || '-'}</p>
                    <p><strong>Anabilim Dalı:</strong> {detailModalIlan.anabilim_dali?.ad || detailModalIlan.anabilim_dali || '-'}</p>
                    <p><strong>Başlangıç Tarihi:</strong> {formatDate(detailModalIlan.baslangic_tarihi)}</p>
                    <p><strong>Bitiş Tarihi:</strong> {formatDate(detailModalIlan.bitis_tarihi)}</p>
                    <p><strong>Oluşturulma Tarihi:</strong> {formatDateTime(detailModalIlan.olusturulma_tarihi)}</p>
                    <p><strong>Durum:</strong> {detailModalIlan.aktif ? "Aktif" : "Pasif"}</p>
                 </div>
                 <div className="modal-actions">
                     <button className="button secondary" onClick={() => setDetailModalIlan(null)}>Kapat</button>
                 </div>
             </div>
           </div>
        )}

        {/* Ekle/Düzenle Modalı */}
        {modalOpen && (
           <div className="modal-overlay" onClick={closeModal}>
             <div className="modal-content edit-modal" onClick={(e) => e.stopPropagation()}>
                 <div className="modal-header">
                     <h3>{editMode ? "İlan Düzenle" : "Yeni İlan Ekle"}</h3>
                     <button className="close-btn" onClick={closeModal}><FaTimes /></button>
                 </div>
                  <form onSubmit={handleSave} className="modal-body">
                       {formError && <p className="form-error">{formError}</p>}
                      <div className="form-grid two-columns">
                           <label className="full-width">Başlık*<input type="text" name="baslik" value={form.baslik} onChange={handleChange} required disabled={submitting} /></label>
                           <label className="full-width">Açıklama<textarea name="aciklama" rows="4" value={form.aciklama} onChange={handleChange} disabled={submitting}></textarea></label>
                           <label>Kadro Türü*
                               <select name="kadro_tipi" value={form.kadro_tipi || ''} onChange={handleChange} required disabled={submitting}>
                                   <option value="" disabled>-- Seçiniz --</option>
                                   {kadroTipiOptions.map(opt => (<option key={opt.id} value={opt.id}>{opt.tip}</option>))}
                               </select>
                           </label>
                           <label>Birim*
                                <select name="birim" value={form.birim || ''} onChange={handleChange} required disabled={submitting}>
                                   <option value="" disabled>-- Seçiniz --</option>
                                   {birimOptions.map(opt => (<option key={opt.id} value={opt.id}>{opt.ad}</option>))}
                               </select>
                           </label>
                            <label>Bölüm*
                                <select name="bolum" value={form.bolum || ''} onChange={handleChange} required disabled={submitting || !form.birim}>
                                   <option value="" disabled>-- Önce Birim Seçin --</option>
                                    {bolumOptions.filter(opt => String(opt.birim) === String(form.birim)).map(opt => ( <option key={opt.id} value={opt.id}>{opt.ad}</option> ))}
                               </select>
                           </label>
                           <label>Anabilim Dalı*
                                <select name="anabilim_dali" value={form.anabilim_dali || ''} onChange={handleChange} required disabled={submitting || !form.bolum}>
                                   <option value="" disabled>-- Önce Bölüm Seçin --</option>
                                    {anabilimDaliOptions.filter(opt => String(opt.bolum) === String(form.bolum)).map(opt => ( <option key={opt.id} value={opt.id}>{opt.ad}</option> ))}
                               </select>
                           </label>
                           <label>Başlangıç Tarihi*<input type="date" name="baslangic_tarihi" value={form.baslangic_tarihi} onChange={handleChange} required disabled={submitting} /></label>
                           <label>Bitiş Tarihi*<input type="date" name="bitis_tarihi" value={form.bitis_tarihi} onChange={handleChange} required disabled={submitting} /></label>
                           <div className="checkbox-group full-width" style={{justifyContent:'flex-start', border:'none', padding:'0'}}>
                                <label style={{flexDirection:'row', alignItems:'center', gap:'0.5rem', fontWeight:'normal'}}>
                                    <input type="checkbox" name="aktif" checked={form.aktif} onChange={handleChange} disabled={submitting}/> Aktif İlan
                                </label>
                           </div>
                      </div>
                       <div className="modal-actions">
                           <button type="button" className="button secondary" onClick={closeModal} disabled={submitting}> İptal </button>
                           <button type="submit" className="button primary" disabled={submitting}>
                               {submitting ? 'Kaydediliyor...' : (editMode ? 'Değişiklikleri Kaydet' : 'İlanı Oluştur')}
                           </button>
                       </div>
                  </form>
               </div>
             </div>
        )}

      </div>
      <style>{css}</style>
    </>
  );
};


// --- CSS Stilleri ---
const css = `
:root {
    --primary-color: #009944; --primary-dark: #007c39; --secondary-color: #6c757d; --secondary-dark: #5a6268;
    --light-gray: #f8f9fa; --medium-gray: #dee2e6; --dark-gray: #495057; --text-color: #343a40;
    --white-color: #fff; --danger-color: #dc3545; --danger-dark: #bd2130; --warning-color: #ffc107;
    --warning-dark: #e0a800; --success-color: #28a745; --success-dark: #1e7e34; --info-color: #17a2b8; --info-dark: #117a8b;
    --border-radius-sm: 4px; --border-radius-md: 8px; --border-radius-lg: 12px;
    --box-shadow-light: 0 2px 5px rgba(0,0,0,0.06); --box-shadow-medium: 0 4px 12px rgba(0,0,0,0.1);
}

/* Container adını bu component için değiştirelim */
.admin-ads-container { padding: 1.5rem; background-color: #f4f6f9; min-height: calc(100vh - 60px); font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
.admin-ads-container.is-loading, .admin-ads-container.has-error { display: flex; justify-content: center; align-items: center; text-align: center; font-size: 1.2rem; color: var(--secondary-color); }
.admin-ads-container.has-error p { color: var(--danger-color); background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 1rem; border-radius: var(--border-radius-md); }

.page-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; flex-wrap: wrap; gap: 1rem; }
.page-title { color: var(--primary-dark); margin: 0; font-size: 1.8rem; font-weight: 600; }

.card { background-color: var(--white-color); border-radius: var(--border-radius-lg); padding: 1.5rem; box-shadow: var(--box-shadow-medium); margin-bottom: 1.5rem; }
.table-container.card { padding: 0; overflow: hidden;} /* Tablo kartının iç padding'ini sıfırla */

.button { padding: 0.6rem 1rem; border-radius: var(--border-radius-md); border: none; cursor: pointer; font-weight: 500; font-size: 0.9rem; transition: all 0.2s ease; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; line-height: 1.3; text-decoration: none; }
.button:disabled { opacity: 0.6; cursor: not-allowed; }
.button.primary { background-color: var(--primary-color); color: var(--white-color); }
.button.primary:hover:not(:disabled) { background-color: var(--primary-dark); }
.button.secondary { background-color: var(--secondary-color); color: var(--white-color); }
.button.secondary:hover:not(:disabled) { background-color: var(--secondary-dark); }
.button.success { background-color: var(--success-color); color: var(--white-color); }
.button.success:hover:not(:disabled) { background-color: var(--success-dark); }
.button.danger { background-color: var(--danger-color); color: var(--white-color); }
.button.danger:hover:not(:disabled) { background-color: var(--danger-dark); }
.button.warning { background-color: var(--warning-color); color: var(--text-color); }
.button.warning:hover:not(:disabled) { background-color: var(--warning-dark); }
.button.info { background-color: var(--info-color); color: var(--white-color); }
.button.info:hover:not(:disabled) { background-color: var(--info-dark); }
.button.button-sm { padding: 0.4rem 0.8rem; font-size: 0.8rem; gap: 0.3rem; } /* Mobil kart butonları */
.add-ilan-button { /* .button.primary stilini kullanır */ }

.search-input { width: 100%; padding: 0.75rem; border: 1px solid #ced4da; border-radius: var(--border-radius-md); box-sizing: border-box; font-size: 1rem; margin-bottom: 1.5rem;}
.search-input:focus { border-color: var(--primary-color); outline: none; box-shadow: 0 0 0 2px rgba(0, 153, 68, 0.2); }

.form-card { border: 1px solid var(--medium-gray); background-color: #fdfdfd; animation: slideDown 0.3s ease-out; }
@keyframes slideDown { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
.form-card h3 { margin-top: 0; color: var(--primary-color); border-bottom: 1px solid var(--medium-gray); padding-bottom: 0.75rem; margin-bottom: 1.5rem; font-size: 1.25rem; }
.form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem 1.5rem; margin-bottom: 1.5rem; }
.form-grid label, .modal-content label { display: block; font-size: 0.9rem; margin-bottom: 0.3rem; color: #555; font-weight: 500; }
.form-grid input[type="text"], .form-grid input[type="date"], .form-grid select, .form-grid textarea,
.modal-content input[type="text"], .modal-content input[type="date"], .modal-content select, .modal-content textarea { width: 100%; padding: 0.6rem 0.75rem; border: 1px solid #ced4da; border-radius: var(--border-radius-md); box-sizing: border-box; font-size: 0.95rem; transition: border-color 0.2s ease, box-shadow 0.2s ease; }
.form-grid input:focus, .form-grid select:focus, .form-grid textarea:focus,
.modal-content input:focus, .modal-content select:focus, .modal-content textarea:focus { border-color: var(--primary-color); outline: none; box-shadow: 0 0 0 2px rgba(0, 153, 68, 0.2); }
.form-grid textarea { resize: vertical; min-height: 80px; }
.form-grid .full-width { grid-column: 1 / -1; }
.form-actions { text-align: right; margin-top: 1rem; }
.form-error { color: var(--danger-color); font-size: 0.9em; margin-top: 1rem; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 0.75rem; border-radius: var(--border-radius-md); }
.error-message { color: var(--danger-color); font-size: 0.9em; margin-top: 1rem; text-align: center;}

.table-container { overflow-x: auto; }
table { width: 100%; border-collapse: separate; border-spacing: 0; }
th, td { padding: 0.8rem 1rem; border-bottom: 1px solid #dee2e6; text-align: left; font-size: 0.9rem; white-space: nowrap; vertical-align: middle;}
th { background-color: var(--primary-color); color: var(--white-color); cursor: pointer; font-weight: 600; position: sticky; top: 0; z-index: 1;}
th:first-child { border-top-left-radius: var(--border-radius-lg); }
th:last-child { border-top-right-radius: var(--border-radius-lg); }
th:hover { background-color: var(--primary-dark); }
tbody tr:hover { background-color: var(--light-gray); }
tbody tr:last-child td { border-bottom: none; }
tbody tr:last-child td:first-child { border-bottom-left-radius: var(--border-radius-lg); }
tbody tr:last-child td:last-child { border-bottom-right-radius: var(--border-radius-lg); }
.status-tag { padding: 0.25em 0.7em; font-size: 0.85em; font-weight: 600; border-radius: 15px; display: inline-block; }
.status-tag.aktif { background-color: #d1e7dd; color: var(--success-dark); border: 1px solid #a3cfbb;}
.status-tag.pasif { background-color: #f8d7da; color: var(--danger-dark); border: 1px solid #f1b0b7;}
.no-results { text-align: center; padding: 1.5rem; color: var(--secondary-color); font-style: italic; } /* Hem tablo hem kart için */

.actions { display: flex; flex-wrap: nowrap; gap: 0.5rem; align-items: center; }
.actions .action-btn { background: none; border: none; padding: 5px; margin: 0; border-radius: 50%; cursor: pointer; font-size: 1rem; color: var(--secondary-color); transition: all 0.2s ease; width: 32px; height: 32px; display: inline-flex; align-items: center; justify-content: center; }
.actions .action-btn:hover:not(:disabled) { background-color: var(--light-gray); color: var(--text-color); }
.actions .action-btn.view:hover:not(:disabled) { color: var(--info-color); }
.actions .action-btn.edit:hover:not(:disabled) { color: var(--warning-color); }
.actions .action-btn.delete:hover:not(:disabled) { color: var(--danger-color); }
.actions .action-btn:disabled { color: #bbb; cursor: not-allowed; background-color: transparent !important; }

/* Mobil Kartlar */
.mobile-cards { display: none; } /* Varsayılan gizli */
.ilan-card { /* Mobil ilan kartı için temel stil */ background: white; border-radius: var(--border-radius-lg); padding: 1rem; box-shadow: var(--box-shadow-light); margin-bottom: 1rem; }
.ilan-card .card-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 0.75rem; padding-bottom: 0.5rem; border-bottom: 1px solid var(--medium-gray); }
.ilan-card .card-header h3 { margin: 0; font-size: 1.1rem; color: var(--primary-dark); line-height: 1.3; }
.ilan-card .card-body p { margin: 0.3rem 0; font-size: 0.9rem; color: var(--dark-gray); }
.ilan-card .card-body p strong { font-weight: 600; color: var(--text-color); margin-right: 5px; }
.ilan-card .actions { margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--medium-gray); display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.5rem; } /* Mobil butonları yan yana */
.ilan-card .actions button { width: 100%; justify-content: center; }


/* Modal Stilleri */
.modal-overlay { position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.7); /* Biraz daha koyu */ display: flex; align-items: center; justify-content: center; z-index: 1050; padding: 1rem; animation: fadeInOverlay 0.3s ease; }
@keyframes fadeInOverlay { from { opacity: 0; } to { opacity: 1; } }
.modal-content { background-color: var(--white-color); border-radius: var(--border-radius-lg); padding: 1.5rem 2rem; width: 100%; max-width: 700px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); animation: slideInModal 0.3s ease-out; max-height: 90vh; overflow-y: auto; display: flex; flex-direction: column; }
@keyframes slideInModal { from { opacity: 0; transform: translateY(-30px); } to { opacity: 1; transform: translateY(0); } }
.modal-header { display: flex; justify-content: space-between; align-items: center; padding-bottom: 1rem; border-bottom: 1px solid var(--medium-gray); margin-bottom: 1.5rem; flex-shrink: 0;}
.modal-header h3 { font-size: 1.5rem; font-weight: 600; color: var(--primary-dark); margin: 0; }
.close-btn { background: none; border: none; font-size: 1.8rem; color: var(--secondary-color); cursor: pointer; padding: 0; line-height: 1; transition: color 0.2s ease; }
.close-btn:hover { color: var(--text-color); }
.modal-body { flex-grow: 1; overflow-y: auto; padding-right: 5px; /* İç scrollbar için */ }
.modal-body p { margin: 0.75rem 0; color: var(--text-color); line-height: 1.5; }
.modal-body p strong { color: var(--dark-gray); margin-right: 8px; font-weight: 600; }
.modal-actions { display: flex; justify-content: flex-end; margin-top: 1.5rem; gap: 0.75rem; border-top: 1px solid var(--medium-gray); padding-top: 1.5rem; flex-shrink: 0;}
.edit-modal .form-grid { margin-bottom: 0; }
.edit-modal .checkbox-group { grid-column: 1 / -1; display: flex; flex-wrap: wrap; gap: 1.5rem; align-items: center; margin-top: 0.5rem; padding: 1rem 0; }
.edit-modal .checkbox-group label { flex-direction: row; align-items: center; margin-bottom: 0; font-weight: normal;}
.edit-modal .checkbox-group input[type="checkbox"] { width: auto; margin-right: 0.5rem; height: 1rem; width: 1rem; cursor: pointer; }

/* Responsive stiller */
@media (max-width: 1200px) { th, td { white-space: normal; } }
@media (max-width: 992px) { .desktop-table { display: none; } .mobile-cards { display: block; } }
@media (max-width: 768px) {
    .admin-ads-container { padding: 1rem; }
    .card { padding: 1rem; }
    .filters { flex-direction: column; align-items: stretch; }
    .page-header { flex-direction: column; align-items: stretch; }
    .add-ilan-button { width: 100%; justify-content: center;}
}
@media (max-width: 576px) {
    .edit-form-grid { grid-template-columns: 1fr; }
    .modal-content { padding: 1rem 1.5rem; }
    .modal-header h3 { font-size: 1.25rem; }
    .ilan-card .actions { grid-template-columns: 1fr; } /* Mobil kart butonları alt alta */
}

th { white-space: nowrap; }
.ilan-card .card-body p { margin: 0.4rem 0; }
`;

export default Advertisements;import React, { useState, useEffect } from "react"; // useEffect eklendi
import AdminNavbar from "../../components/navbars/AdminNavbar.jsx";
import { applicationService } from "../../services/adminService";
// import { useAuth } from "../../context/AuthContext"; // Gerekirse

// Sabit veriyi kaldır
// const sampleApplications = [ ... ];

// Tarih formatlama fonksiyonu
const formatDate = (dateString) => {
    if (!dateString) return "-";
    try {
        return new Date(dateString).toLocaleDateString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric' });
    } catch { return dateString; }
};

// Belge listesini oluşturma (modal için) - API yanıtına göre güncellendi
const getApplicationDocuments = (basvuru) => {
    if (!basvuru) return [];
    const docs = [];
    if (basvuru.ozgecmis_dosyasi) docs.push({ name: "Özgeçmiş", url: basvuru.ozgecmis_dosyasi });
    if (basvuru.diploma_belgeleri) docs.push({ name: "Diploma Belgeleri", url: basvuru.diploma_belgeleri });
    if (basvuru.yabanci_dil_belgesi) docs.push({ name: "Yabancı Dil Belgesi", url: basvuru.yabanci_dil_belgesi });
    // Başvurunun AdayFaaliyetleri ile ilişkili belgeler de eklenebilir (daha karmaşık)
    return docs;
};

const Applications = () => {
  const [applicationsData, setApplicationsData] = useState([]); // API'den gelen başvurular
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedApp, setSelectedApp] = useState(null);
  const [statusFilter, setStatusFilter] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [sortConfig, setSortConfig] = useState({ key: 'id', direction: 'asc' });

  // Başvuruları çekme
  useEffect(() => {
    const fetchApplications = async () => {
      try {
        setLoading(true);
        setError(null);
        const data = await applicationService.getAll();
        if (!data || data.length === 0) {
          setError('Henüz hiç başvuru bulunmamaktadır.');
        } else {
          setApplicationsData(data);
        }
      } catch (err) {
        console.error("Başvuruları çekerken hata:", err);
        setError(err.message || 'Başvurular yüklenirken bir hata oluştu. Lütfen daha sonra tekrar deneyin.');
      } finally {
        setLoading(false);
      }
    };

    fetchApplications();
  }, []);

  // Sıralama fonksiyonu
  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  // Sıralanmış ve filtrelenmiş başvurular
  const sortedAndFilteredApps = React.useMemo(() => {
    let filtered = applicationsData.filter((app) => {
      const searchLower = searchTerm.toLowerCase();
      const candidateName = `${app.aday?.first_name || ''} ${app.aday?.last_name || ''}`.toLowerCase();
      const candidateTC = app.aday?.TC_KIMLIK || '';

      return (
        (!statusFilter || app.durum === statusFilter) &&
        (candidateName.includes(searchLower) || candidateTC.includes(searchTerm))
      );
    });

    if (sortConfig.key) {
      filtered.sort((a, b) => {
        if (sortConfig.key === 'ad') {
          const nameA = `${a.aday?.first_name || ''} ${a.aday?.last_name || ''}`;
          const nameB = `${b.aday?.first_name || ''} ${b.aday?.last_name || ''}`;
          return sortConfig.direction === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
        }
        if (sortConfig.key === 'tarih') {
          return sortConfig.direction === 'asc' 
            ? new Date(a.basvuru_tarihi) - new Date(b.basvuru_tarihi)
            : new Date(b.basvuru_tarihi) - new Date(a.basvuru_tarihi);
        }
        return sortConfig.direction === 'asc' 
          ? a[sortConfig.key] > b[sortConfig.key] ? 1 : -1
          : a[sortConfig.key] < b[sortConfig.key] ? 1 : -1;
      });
    }

    return filtered;
  }, [applicationsData, searchTerm, statusFilter, sortConfig]);

  // Sayfalama hesaplamaları
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = sortedAndFilteredApps.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(sortedAndFilteredApps.length / itemsPerPage);

  // PDF butonuna tıklandığında (Örnek: Tablo5 PDF'ini açar)
  const handlePdfClick = (app) => {
      // API yanıtında tablo5 nested olarak gelmeli veya app.id ile fetch edilmeli
      const summaryPdfUrl = app.tablo5?.pdf_dosyasi; // tablo5 objesi ve içinde pdf_dosyasi URL'i varsayılıyor
      if (summaryPdfUrl) {
          window.open(summaryPdfUrl, '_blank');
      } else {
          alert("Bu başvuru için özet PDF (Tablo 5) bulunamadı.");
      }
  };

  // Yükleme ve Hata durumu gösterimi
  if (loading) {
    return (
      <>
        <AdminNavbar />
        <div className="applications-container">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Başvurular yükleniyor...</p>
          </div>
        </div>
        <style>{`
          ${css}
          .loading-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 400px;
          }
          .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #009944;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
      </>
    );
  }

  if (error) {
    return (
      <>
        <AdminNavbar />
        <div className="applications-container">
          <h2 className="title">Tüm Başvurular</h2>
          <div className="error-container">
            <p className="error-message">{error}</p>
            <button 
              className="retry-button"
              onClick={() => window.location.reload()}
            >
              Yeniden Dene
            </button>
          </div>
        </div>
        <style>{`
          ${css}
          .error-container {
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.06);
          }
          .error-message {
            color: #dc3545;
            margin-bottom: 20px;
            font-size: 1.1rem;
          }
          .retry-button {
            padding: 10px 20px;
            background: #009944;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
          }
          .retry-button:hover {
            opacity: 0.9;
          }
        `}</style>
      </>
    );
  }

  // Ana Render
  return (
    <>
      <AdminNavbar /> {/* Navbar bileşeni */}
      <div className="applications-container">
        <h2 className="title">Tüm Başvurular</h2> {/* Başlık güncellendi */}

        {/* Filtreleme Alanı */}
        <div className="filters">
          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="">Tüm Durumlar</option>
            {/* Backend'den gelen durumlarla eşleşmeli */}
            <option value="Beklemede">Beklemede</option>
            <option value="Onaylandı">Onaylandı</option>
            <option value="Reddedildi">Reddedildi</option>
            <option value="Değerlendirmede">Değerlendirmede</option>
             {/* ... diğer durumlar ... */}
          </select>
          <input
            type="text"
            placeholder="Aday Adı / TC Kimlik No Ara" // Placeholder güncellendi
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        {/* Masaüstü Tablo */}
        <div className="desktop-table">
          <table>
            <thead>
              <tr>
                <th onClick={() => requestSort('id')} className="sortable">
                  Başvuru No {sortConfig.key === 'id' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => requestSort('ad')} className="sortable">
                  Aday Adı {sortConfig.key === 'ad' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => requestSort('TC_KIMLIK')} className="sortable">
                  TC Kimlik No {sortConfig.key === 'TC_KIMLIK' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => requestSort('tarih')} className="sortable">
                  Başvuru Tarihi {sortConfig.key === 'tarih' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
                </th>
                <th>Durum</th>
                <th>İşlemler</th>
              </tr>
            </thead>
            <tbody>
              {currentItems.length > 0 ? currentItems.map((app) => (
                <tr key={app.id}>
                   {/* API'den gelen verileri kullan */}
                  <td>{app.id}</td>
                  <td>{`${app.aday?.first_name || ''} ${app.aday?.last_name || ''}`}</td>
                  <td>{app.aday?.TC_KIMLIK || '-'}</td>
                  <td>{formatDate(app.basvuru_tarihi)}</td>
                  {/* Duruma göre stil sınıfı (CSS'teki sınıflarla eşleşmeli) */}
                  <td className={
                      app.durum === "Onaylandı" ? "aktif" :
                      app.durum === "Beklemede" ? "beklemede" :
                      app.durum === "Reddedildi" ? "pasif" : ""
                  }>{app.durum || '-'}</td>
                  <td>
                    <div className="actions">
                      <button onClick={() => setSelectedApp(app)}>Detay</button>
                      <button onClick={() => handlePdfClick(app)} disabled={!app.tablo5?.pdf_dosyasi}>PDF</button>
                      <button className="yonlendir" title="İşlevsellik Eklenecek">Yönlendir</button>
                    </div>
                  </td>
                </tr>
              )) : (
                  <tr><td colSpan="6" style={{textAlign:'center'}}>Filtreye uygun başvuru bulunamadı.</td></tr>
              )}
            </tbody>
          </table>

          {/* Sayfalama */}
          {totalPages > 1 && (
            <div className="pagination">
              <button 
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                Önceki
              </button>
              <span>
                Sayfa {currentPage} / {totalPages}
              </span>
              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Sonraki
              </button>
            </div>
          )}
        </div>

        {/* Mobil Kartlar */}
        <div className="mobile-cards">
          {currentItems.length > 0 ? currentItems.map((app) => (
            <div className="application-card" key={app.id}>
              <div className="card-header">
                <h3>{`${app.aday?.first_name || ''} ${app.aday?.last_name || ''}`}</h3>
                 {/* Duruma göre stil sınıfı */}
                 <span className={`status-tag ${
                     app.durum === "Onaylandı" ? "aktif" :
                     app.durum === "Beklemede" ? "beklemede" :
                     app.durum === "Reddedildi" ? "pasif" : ""
                 }`}>{app.durum || '-'}</span>
              </div>
              <div className="card-body">
                <div><strong>Başvuru No:</strong> {app.id}</div>
                <div><strong>TC:</strong> {app.aday?.TC_KIMLIK || '-'}</div>
                <div><strong>Tarih:</strong> {formatDate(app.basvuru_tarihi)}</div>
              </div>
              <div className="actions">
                <button onClick={() => setSelectedApp(app)}>Detay</button>
                <button onClick={() => handlePdfClick(app)} disabled={!app.tablo5?.pdf_dosyasi}>PDF</button>
                <button className="yonlendir" title="İşlevsellik Eklenecek">Yönlendir</button>
              </div>
            </div>
          )) : (
               <p style={{textAlign:'center'}}>Filtreye uygun başvuru bulunamadı.</p>
           )}
        </div>

        {/* Detay Modal */}
        {selectedApp && (
          <div className="modal-overlay" onClick={() => setSelectedApp(null)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <h3>Başvuru Detayı - {`${selectedApp.aday?.first_name || ''} ${selectedApp.aday?.last_name || ''}`}</h3>
              
              <div className="modal-grid">
                <div className="modal-section">
                  <h4>Kişisel Bilgiler</h4>
                  <p><strong>Başvuru No:</strong> {selectedApp.id}</p>
                  <p><strong>TC Kimlik No:</strong> {selectedApp.aday?.TC_KIMLIK || '-'}</p>
                  <p><strong>E-posta:</strong> {selectedApp.aday?.email || '-'}</p>
                  <p><strong>Telefon:</strong> {selectedApp.aday?.telefon || '-'}</p>
                </div>

                <div className="modal-section">
                  <h4>Başvuru Bilgileri</h4>
                  <p><strong>Başvuru Tarihi:</strong> {formatDate(selectedApp.basvuru_tarihi)}</p>
                  <p><strong>Durum:</strong> {selectedApp.durum}</p>
                  <p><strong>Son Güncelleme:</strong> {formatDate(selectedApp.guncelleme_tarihi)}</p>
                </div>

                <div className="modal-section">
                  <h4>Adayın Yüklediği Belgeler</h4>
                  {(() => {
                    const documents = getApplicationDocuments(selectedApp);
                    return documents.length > 0 ? (
                      <ul>
                        {documents.map((doc, i) => (
                          <li key={i}>
                            <a href={doc.url} target="_blank" rel="noopener noreferrer">{doc.name}</a>
                          </li>
                        ))}
                      </ul>
                    ) : <p>Yüklü belge bulunamadı.</p>;
                  })()}
                </div>

                <div className="modal-section">
                  <h4>Başvuru Özeti (Tablo 5)</h4>
                  {selectedApp.tablo5?.pdf_dosyasi ? (
                    <p>
                      <a href={selectedApp.tablo5.pdf_dosyasi} target="_blank" rel="noopener noreferrer" className="indir">
                        Özet PDF'i İndir/Görüntüle
                      </a>
                    </p>
                  ) : <p>Başvuru özeti (Tablo 5) bulunamadı.</p>}
                </div>
              </div>

              <button className="geri" onClick={() => setSelectedApp(null)}>Kapat</button>
            </div>
          </div>
        )}
      </div>

      {/* CSS Stilleri */}
      <style>{`
        ${css}
        .sortable { cursor: pointer; }
        .sortable:hover { background-color: #f8f9fa; }
        .pagination { 
          display: flex; 
          justify-content: center; 
          align-items: center; 
          gap: 10px; 
          margin-top: 20px; 
          padding: 10px;
        }
        .pagination button {
          padding: 8px 16px;
          border: 1px solid #ddd;
          background: white;
          cursor: pointer;
          border-radius: 4px;
        }
        .pagination button:disabled {
          background: #f5f5f5;
          cursor: not-allowed;
        }
        .modal-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 20px;
          margin-top: 20px;
        }
        .modal-section {
          background: #f8f9fa;
          padding: 15px;
          border-radius: 8px;
        }
        .modal-section h4 {
          margin-top: 0;
          color: #009944;
          border-bottom: 1px solid #ddd;
          padding-bottom: 8px;
        }
      `}</style>
    </>
  );
};

// Stil tanımları (CSS Değişkeni)
const css = `
    .applications-container { padding: 20px; background: #f4f6f9; min-height: 100vh; font-family: 'Segoe UI', sans-serif; }
    .title { color: #009944; margin-bottom: 24px; font-size: 1.8rem; font-weight: 600; }
    .filters { display: flex; align-items: center; flex-wrap: wrap; gap: 15px; margin-bottom: 24px; }
    .filters select, .filters input { height: 40px; padding: 0 12px; border: 1px solid #ced4da; border-radius: 8px; flex: 1 1 220px; font-size: 0.95rem; }
    .filters input { min-width: 250px; } /* Arama kutusu biraz daha geniş olabilir */
    .desktop-table { overflow-x: auto; background: white; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.06); }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 14px 16px; border-bottom: 1px solid #eee; text-align: left; font-size: 0.9rem; white-space: nowrap; }
    th { background: #009944; color: white; font-weight: 600; }
    tbody tr:hover { background-color: #f8f9fa; }
    td.aktif { color: #28a745; font-weight: 500; }
    td.pasif { color: #dc3545; font-weight: 500; }
    td.beklemede { color: #ffc107; font-weight: 500; }
    .actions { display: flex; flex-wrap: nowrap; gap: 8px; align-items: center; }
    .actions button { padding: 6px 10px; border: none; border-radius: 6px; cursor: pointer; font-size: 0.85rem; transition: opacity 0.2s; }
    .actions button:hover { opacity: 0.8; }
    .actions button:nth-child(1) { background: #17a2b8; color: white; } /* Detay */
    .actions button:nth-child(2) { background: #6c757d; color: white; } /* PDF */
    .actions button.yonlendir { background: #ffc107; color: #212529; } /* Yönlendir */
    .actions button:disabled { background-color: #adb5bd; cursor: not-allowed; opacity: 0.7; }
    .mobile-cards { display: none; }
    .application-card { background: white; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); padding: 16px; margin-bottom: 16px; }
    .card-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; border-bottom: 1px solid #eee; padding-bottom: 8px; }
    .card-header h3 { margin: 0; font-size: 1.1rem; color: #007c39; }
    .status-tag { padding: 4px 10px; border-radius: 20px; font-size: 0.8rem; font-weight: 600; }
    .status-tag.aktif { background-color: #d4edda; color: #155724; }
    .status-tag.pasif { background-color: #f8d7da; color: #721c24; }
    .status-tag.beklemede { background-color: #fff3cd; color: #856404; }
    .card-body { font-size: 0.9rem; color: #495057; }
    .card-body div { margin-bottom: 6px; }
    .modal-overlay { /* ... önceki gibi ... */ position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; padding: 1rem; }
    .modal-content { /* ... önceki gibi ... */ background: white; padding: 24px; border-radius: 12px; width: 90%; max-width: 550px; max-height: 90vh; overflow-y: auto; }
    .modal-content h3 { margin-top: 0; color: #007c39; border-bottom: 1px solid #eee; padding-bottom: 0.5rem; margin-bottom: 1rem;}
    .modal-content h4 { font-size: 1rem; color: #343a40; margin-top: 1.5rem; margin-bottom: 0.5rem; }
    .modal-content ul { padding-left: 0; list-style: none; }
    .modal-content li { margin-bottom: 0.5rem; }
    .modal-content a { color: #0056b3; }
    .indir { background: #28a745; color: white; border: none; padding: 6px 10px; border-radius: 4px; text-decoration: none; display: inline-block; font-size: 0.9rem; }
    .geri { margin-top: 20px; background: #6c757d; color: white; border: none; padding: 8px 14px; border-radius: 6px; cursor: pointer; float: right; }
    @media (max-width: 992px) { /* Orta ekranlar için tabloyu gizle */
       .desktop-table { display: none; }
       .mobile-cards { display: block; }
    }
    @media (max-width: 768px) { /* Daha küçük ekranlar için filtreler alt alta */
       .filters { flex-direction: column; align-items: stretch; }
       .filters select, .filters input { min-width: unset; }
    }
`;


export default Applications; // Component adını export etimport React, { useState, useEffect } from "react";
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, Legend, Cell
} from "recharts";
import AdminNavbar from "../../components/navbars/AdminNavbar.jsx";
import { dashboardService } from "../../services/adminService";

const COLORS = ["#009944", "#ffc107", "#28a745", "#dc3545", "#007c39", "#6f42c1"];

const styles = {
  body: {
    backgroundColor: "#f4f6f9",
    padding: "40px 20px",
    fontFamily: "Arial, sans-serif"
  },
  header: {
    textAlign: "center",
    marginBottom: "40px"
  },
  headerTitle: {
    fontSize: "32px",
    color: "#333"
  },
  container: {
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "center",
    gap: "30px"
  },
  card: {
    backgroundColor: "#fff",
    width: "260px",
    height: "180px",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    textAlign: "center",
    borderRadius: "20px",
    boxShadow: "0 6px 12px rgba(0,0,0,0.1)",
    transition: "transform 0.3s ease, box-shadow 0.3s ease",
    padding: "10px"
  },
  cardHover: {
    transform: "scale(1.05)",
    boxShadow: "0 10px 20px rgba(0,0,0,0.15)"
  },
  title: {
    color: "#333",
    marginBottom: "10px",
    fontSize: "16px",
    fontWeight: "500",
    lineHeight: "1.4",
    textAlign: "center"
  },
  value: {
    fontSize: "24px",
    fontWeight: "bold",
    color: "#000",
    textAlign: "center"
  },
  yellow: { backgroundColor: "#ffc107", color: "#fff" },
  green: { backgroundColor: "#28a745", color: "#fff" },
  red: { backgroundColor: "#dc3545", color: "#fff" },
  chartContainer: {
    backgroundColor: "#fff",
    borderRadius: "20px",
    padding: "20px",
    boxShadow: "0 6px 12px rgba(0,0,0,0.1)",
    marginTop: "40px",
    maxWidth: "700px",
    marginLeft: "auto",
    marginRight: "auto"
  },
  chartTitle: {
    textAlign: "center",
    marginBottom: "20px",
    fontSize: "20px",
    color: "#333"
  }
};

const Card = ({ title, value, style }) => {
  const [hovered, setHovered] = React.useState(false);
  return (
    <div
      style={{ ...styles.card, ...style, ...(hovered ? styles.cardHover : {}) }}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <h3 style={styles.title}>{title}</h3>
      <p style={styles.value}>{value}</p>
    </div>
  );
};

const AdminDashboard = () => {
  const [dashboardData, setDashboardData] = useState({
    stats: {
      totalPostings: 0,
      activePostings: 0,
      ongoingApplications: 0,
      mostApplied: '-',
      totalUsers: 0,
      totalApplications: 0
    },
    departmentApplications: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await dashboardService.getStats();
        console.log('Dashboard data:', response);

        // Veri yapısını kontrol et ve düzelt
        const stats = response?.stats || {};
        const departmentApplications = Array.isArray(response?.departmentApplications) 
          ? response.departmentApplications.map(item => ({
              name: item.name || 'Bilinmeyen',
              value: parseInt(item.value) || 0
            }))
          : [];

        setDashboardData({
          stats: {
            totalPostings: parseInt(stats.totalPostings) || 0,
            activePostings: parseInt(stats.activePostings) || 0,
            ongoingApplications: parseInt(stats.ongoingApplications) || 0,
            mostApplied: stats.mostApplied || '-',
            totalUsers: parseInt(stats.totalUsers) || 0,
            totalApplications: parseInt(stats.totalApplications) || 0
          },
          departmentApplications
        });
      } catch (err) {
        console.error("Dashboard verisi çekilirken hata:", err);
        setError(err.message || "Veriler yüklenirken bir hata oluştu");
        setDashboardData({
          stats: {
            totalPostings: 0,
            activePostings: 0,
            ongoingApplications: 0,
            mostApplied: '-',
            totalUsers: 0,
            totalApplications: 0
          },
          departmentApplications: []
        });
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, []);

  if (loading) {
    return ( <><AdminNavbar /><div style={styles.body}><p>Admin paneli verileri yükleniyor...</p></div></> );
  }

  const { stats, departmentApplications } = dashboardData;

  return (
    <>
      <AdminNavbar />
      <div style={styles.body}>
        <header style={styles.header}>
          <h1 style={styles.headerTitle}>Admin Dashboard</h1>
          {error && <p style={{color: 'red', textAlign: 'center', marginTop: '1rem'}}>{error}</p>}
        </header>
        <div style={styles.container}>
          <Card title="Toplam İlan Sayısı" value={stats.totalPostings} />
          <Card title="Aktif İlan Sayısı" value={stats.activePostings} style={styles.green} />
          <Card title="Devam Eden Başvuru Süreçleri" value={stats.ongoingApplications} style={styles.yellow} />
          <Card title="En Çok Başvuru Yapılan İlan" value={stats.mostApplied} style={styles.red} />
        </div>

        <div style={styles.chartContainer}>
          <h2 style={styles.chartTitle}>Başvuru Yapılan Bölümlerin Dağılımı</h2>
          {departmentApplications.length > 0 ? (
            <ResponsiveContainer width="100%" height={320}>
              <BarChart 
                data={departmentApplications} 
                margin={{ top: 20, right: 30, left: 0, bottom: 10 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                <YAxis allowDecimals={false} />
                <Tooltip />
                <Legend />
                <Bar dataKey="value" fill="#009944">
                  {departmentApplications.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          ) : (
            <p style={{textAlign:'center', color:'#6c757d'}}>Grafik için bölüm verisi bulunamadı.</p>
          )}
        </div>
      </div>
    </>
  );
};

export default AdminDashboard;// src/pages/admin/Users.jsx (Veya AdminApplications.jsx / dosya adınız neyse)

import React, { useState, useEffect } from "react";
import AdminNavbar from "../../components/navbars/AdminNavbar.jsx";
import { FaEye, FaEdit, FaToggleOn, FaToggleOff, FaTrashAlt, FaPlus, FaTimes } from "react-icons/fa";
import { userService } from "../../services/adminService";

// CSRF token fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// Tarih formatlama
const formatDateTime = (dateTimeString) => {
    if (!dateTimeString) return "-";
    try { return new Date(dateTimeString).toLocaleString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }); }
    catch  { return dateTimeString; }
};


const Users = () => {
    // State Tanımlamaları
    const [usersData, setUsersData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [viewModalUser, setViewModalUser] = useState(null);
    const [editModalUser, setEditModalUser] = useState(null);
    const [editFormData, setEditFormData] = useState({});
    const [academicTitles, setAcademicTitles] = useState([]);
    const [filterRole, setFilterRole] = useState("");
    const [filterStatus, setFilterStatus] = useState("");
    const [searchTerm, setSearchTerm] = useState("");
    const [sortKey, setSortKey] = useState('date_joined');
    const [sortOrder, setSortOrder] = useState("desc");
    const [isAddFormVisible, setIsAddFormVisible] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false); // Ekleme/Güncelleme için genel
    const [isDeletingUser, setIsDeletingUser] = useState(null);
    const [formError, setFormError] = useState(''); // Ekleme/Düzenleme için genel hata


    const [newUserData, setNewUserData] = useState({
        username: '', password: '', first_name: '', last_name: '',
        email: '', TC_KIMLIK: '', user_type: 'ADAY', telefon: '', adres: '', akademik_unvan: null
    });

    // --- API Çağrıları ---

    useEffect(() => {
        fetchUsers();
        fetchAcademicTitles();
    }, []);

    const fetchUsers = async () => {
        try {
            setLoading(true);
            setError(null);
            const data = await userService.getAll();
            if (Array.isArray(data?.results)) {
                setUsersData(data.results);
            } else if (Array.isArray(data)) {
                setUsersData(data);
            } else {
                throw new Error('Geçersiz kullanıcı verisi');
            }
        } catch (err) {
            console.error("Kullanıcıları çekerken hata:", err);
            setError(err.message);
            setUsersData([]);
        } finally {
            setLoading(false);
        }
    };

    const fetchAcademicTitles = async () => {
        try {
            const response = await fetch('/api/kadro-tipi/');
            if (!response.ok) throw new Error('Akademik unvanlar alınamadı');
            const data = await response.json();
            setAcademicTitles(data.results || data);
        } catch (err) {
            console.error("Akademik unvanları çekerken hata:", err);
        }
    };

    // --- Filtreleme ve Sıralama ---

    // Sıralama Mantığı
    const sortedUsers = [...usersData].sort((a, b) => {
        if (!sortKey) return 0;
        let valA = a[sortKey]; let valB = b[sortKey];
        if (sortKey === 'first_name') { valA = `${a.first_name || ''} ${a.last_name || ''}`.trim().toLowerCase(); valB = `${b.first_name || ''} ${b.last_name || ''}`.trim().toLowerCase(); }
        else if (sortKey === 'last_login' || sortKey === 'date_joined') { valA = a[sortKey] ? new Date(a[sortKey]) : null; valB = b[sortKey] ? new Date(b[sortKey]) : null; if (valA === null && valB === null) return 0; if (valA === null) return sortOrder === 'asc' ? 1 : -1; if (valB === null) return sortOrder === 'asc' ? -1 : 1; if (valA < valB) return sortOrder === "asc" ? -1 : 1; if (valA > valB) return sortOrder === "asc" ? 1 : -1; return 0; }
        else if (typeof valA === 'string' && typeof valB === 'string') { valA = valA.toLowerCase(); valB = valB.toLowerCase(); }
        if (valA < valB) return sortOrder === "asc" ? -1 : 1;
        if (valA > valB) return sortOrder === "asc" ? 1 : -1;
        return 0;
    });

    // Filtreleme Mantığı
    const filteredUsers = sortedUsers.filter((user) => {
        const searchLower = searchTerm.toLowerCase();
        const nameLower = `${user.first_name || ''} ${user.last_name || ''}`.toLowerCase();
        const emailLower = user.email?.toLowerCase() || '';
        const tcLower = user.TC_KIMLIK || '';
        const roleMatch = !filterRole || user.user_type === filterRole;
        const statusMatch = !filterStatus || String(user.is_active) === filterStatus;
        const searchMatch = nameLower.includes(searchLower) || emailLower.includes(searchLower) || tcLower.includes(searchTerm);
        return roleMatch && statusMatch && searchMatch;
    });

    // Sıralama Handler'ı
    const handleSort = (key) => {
        const backendKeyMap = { name: 'first_name', email: 'email', tc: 'TC_KIMLIK', role: 'user_type', lastLogin: 'last_login', status: 'is_active' };
        const backendKey = backendKeyMap[key] || key;
        if (sortKey === backendKey) { setSortOrder(sortOrder === "asc" ? "desc" : "asc"); }
        else { setSortKey(backendKey); setSortOrder("asc"); }
    };

    // --- CRUD İşlemleri ---

    // Yeni Kullanıcı Ekleme Form Değişiklik Handler'ı
    const handleNewUserChange = (e) => {
        const { name, value, type, checked } = e.target; // Checkbox için type ve checked eklendi
        setNewUserData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
    };

    // Yeni Kullanıcı Ekleme API Çağrısı
    const handleAddNewUser = async (e) => {
        e.preventDefault();
        setFormError('');
        setIsSubmitting(true);

        try {
            const payload = {
                ...newUserData,
                akademik_unvan: newUserData.akademik_unvan ? parseInt(newUserData.akademik_unvan, 10) : null
            };

            await userService.create(payload);
            alert('Kullanıcı başarıyla eklendi!');
            setIsAddFormVisible(false);
            setNewUserData({
                username: '', password: '', first_name: '', last_name: '',
                email: '', TC_KIMLIK: '', user_type: 'ADAY', telefon: '', adres: '', akademik_unvan: null
            });
            fetchUsers();
        } catch (err) {
            console.error("Kullanıcı ekleme hatası:", err);
            setFormError(err.response?.data?.detail || "Kullanıcı eklenirken bir hata oluştu");
        } finally {
            setIsSubmitting(false);
        }
    };

    // Kullanıcı Durumunu Değiştirme (Aktif/Pasif)
    const toggleStatus = async (userId, currentStatus) => {
        const actionText = currentStatus ? 'pasif' : 'aktif';
        if (!window.confirm(`Kullanıcıyı ${actionText} yapmak istediğinize emin misiniz?`)) return;

        setIsDeletingUser(userId);
        setError(null);

        try {
            const updatedUser = await userService.update(userId, { is_active: !currentStatus });
            setUsersData(prev => prev.map(u => u.id === userId ? updatedUser : u));
            alert(`Kullanıcı başarıyla ${actionText} hale getirildi.`);
        } catch (err) {
            console.error("Durum güncelleme hatası:", err);
            setError(`Durum güncellenirken hata: ${err.message}`);
            alert(`Durum güncellenirken hata: ${err.message}`);
        } finally {
            setIsDeletingUser(null);
        }
    };

    // Kullanıcı Silme
    const handleDeleteUser = async (userId, userName) => {
        if (!window.confirm(`${userName} isimli kullanıcıyı silmek istediğinize emin misiniz? Bu işlem geri alınamaz!`)) return;

        setIsDeletingUser(userId);
        setError(null);

        try {
            await userService.delete(userId);
            setUsersData(prevUsers => prevUsers.filter(u => u.id !== userId));
            alert('Kullanıcı başarıyla silindi.');
        } catch (err) {
            console.error("Kullanıcı silme hatası:", err);
            setError(`Kullanıcı silinirken hata: ${err.message}`);
            alert(`Kullanıcı silinirken hata: ${err.message}`);
        } finally {
            setIsDeletingUser(null);
        }
    };

    // Kullanıcı Düzenleme Modalını Açma
    const openEditModal = (user) => {
        setEditModalUser(user);
        setEditFormData({ // Formu mevcut kullanıcı verileriyle doldur
            first_name: user.first_name || "", last_name: user.last_name || "",
            email: user.email || "", telefon: user.telefon || "", adres: user.adres || "",
            user_type: user.user_type || "ADAY",
            // akademik_unvan ID'sini al (eğer obje geliyorsa .id, direkt ID ise kendisi)
            akademik_unvan: user.akademik_unvan?.id ?? user.akademik_unvan ?? null,
            is_staff: user.is_staff || false,
            is_superuser: user.is_superuser || false,
            is_active: user.is_active === undefined ? true : user.is_active // is_active'i de ekle
        });
        setFormError(''); // Hataları temizle
    };
    const closeEditModal = () => setEditModalUser(null);

    // Düzenleme Formu Değişiklik Handler'ı
    const handleEditFormChange = (e) => {
        const { name, value, type, checked } = e.target;
        setEditFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
    };

    // Kullanıcı Güncelleme (PATCH)
    const handleUpdateUser = async (e) => {
        e.preventDefault();
        if (!editModalUser) return;

        setFormError('');
        setIsSubmitting(true);

        try {
            const payload = {
                first_name: editFormData.first_name,
                last_name: editFormData.last_name,
                email: editFormData.email,
                telefon: editFormData.telefon,
                adres: editFormData.adres,
                user_type: editFormData.user_type,
                akademik_unvan: editFormData.akademik_unvan ? parseInt(editFormData.akademik_unvan, 10) : null,
                is_staff: editFormData.is_staff,
                is_superuser: editFormData.is_superuser,
                is_active: editFormData.is_active,
            };

            const updatedUser = await userService.update(editModalUser.id, payload);
            setUsersData(prev => prev.map(u => u.id === editModalUser.id ? updatedUser : u));
            closeEditModal();
            alert('Kullanıcı başarıyla güncellendi.');
        } catch (err) {
            console.error("Kullanıcı güncelleme hatası:", err);
            setFormError(err.response?.data?.detail || "Kullanıcı güncellenirken bir hata oluştu");
        } finally {
            setIsSubmitting(false);
        }
    };


    // --- Render ---
    if (loading) return (<><AdminNavbar /><div className="admin-users-container is-loading"><p>Kullanıcılar yükleniyor...</p></div><style>{css}</style></>);
    if (error && usersData.length === 0) return (<><AdminNavbar /><div className="admin-users-container has-error"><h2 className="page-title">Kullanıcı Yönetimi</h2><p className="error-message">Hata: {error}</p></div><style>{css}</style></>);

    return (
        <>
            <AdminNavbar />
            <div className="admin-users-container">
                {/* Başlık ve Ekle Butonu */}
                <div className="page-header">
                    <h2 className="page-title">Kullanıcı Yönetimi</h2>
                    <button className="button primary add-user-button" onClick={() => setIsAddFormVisible(!isAddFormVisible)}>
                        <FaPlus /> {isAddFormVisible ? 'Formu Gizle' : 'Yeni Kullanıcı Ekle'}
                    </button>
                </div>

                {/* Yeni Kullanıcı Ekleme Formu */}
                {isAddFormVisible && (
                    <div className="form-card add-user-form">
                        <h3>Yeni Kullanıcı Oluştur</h3>
                        {formError && <p className="form-error">{formError}</p>}
                        <form onSubmit={handleAddNewUser}>
                            <div className="form-grid two-columns"> {/* Grid düzeni */}
                                <label>Kullanıcı Adı*<input type="text" name="username" value={newUserData.username} onChange={handleNewUserChange} required disabled={isSubmitting} /></label>
                                <label>Şifre*<input type="password" name="password" placeholder="Yeni şifre girin" value={newUserData.password} onChange={handleNewUserChange} required disabled={isSubmitting} /></label>
                                <label>Ad*<input type="text" name="first_name" value={newUserData.first_name} onChange={handleNewUserChange} required disabled={isSubmitting} /></label>
                                <label>Soyad*<input type="text" name="last_name" value={newUserData.last_name} onChange={handleNewUserChange} required disabled={isSubmitting} /></label>
                                <label>E-posta*<input type="email" name="email" value={newUserData.email} onChange={handleNewUserChange} required disabled={isSubmitting} /></label>
                                <label>TC Kimlik No*<input type="text" name="TC_KIMLIK" value={newUserData.TC_KIMLIK} onChange={handleNewUserChange} required maxLength={11} pattern="\d{11}" title="11 haneli TC Kimlik No girin" disabled={isSubmitting} /></label>
                                <label>Telefon<input type="tel" name="telefon" placeholder="örn: 5xxxxxxxxx" value={newUserData.telefon} onChange={handleNewUserChange} disabled={isSubmitting} /></label>
                                <label>Rol*
                                    <select name="user_type" value={newUserData.user_type} onChange={handleNewUserChange} required disabled={isSubmitting}>
                                        <option value="ADAY">Aday</option> <option value="JURI">Jüri</option> <option value="YONETICI">Yönetici</option> <option value="ADMIN">Admin</option>
                                    </select>
                                </label>
                                <label className="full-width">Adres<textarea name="adres" rows="2" value={newUserData.adres} onChange={handleNewUserChange} disabled={isSubmitting}></textarea></label>
                                <label>Akademik Unvan
                                    <select name="akademik_unvan" value={newUserData.akademik_unvan || ''} onChange={handleNewUserChange} disabled={isSubmitting}>
                                        <option value="">-- Yok --</option>
                                        {academicTitles.map(title => (<option key={title.id} value={title.id}>{title.tip}</option>))}
                                    </select>
                                </label>
                            </div>
                            <div className="form-actions">
                                <button type="submit" className="button success" disabled={isSubmitting}>
                                    {isSubmitting ? 'Ekleniyor...' : 'Kullanıcı Ekle'}
                                </button>
                            </div>
                        </form>
                    </div>
                )}

                {/* Filtreleme Alanı */}
                <div className="filters card">
                    <select value={filterRole} onChange={(e) => setFilterRole(e.target.value)}>
                        <option value="">Tüm Roller</option><option value="ADAY">Aday</option><option value="JURI">Jüri</option><option value="YONETICI">Yönetici</option><option value="ADMIN">Admin</option>
                    </select>
                    <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
                        <option value="">Tüm Durumlar</option><option value="true">Aktif</option><option value="false">Pasif</option>
                    </select>
                    <input type="text"  placeholder="İsim / TC / E-posta Ara..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                </div>

                {/* Genel Hata Mesajı */}
                {error && !loading && usersData.length === 0 && <p className="error-message">{error}</p>}

                {/* Kullanıcı Tablosu */}
                <div className="table-container card">
                    <div className="desktop-table">
                        <table>
                            <thead>
                                <tr>
                                    {/* Başlıklar ve sıralama */}
                                    {[{ key: 'name', label: 'Adı Soyadı' }, { key: 'email', label: 'E-posta' }, { key: 'tc', label: 'TC Kimlik No' }, { key: 'role', label: 'Rol' }, { key: 'lastLogin', label: 'Son Giriş' }, { key: 'status', label: 'Durum' }].map((col) => (
                                        <th key={col.key} onClick={() => handleSort(col.key)} style={{ cursor: 'pointer', whiteSpace: 'nowrap' }}>
                                            {col.label} {sortKey === (col.key === 'name' ? 'first_name' : col.key === 'tc' ? 'TC_KIMLIK' : col.key === 'role' ? 'user_type' : col.key === 'lastLogin' ? 'last_login' : 'is_active') ? (sortOrder === "asc" ? " ▲" : " ▼") : " ↕"}
                                        </th>))}
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredUsers.length > 0 ? filteredUsers.map((user) => (
                                    <tr key={user.id}>
                                        <td>{`${user.first_name || ''} ${user.last_name || ''}`}</td>
                                        <td>{user.email || '-'}</td>
                                        <td>{user.TC_KIMLIK || '-'}</td>
                                        <td><span className={`role-badge role-${user.user_type?.toLowerCase()}`}>{user.user_type || '-'}</span></td>
                                        <td>{formatDateTime(user.last_login)}</td>
                                        <td><span className={user.is_active ? "status-tag aktif" : "status-tag pasif"}>{user.is_active ? "Aktif" : "Pasif"}</span></td>
                                        <td>
                                            <div className="actions">
                                                {/* Butonlara title eklendi, ikonlar kullanıldı */}
                                                <button onClick={() => setViewModalUser(user)} title="Detayları Gör" className="action-btn view">
                                                    <FaEye />
                                                </button>
                                                <button onClick={() => openEditModal(user)} title="Kullanıcıyı Düzenle" className="action-btn edit">
                                                    <FaEdit />
                                                </button>
                                                <button onClick={() => toggleStatus(user.id, user.is_active)} title={user.is_active ? "Pasif Et" : "Aktif Et"} disabled={isDeletingUser === user.id} className={`action-btn toggle ${user.is_active ? 'active' : 'inactive'}`}>
                                                    {user.is_active ? <FaToggleOn /> : <FaToggleOff />}
                                                </button>
                                                <button className="action-btn delete" onClick={() => handleDeleteUser(user.id, user.username)} disabled={isDeletingUser === user.id} title="Kullanıcıyı Sil">
                                                    {isDeletingUser === user.id ? '...' : <FaTrashAlt />}
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                )) : (<tr><td colSpan="7" className="no-results">Filtreye uygun kullanıcı bulunamadı veya hiç kullanıcı yok.</td></tr>)}
                            </tbody>
                        </table>
                    </div>

                    {/* Mobil Kartlar */}
        <div className="mobile-cards">
             {filteredUsers.length > 0 ? filteredUsers.map((user) => (
                <div className="user-card" key={user.id}>
                  {/* Kart Başlığı - İsim Soyisim */}
                  <h3>{`${user.first_name || ''} ${user.last_name || ''}`}</h3>
                  {/* Diğer Bilgiler */}
                  <p><strong>E-posta:</strong> {user.email || '-'}</p>
                  <p><strong>TC Kimlik No:</strong> {user.TC_KIMLIK || '-'}</p>
                  <p>
                      <strong>Rol:</strong>{' '}
                      <span className={`role-badge role-${user.user_type?.toLowerCase()}`}>
                          {user.user_type || '-'}
                      </span>
                  </p>
                  <p>
                      <strong>Durum:</strong>{' '}
                      <span className={`status-tag ${user.is_active ? "aktif" : "pasif"}`}>
                          {user.is_active ? "Aktif" : "Pasif"}
                      </span>
                  </p>
                  <p><strong>Son Giriş:</strong> {formatDateTime(user.last_login)}</p>
                  {/* İşlem Butonları */}
                  <div className="actions">
                     {/* Butonlara daha önce tanımladığımız fonksiyonları bağlıyoruz */}
                     {/* CSS'te .button ve .button-sm sınıfları tanımlanmıştı */}
                     <button className="button button-sm info" onClick={() => setViewModalUser(user)}><FaEye /> Detay</button>
                     <button className="button button-sm warning" onClick={() => openEditModal(user)}><FaEdit /> Düzenle</button>
                     <button className="button button-sm secondary" onClick={() => toggleStatus(user.id, user.is_active)}>
                           {user.is_active ? <FaToggleOff/> : <FaToggleOn/>} {user.is_active ? "Pasif Et" : "Aktif Et"}
                     </button>
                     <button className="button button-sm danger" onClick={() => handleDeleteUser(user.id, user.username)} disabled={isDeletingUser === user.id}>
                           {isDeletingUser === user.id ? '...' : <FaTrashAlt/>} Sil
                     </button>
                  </div>
                </div>
             )) : (
                 // Filtreye uygun kullanıcı yoksa veya hiç kullanıcı yoksa gösterilecek mesaj
                 <p className="no-results" style={{textAlign:'center', padding:'1rem', color:'var(--secondary-color)'}}>
                    Filtreye uygun kullanıcı bulunamadı veya hiç kullanıcı yok.
                 </p>
             )}
        </div>
                </div>

                {/* Kullanıcı Detay Modal */}
                {viewModalUser && (
                    <div className="modal-overlay" onClick={() => setViewModalUser(null)}>
                        <div className="modal-content view-modal" onClick={(e) => e.stopPropagation()}>
                            <div className="modal-header">
                                <h3>Kullanıcı Detayı</h3>
                                <button className="close-btn" onClick={() => setViewModalUser(null)} aria-label="Close"><FaTimes /></button>
                            </div>
                            <div className="modal-body">
                                <p><strong>Ad Soyad:</strong> {`${viewModalUser.first_name || ''} ${viewModalUser.last_name || ''}`}</p>
                                <p><strong>Kullanıcı Adı:</strong> {viewModalUser.username}</p>
                                <p><strong>E-posta:</strong> {viewModalUser.email}</p>
                                <p><strong>TC Kimlik No:</strong> {viewModalUser.TC_KIMLIK}</p>
                                <p><strong>Telefon:</strong> {viewModalUser.telefon || "-"}</p>
                                <p><strong>Rol:</strong> {viewModalUser.user_type}</p>
                                <p><strong>Akademik Unvan:</strong> {academicTitles.find(t => t.id === viewModalUser.akademik_unvan)?.tip || "-"}</p>
                                <p><strong>Adres:</strong> {viewModalUser.adres || "-"}</p>
                                <p><strong>Kayıt Tarihi:</strong> {formatDateTime(viewModalUser.date_joined)}</p>
                                <p><strong>Son Giriş:</strong> {formatDateTime(viewModalUser.last_login)}</p>
                                <p><strong>Durum:</strong> {viewModalUser.is_active ? "Aktif" : "Pasif"}</p>
                                <p><strong>Yetkiler:</strong> Staff={String(viewModalUser.is_staff)}, Superuser={String(viewModalUser.is_superuser)}</p>
                                {/* Başvurular buraya eklenebilir */}
                            </div>
                        </div>
                    </div>
                )}

                {/* Kullanıcı Düzenleme Modal */}
                {editModalUser && (
                    <div className="modal-overlay" onClick={closeEditModal}>
                        <div className="modal-content edit-modal" onClick={(e) => e.stopPropagation()}>
                            <div className="modal-header">
                                <h3>Kullanıcı Düzenle</h3>
                                <button className="close-btn" onClick={closeEditModal} aria-label="Close"><FaTimes /></button>
                            </div>
                            <form onSubmit={handleUpdateUser} className="modal-body">
                                {formError && <p className="form-error">{formError}</p>}
                                <div className="form-grid two-columns">
                                    <label>Ad*<input type="text" name="first_name" value={editFormData.first_name || ''} onChange={handleEditFormChange} required disabled={isSubmitting} /></label>
                                    <label>Soyad*<input type="text" name="last_name" value={editFormData.last_name || ''} onChange={handleEditFormChange} required disabled={isSubmitting} /></label>
                                    <label>E-posta*<input type="email" name="email" value={editFormData.email || ''} onChange={handleEditFormChange} required disabled={isSubmitting} /></label>
                                    <label>Telefon<input type="tel" name="telefon" value={editFormData.telefon || ''} onChange={handleEditFormChange} disabled={isSubmitting} /></label>
                                    <label>TC Kimlik No (Değiştirilemez)<input type="text" value={editModalUser.TC_KIMLIK || ''} readOnly disabled /></label>
                                    <label>Kullanıcı Adı (Değiştirilemez)<input type="text" value={editModalUser.username || ''} readOnly disabled /></label>
                                    <label className="full-width">Adres<textarea name="adres" rows="2" value={editFormData.adres || ''} onChange={handleEditFormChange} disabled={isSubmitting}></textarea></label>
                                    <label>Rol*
                                        <select name="user_type" value={editFormData.user_type || 'ADAY'} onChange={handleEditFormChange} required disabled={isSubmitting}>
                                            <option value="ADAY">Aday</option> <option value="JURI">Jüri</option> <option value="YONETICI">Yönetici</option> <option value="ADMIN">Admin</option>
                                        </select>
                                    </label>
                                    <label>Akademik Unvan
                                        <select name="akademik_unvan" value={editFormData.akademik_unvan || ''} onChange={handleEditFormChange} disabled={isSubmitting}>
                                            <option value="">-- Yok --</option>
                                            {academicTitles.map(title => (<option key={title.id} value={title.id}>{title.tip}</option>))}
                                        </select>
                                    </label>
                                    <div className="checkbox-group full-width">
                                        <label><input type="checkbox" name="is_active" checked={editFormData.is_active || false} onChange={handleEditFormChange} disabled={isSubmitting} /> Aktif</label>
                                        <label><input type="checkbox" name="is_staff" checked={editFormData.is_staff || false} onChange={handleEditFormChange} disabled={isSubmitting} /> Staff</label>
                                        <label><input type="checkbox" name="is_superuser" checked={editFormData.is_superuser || false} onChange={handleEditFormChange} disabled={isSubmitting} /> Superuser</label>
                                    </div>
                                </div>
                                <div className="modal-actions">
                                    <button type="button" className="button secondary" onClick={closeEditModal} disabled={isSubmitting}> İptal </button>
                                    <button type="submit" className="button primary" disabled={isSubmitting}>
                                        {isSubmitting ? 'Kaydediliyor...' : 'Değişiklikleri Kaydet'}
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

            </div>
            {/* Stil tanımları */}
            <style>{css}</style>
        </>
    );
};


// --- CSS Stilleri (Daha Modern ve Responsive) ---
// Stil tanımları (CSS Değişkeni) - Users.jsx içine eklenecek veya Users.css'e taşınacak
const css = `
:root {
    --primary-color: #009944;
    --primary-dark: #007c39;
    --secondary-color: #6c757d;
    --secondary-dark: #5a6268;
    --light-gray: #f8f9fa;
    --medium-gray: #dee2e6;
    --dark-gray: #495057;
    --text-color: #343a40;
    --white-color: #fff;
    --danger-color: #dc3545;
    --danger-dark: #bd2130;
    --warning-color: #ffc107;
    --warning-dark: #e0a800;
    --success-color: #28a745;
    --success-dark: #1e7e34;
    --info-color: #17a2b8;
    --info-dark: #117a8b;
    --border-radius-sm: 4px;
    --border-radius-md: 8px;
    --border-radius-lg: 12px;
    --box-shadow-light: 0 2px 5px rgba(0,0,0,0.06);
    --box-shadow-medium: 0 4px 12px rgba(0,0,0,0.1);
}

.admin-users-container {
    padding: 1.5rem;
    background-color: var(--light-gray);
    min-height: calc(100vh - 60px); /* Navbar yüksekliğine göre ayarlayın */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.admin-users-container.is-loading,
.admin-users-container.has-error {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-size: 1.2rem;
    color: var(--secondary-color);
}
.admin-users-container.has-error p {
    color: var(--danger-color);
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 1rem;
    border-radius: var(--border-radius-md);
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}
.page-title {
    color: var(--primary-dark);
    margin: 0;
    font-size: 1.8rem;
    font-weight: 600;
}

/* Genel Kart Stili */
.card {
    background-color: var(--white-color);
    border-radius: var(--border-radius-lg);
    padding: 1.5rem;
    box-shadow: var(--box-shadow-medium);
    margin-bottom: 1.5rem;
}

/* Genel Buton Stili */
.button {
    padding: 0.6rem 1rem;
    border-radius: var(--border-radius-md);
    border: none;
    cursor: pointer;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    line-height: 1.3;
    text-decoration: none; /* Link gibi kullanılan butonlar için */
}
.button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}
.button.primary { background-color: var(--primary-color); color: var(--white-color); }
.button.primary:hover:not(:disabled) { background-color: var(--primary-dark); }
.button.secondary { background-color: var(--secondary-color); color: var(--white-color); border: 1px solid var(--secondary-color); }
.button.secondary:hover:not(:disabled) { background-color: var(--secondary-dark); border-color: var(--secondary-dark); }
.button.success { background-color: var(--success-color); color: var(--white-color); }
.button.success:hover:not(:disabled) { background-color: var(--success-dark); }
.button.danger { background-color: var(--danger-color); color: var(--white-color); }
.button.danger:hover:not(:disabled) { background-color: var(--danger-dark); }
.button.warning { background-color: var(--warning-color); color: var(--text-color); }
.button.warning:hover:not(:disabled) { background-color: var(--warning-dark); }
.button.ghost { background: none; border: 1px solid var(--medium-gray); color: var(--text-color); }
.button.ghost:hover:not(:disabled) { background-color: var(--light-gray); border-color: #adb5bd; }
.button.icon-button { padding: 0.4rem; background: none; color: var(--secondary-color); font-size: 1.1rem; border: none; }
.button.icon-button:hover:not(:disabled) { color: var(--text-color); background-color: var(--light-gray); }

.add-user-button {
    background-color: var(--success-color);
    color: var(--white-color);
    border: none;
    padding: 10px 15px;
    border-radius: 8px; /* Eski koddan gelen border-radius */
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s ease;
    display: flex; /* Eski koddan gelen display flex */
    align-items: center; /* Eski koddan gelen align-items */
    gap: 5px; /* Eski koddan gelen gap */
}
.add-user-button:hover:not(:disabled) { background-color: var(--success-dark); }


/* Form Stilleri */
.form-card { border: 1px solid var(--medium-gray); background-color: #fdfdfd; animation: slideDown 0.3s ease-out; padding: 20px; margin-bottom: 1.5rem; border-radius: var(--border-radius-lg); box-shadow: var(--box-shadow-light); }
@keyframes slideDown { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
.form-card h3 { margin-top: 0; color: var(--primary-color); border-bottom: 1px solid var(--medium-gray); padding-bottom: 0.75rem; margin-bottom: 1.5rem; font-size: 1.25rem; }
.form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem 1.5rem; margin-bottom: 1.5rem; }
.form-grid label, .modal-content label { display: block; font-size: 0.9rem; margin-bottom: 0.3rem; color: #555; font-weight: 500; }
.form-grid input[type="text"],
.form-grid input[type="password"],
.form-grid input[type="email"],
.form-grid input[type="tel"],
.form-grid select,
.form-grid textarea,
.modal-content input[type="text"],
.modal-content input[type="password"],
.modal-content input[type="email"],
.modal-content input[type="tel"],
.modal-content select,
.modal-content textarea {
    width: 100%; padding: 0.6rem 0.75rem; border: 1px solid #ced4da; border-radius: var(--border-radius-md); box-sizing: border-box; font-size: 0.95rem; transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
.form-grid input:focus, .form-grid select:focus, .form-grid textarea:focus,
.modal-content input:focus, .modal-content select:focus, .modal-content textarea:focus {
    border-color: var(--primary-color); outline: none; box-shadow: 0 0 0 2px rgba(0, 153, 68, 0.2);
}
.form-grid textarea { resize: vertical; min-height: 60px; }
.form-grid .full-width { grid-column: 1 / -1; }
.form-actions { text-align: right; margin-top: 1rem; }
.form-error, .error-message { color: var(--danger-color); font-size: 0.9em; margin-top: 1rem; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 0.75rem; border-radius: var(--border-radius-md); }

/* Filtre Stilleri */
.filters { display: flex; align-items:center; flex-wrap: wrap; gap: 1rem; }
.filters select, .filters input {
    padding: 10px 12px; /* Padding ayarlandı (eski koddan) */
    height: 42px;
    border: 1px solid #ced4da;
    border-radius: var(--border-radius-md);
    flex: 1 1 200px; /* Büyüyüp küçülebilir, temel 200px (eski koddan) */
    font-size: 0.95rem;
    box-sizing: border-box; /* Padding ve border dahil (eski koddan) */
}
.filters input { min-width: 250px; } /* Arama kutusu için minimum genişlik (eski koddan) */

/* Tablo Stilleri */
.table-container { overflow-x: auto; }
table { width: 100%; border-collapse: separate; border-spacing: 0; }
/* .desktop-table classını tabloyu içeren div'e ekleyin */
.desktop-table { display: block; } /* Başlangıçta görünür */
th, td { padding: 0.8rem 1rem; border-bottom: 1px solid #dee2e6; text-align: left; font-size: 0.9rem; white-space: nowrap; vertical-align: middle;}
th { background-color: var(--primary-color); color: var(--white-color); cursor: pointer; font-weight: 600; position: sticky; top: 0; z-index: 1;}
th:first-child { border-top-left-radius: var(--border-radius-md); }
th:last-child { border-top-right-radius: var(--border-radius-md); }
th:hover { background-color: var(--primary-dark); }
tbody tr:hover { background-color: var(--light-gray); }
tbody tr:last-child td:first-child { border-bottom-left-radius: var(--border-radius-md); }
tbody tr:last-child td:last-child { border-bottom-right-radius: var(--border-radius-md); }
td.aktif { font-weight: 500; } /* Renk status-tag'den gelecek */
td.pasif { font-weight: 500; } /* Renk status-tag'den gelecek */
.no-results td { text-align: center; padding: 1.5rem; color: var(--secondary-color); font-style: italic; }


/* İşlem Butonları (Tablo İçi) */
.actions { display: flex; flex-wrap: nowrap; gap: 0.5rem; align-items: center; }
.actions .action-btn {
    background: none;
    border: none;
    padding: 5px;
    margin: 0;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1rem; /* İkon boyutu */
    color: var(--secondary-color);
    transition: all 0.2s ease;
    width: 32px; /* Sabit boyut */
    height: 32px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.actions .action-btn:hover:not(:disabled) {
    background-color: var(--light-gray);
    color: var(--text-color); /* Genel hover rengi */
}
.actions .action-btn.view:hover:not(:disabled) { color: var(--info-color); }
.actions .action-btn.edit:hover:not(:disabled) { color: var(--warning-color); }
.actions .action-btn.toggle.active > svg { color: var(--success-color); }
.actions .action-btn.toggle.inactive > svg { color: var(--secondary-color); }
.actions .action-btn.toggle:hover:not(:disabled) > svg { opacity: 0.7; }
.actions .action-btn.delete:hover:not(:disabled) { color: var(--danger-color); }
.actions .action-btn:disabled {
    color: #bbb;
    cursor: not-allowed;
    background-color: transparent !important; /* Disabled hover efektini kaldır */
}


/* Rol Rozetleri */
.role-badge { padding: 0.2em 0.6em; font-size: 0.8em; font-weight: 600; border-radius: var(--border-radius-sm); text-transform: uppercase; display: inline-block; }
.role-aday { background-color: #cfe2ff; color: #084298; }
.role-juri { background-color: #fff3cd; color: #664d03; }
.role-yonetici { background-color: #e2e3e5; color: #41464b; }
.role-admin { background-color: #f8d7da; color: #58151c; }

/* Durum Etiketleri */
.status-tag { padding: 0.25em 0.7em; font-size: 0.85em; font-weight: 600; border-radius: 15px; /* Daha yuvarlak */ display: inline-block; }
.status-tag.aktif { background-color: #d1e7dd; color: var(--success-dark); border: 1px solid #a3cfbb;}
.status-tag.pasif { background-color: #f8d7da; color: var(--danger-dark); border: 1px solid #f1b0b7;}


/* Mobil Kartlar */
.mobile-cards { display: none; } /* Başlangıçta gizli (eski koddan) */
.user-card { background: white; border-radius: var(--border-radius-lg); padding: 1rem; box-shadow: var(--box-shadow-light); margin-bottom: 1rem; }
.user-card h3 { margin-top: 0; margin-bottom: 10px; color: var(--primary-dark); font-size: 1.1rem; /* eski koddan gelen değerler */}
.user-card p { margin: 4px 0; font-size: 0.9rem; color: var(--dark-gray); /* eski koddan gelen değerler */}
.user-card p strong { font-weight: 600; color: var(--text-color); margin-right: 5px; }
.user-card .actions {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--medium-gray);
    display: grid; /* Eski koddan gelen grid layout */
    grid-template-columns: 1fr 1fr; /* Butonları 2x2 grid yapalım (eski koddan) */
    gap: 0.75rem; /* Eski koddan gelen gap */
}
.user-card .actions button {
    width: 100%; /* Butonlar grid alanını doldursun (eski koddan) */
    justify-content: center; /* Buton içeriğini ortala (eski koddan) */
}
.user-card .actions .button { /* Genel buton stilini uygula */ }
.user-card .actions .button.delete { background-color: var(--danger-color); color: var(--white-color);} /* Sil butonu rengi (eski koddan) */
.user-card .actions .button.delete:hover:not(:disabled) { background-color: var(--danger-dark); }


/* Modal Stilleri */
.modal-overlay { position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1050; padding: 1rem; animation: fadeInOverlay 0.3s ease; }
@keyframes fadeInOverlay { from { opacity: 0; } to { opacity: 1; } }
.modal-content { background-color: var(--white-color); border-radius: var(--border-radius-lg); padding: 1.5rem 2rem; width: 100%; max-width: 700px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); animation: slideInModal 0.3s ease-out; max-height: 90vh; overflow-y: auto; }
@keyframes slideInModal { from { opacity: 0; transform: translateY(-30px); } to { opacity: 1; transform: translateY(0); } }
.modal-header { display: flex; justify-content: space-between; align-items: center; padding-bottom: 1rem; border-bottom: 1px solid var(--medium-gray); margin-bottom: 1.5rem; }
.modal-header h3 { font-size: 1.5rem; font-weight: 600; color: var(--primary-dark); margin: 0; }
.close-btn { background: none; border: none; font-size: 1.8rem; color: var(--secondary-color); cursor: pointer; padding: 0; line-height: 1; transition: color 0.2s ease; }
.close-btn:hover { color: var(--text-color); }
.modal-body p { margin: 0.75rem 0; color: var(--text-color); line-height: 1.5; }
.modal-body p strong { color: var(--dark-gray); margin-right: 8px; font-weight: 600; }
.modal-body ul { padding-left: 0; list-style: none; margin-top: 0.5rem; }
.modal-body li { margin-bottom: 0.5rem; }
.modal-body a { color: #0d6efd; }
.modal-body a:hover { text-decoration: underline; }
.modal-actions { display: flex; justify-content: flex-end; margin-top: 1.5rem; gap: 0.75rem; border-top: 1px solid var(--medium-gray); padding-top: 1.5rem; }
.edit-modal .form-grid { margin-bottom: 0; }
.edit-modal .checkbox-group { grid-column: 1 / -1; display: flex; flex-wrap: wrap; gap: 1.5rem; align-items: center; margin-top: 0.5rem; padding: 1rem; border: 1px solid #eee; border-radius: var(--border-radius-md); }
.edit-modal .checkbox-group label { flex-direction: row; align-items: center; margin-bottom: 0; font-weight: normal;}
.edit-modal .checkbox-group input[type="checkbox"] { width: auto; margin-right: 0.5rem; height: 1rem; width: 1rem; cursor: pointer; }


/* ====> RESPONSIVE DÜZENLEMELER <==== */

/* Daha geniş ekranlarda tablo hücre içeriğinin sığmazsa alt satıra inmesi */
@media (max-width: 1200px) { th, td { white-space: normal; } }

/* Tablet ve altı (992px) - Tabloyu gizle, kartları göster */
@media (max-width: 992px) {
    .desktop-table { display: none; } /* Tabloyu gizle */
    .mobile-cards { display: block; } /* Kartları görünür yap */
}

/* Daha küçük tablet ve telefonlar (768px) - Filtreleri alt alta getir */
@media (max-width: 768px) {
    .filters {
        flex-direction: column; /* Alt alta */
        align-items: stretch; /* Tam genişliğe yay */
    }
    /* Filtre elemanlarının mobil boyutunu ayarla (eski koddan) */
    .filters select, .filters input {
        flex-basis: auto; /* Flex-basis'i sıfırla */
        width: 100%; /* Tam genişlik */
        min-width: unset; /* Minimum genişliği kaldır */
        font-size: 0.9rem; /* Biraz daha küçük font */
        padding: 8px 10px; /* Daha küçük padding */
        height: auto; /* Yüksekliği içeriğe göre ayarla */
    }
    .page-header { flex-direction: column; align-items: stretch; }
    .add-user-button { width: 100%; justify-content: center;}
    /* th, td { white-space: normal; } /* Tablo zaten gizli olduğu için bu gereksiz olabilir */
}

/* Çok küçük ekranlar (576px) - Form gridini tek sütuna indir */
@media (max-width: 576px) {
    .form-grid { grid-template-columns: 1fr; } /* Ekleme/Düzenleme formları tek sütun (eski koddan) */
    .edit-form-grid { grid-template-columns: 1fr; } /* Zaten vardı */
    .edit-form-grid > div[style*="gridColumn"] { grid-column: span 1; flex-direction: column; align-items: flex-start; gap: 0.5rem;}
    .modal-content { padding: 1.5rem; }
    .modal-header h3 { font-size: 1.25rem; }
    .card { padding: 1rem; } /* Genel kart padding'i (eski koddan) */
    .page-title { font-size: 1.5rem; } /* (eski koddan) */
}`;

export default Users;  .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #e8f5e9;
}

.login-box {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 350px;
}

.login-logo {
    width: 100px;
    margin-bottom: 20px;
}

h2 {
    font-size: 18px;
    color: #333;
    margin-bottom: 20px;
}

form {
    display: flex;
    flex-direction: column;
}

input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
}

form button {
    width: 100%;
    padding: 10px;
    background-color: #4caf50;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
}

form button:hover {
    background-color: #45a049;
}

.error-message {
    color: red;
    font-size: 14px;
    margin-bottom: 10px;
}

.login-links {
    margin-top: 15px;
}

.login-links a {
    color: #4caf50;
    text-decoration: none;
    font-size: 14px;
    margin: 0 5px;
}

.login-links a:hover {
    text-decoration: underline;
}

input:focus {
    outline: 2px solid #28a745; /* Replace #28a745 with your desired green color */
    outline-offset: 2px;
    border: none;
}// src/pages/auth/Login.jsx

import React, { useState, useEffect } from "react";
import { useAuth } from "../../context/AuthContext"; // AuthContext hook'unu import et
import "./Login.css";
import Logo from "../../assets/kou_logo.png";
import { useNavigate } from "react-router-dom";

// CSRF token'ı çerezden okumak için yardımcı fonksiyon
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


const Login = () => {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const { login } = useAuth(); // Context'ten login fonksiyonunu al

    const handleLogin = async (e) => {
        e.preventDefault();
        setError("");
        setLoading(true);

        try {
            // 1. CSRF token'ı al
            await fetch('/api/set-csrf/', {
                method: 'GET',
                credentials: 'include'
            });

            // 2. Login isteği
            const loginResponse = await fetch('/api/auth/login/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                credentials: 'include',
                body: JSON.stringify({
                    username: username,
                    password: password
                })
            });

            const data = await loginResponse.json();

            if (!loginResponse.ok) {
                throw new Error(data.detail || data.non_field_errors?.[0] || 'Giriş başarısız');
            }

            // 3. Kullanıcı bilgilerini al
            const userResponse = await fetch('/api/auth/user/', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Token ${data.key}`
                },
                credentials: 'include'
            });

            if (!userResponse.ok) {
                throw new Error('Kullanıcı bilgileri alınamadı');
            }

            const userData = await userResponse.json();
            // Token'ı da login fonksiyonuna gönder
            login(userData, data.key);

        } catch (error) {
            console.error('Login error:', error);
            setError(error.message || 'Giriş yapılırken bir hata oluştu');
        } finally {
            setLoading(false);
        }
    };

    const handleRegisterRedirect = (e) => {
        e.preventDefault();
        navigate('/register');
    };

    // CSRF token'ı sayfa yüklendiğinde al
    useEffect(() => {
        fetch('/api/set-csrf/', {
            method: 'GET',
            credentials: 'include'
        }).catch(err => {
            console.error("CSRF token alma hatası:", err);
        });
    }, []);

    return (
        <div className="login-container">
            <div className="login-box">
                <img src={Logo} alt="Kocaeli Üniversitesi Logo" className="login-logo" />
                <h2>Kocaeli Üniversitesi Aday Akademik Personel Girişi</h2>
                <form onSubmit={handleLogin}>
                    <input
                        type="text"
                        placeholder="Kullanıcı Adı"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                        disabled={loading}
                    />
                    <input
                        type="password"
                        placeholder="Şifre"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                        disabled={loading}
                    />
                    {error && <p className="error-message">{error}</p>}
                    <button type="submit" disabled={loading}>
                        {loading ? 'GİRİŞ YAPILIYOR...' : 'GİRİŞ YAP'}
                    </button>
                </form>
                <div className="login-links">
                    <a href="/register" onClick={handleRegisterRedirect}>Sisteme kayıt ol</a>
                    <a href="/forgot-password">Parolanı mı unuttun?</a>
                </div>
            </div>
        </div>
    );
};

export default Login;/* Register.css */

:root {
  --primary-color: #009944;
  --primary-dark: #007C39;
  --primary-light: #e6f4eb;
  --secondary-color: #33AA66;
  --success-color: #4caf50;
  --error-color: #f44336;
  --background-color: #F4F6F9;
  --card-color: #FFFFFF;
  --text-primary: #333333;
  --text-secondary: #555555;
  --text-light: #666666;
  --border-radius: 8px;
  --border-color: #EEEEEE;
  --shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  --transition: all 0.25s ease-in-out;
}

/* Main container styles */
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 30px;
  background-color: var(--background-color);
  background-image: linear-gradient(135deg, rgba(0, 153, 68, 0.05) 0%, rgba(0, 153, 68, 0.08) 100%);
}

.register-box {
  width: 100%;
  max-width: 950px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  overflow: hidden;
  transition: var(--transition);
  border: 1px solid var(--border-color);
}

/* Header styles */
.register-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 28px;
  background: linear-gradient(120deg, var(--primary-color), var(--primary-dark));
  color: white;
  text-align: center;
}

.register-logo {
  width: 85px;
  height: auto;
  margin-bottom: 14px;
  transition: transform 0.3s ease;
}

.register-logo:hover {
  transform: scale(1.05);
}

.register-header h2 {
  margin: 0 0 6px;
  font-size: 1.7rem;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.register-header h3 {
  margin: 0;
  font-size: 1.2rem;
  font-weight: 400;
  opacity: 0.95;
  letter-spacing: 0.3px;
}

/* Form styles */
.register-form {
  padding: 30px 45px 45px;
}

.form-title {
  margin-bottom: 25px;
  text-align: center;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 15px;
}

.form-title h4 {
  font-size: 1.5rem;
  font-weight: 500;
  color: var(--text-primary);
  margin: 0;
}

.form-section {
  margin-bottom: 35px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 25px 30px;
  border-left: 4px solid var(--primary-color);
  transition: var(--transition);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  border: 1px solid var(--border-color);
}

.form-section:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.section-title {
  margin: 0 0 18px;
  font-size: 1.1rem;
  color: var(--primary-color);
  font-weight: 500;
  display: flex;
  align-items: center;
}

.section-title:before {
  content: "";
  display: inline-block;
  width: 18px;
  height: 3px;
  background-color: var(--primary-color);
  margin-right: 10px;
  border-radius: 3px;
}

.form-row {
  display: flex;
  gap: 40px;
  margin-bottom: 20px;
}

@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
    gap: 15px;
  }
  
  .register-box {
    border-radius: 0;
  }
  
  .register-form {
    padding: 20px 25px 30px;
  }
}

.form-group {
  flex: 1;
  margin-bottom: 25px;
  min-width: 0;
  width: 100%;
  position: relative;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  color: var(--text-secondary);
  transition: var(--transition);
}

.form-group input:focus + label,
.form-group select:focus + label,
.form-group textarea:focus + label {
  color: var(--primary-color);
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 12px 14px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 1rem;
  transition: var(--transition);
  background-color: white;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 0 3px rgba(0, 153, 68, 0.1);
}

.form-group select {
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 10px center;
  background-size: 16px;
  padding-right: 30px;
}

.form-group textarea {
  resize: vertical;
  min-height: 100px;
}

/* Error handling */
.error-box {
  padding: 14px 16px;
  background-color: #ffebee;
  border-left: 4px solid var(--error-color);
  color: var(--error-color);
  margin-bottom: 25px;
  border-radius: var(--border-radius);
  display: flex;
  align-items: center;
}

.error-box:before {
  content: "⚠️";
  margin-right: 10px;
  font-size: 16px;
}

.form-group input.error,
.form-group select.error,
.form-group textarea.error {
  border-color: var(--error-color);
  background-color: #fffafa;
}

.error-message {
  display: block;
  color: var(--error-color);
  font-size: 0.8rem;
  margin-top: 6px;
  font-weight: 500;
}

/* Password strength meter */
.password-strength {
  margin-top: 12px;
}

.strength-bar {
  height: 6px;
  background-color: var(--border-color);
  border-radius: 3px;
  margin-bottom: 6px;
  overflow: hidden;
}

.strength-fill {
  height: 100%;
  border-radius: 3px;
  transition: width 0.4s, background-color 0.4s;
}

.strength-text {
  font-size: 0.8rem;
  font-weight: 500;
}

/* Form actions */
.form-actions {
  display: flex;
  justify-content: center;
  margin-top: 35px;
}

.btn-register {
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 6px;
  padding: 14px 35px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  min-width: 220px;
  display: flex;
  justify-content: center;
  align-items: center;
  letter-spacing: 0.5px;
  box-shadow: 0 4px 10px rgba(0, 153, 68, 0.2);
}

.btn-register:hover {
  background: var(--primary-dark);
  transform: translateY(-2px);
  box-shadow: 0 6px 15px rgba(0, 153, 68, 0.3);
}

.btn-register:active {
  transform: translateY(0);
}

.btn-register:disabled {
  background: #9e9e9e;
  cursor: not-allowed;
  box-shadow: none;
}

.spinner {
  display: inline-block;
  width: 18px;
  height: 18px;
  border: 2px solid rgba(255, 255, 255, 0.5);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 0.8s linear infinite;
  margin-right: 12px;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Form footer */
.form-footer {
  text-align: center;
  margin-top: 25px;
  font-size: 0.95rem;
  color: var(--text-light);
}

.form-footer a {
  color: var(--primary-color);
  font-weight: 600;
  text-decoration: none;
  transition: var(--transition);
  padding: 2px 4px;
  border-radius: 4px;
}

.form-footer a:hover {
  background-color: var(--primary-light);
  text-decoration: none;
}

/* Success message */
.success-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 50px 30px;
  text-align: center;
}

.success-icon {
  width: 70px;
  height: 70px;
  background: var(--primary-color);
  color: white;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 32px;
  margin-bottom: 25px;
  box-shadow: 0 6px 15px rgba(0, 153, 68, 0.3);
  animation: popIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);
}

@keyframes popIn {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.success-container h3 {
  font-size: 1.6rem;
  color: var(--text-primary);
  margin-bottom: 16px;
}

.success-container p {
  color: var(--text-secondary);
  margin-bottom: 35px;
  max-width: 85%;
  line-height: 1.6;
}

.redirect-message {
  display: flex;
  align-items: center;
  color: var(--text-light);
  font-size: 0.95rem;
  background-color: var(--background-color);
  padding: 10px 16px;
  border-radius: 6px;
  border: 1px solid var(--border-color);
}

.loading-dots {
  display: flex;
  margin-left: 10px;
}

.loading-dots span {
  width: 8px;
  height: 8px;
  background-color: var(--primary-color);
  border-radius: 50%;
  margin: 0 3px;
  animation: dotPulse 1.4s infinite ease-in-out;
}

.loading-dots span:nth-child(2) {
  animation-delay: 0.2s;
}

.loading-dots span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes dotPulse {
  0%, 80%, 100% {
    transform: scale(0);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}

.field-hint {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 0.2rem;
    display: block;
}import React, { useState, useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import axios from "axios";
import "./Register.css";

const Register = () => {
    const [formData, setFormData] = useState({
        username: "", // Username alanı eklendi
        fullName: "",
        identityNumber: "",
        email: "",
        phoneNumber: "",
        password: "",
        confirmPassword: "",
        birthDate: "",
        address: "",
        academicTitle: "",
    });

    const [errors, setErrors] = useState({});
    const [success, setSuccess] = useState("");
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [passwordStrength, setPasswordStrength] = useState(0);
    const navigate = useNavigate();

    // TC ID validation algorithm
    const validateTCKN = (tckn) => {
        if (!tckn) return false;
        if (tckn.length !== 11) return false;
        if (!/^\d+$/.test(tckn)) return false;

        const digits = tckn.split('').map(Number);
        if (digits[0] === 0) return false;

        const evenSum = digits[0] + digits[2] + digits[4] + digits[6] + digits[8];
        const oddSum = digits[1] + digits[3] + digits[5] + digits[7];
        const digit10 = (evenSum * 7 - oddSum) % 10;

        const sumFirst10 = digits.slice(0, 10).reduce((sum, digit) => sum + digit, 0);
        const digit11 = sumFirst10 % 10;

        return digits[9] === digit10 && digits[10] === digit11;
    };

    // Password strength calculation
    const calculatePasswordStrength = (password) => {
        let score = 0;
        if (!password) return 0;

        if (password.length >= 8) score += 1;
        if (password.length >= 12) score += 1;
        if (/[A-Z]/.test(password)) score += 1;
        if (/[a-z]/.test(password)) score += 1;
        if (/[0-9]/.test(password)) score += 1;
        if (/[^A-Za-z0-9]/.test(password)) score += 1;

        return Math.min(score, 5);
    };

    useEffect(() => {
        setPasswordStrength(calculatePasswordStrength(formData.password));
    }, [formData.password]);

    const getStrengthText = () => {
        const strengthTexts = ["Çok Zayıf", "Zayıf", "Orta", "İyi", "Güçlü", "Çok Güçlü"];
        return strengthTexts[passwordStrength] || "";
    };

    const getStrengthColor = () => {
        const colors = ["#ff4d4d", "#ff9966", "#ffcc00", "#99cc33", "#66cc66", "#009933"];
        return colors[passwordStrength] || "#e6e6e6";
    };

    // Phone number formatting
    const formatPhoneNumber = (value) => {
        if (!value) return value;

        const phoneNumber = value.replace(/[^\d]/g, '');

        if (phoneNumber.length < 4) return phoneNumber;
        if (phoneNumber.length < 7) {
            return `0(${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4)}`;
        }
        return `0(${phoneNumber.slice(1, 4)}) ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 11)}`;
    };

    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === "phoneNumber") {
            const formattedValue = formatPhoneNumber(value);
            setFormData({ ...formData, [name]: formattedValue });
        } else if (name === "identityNumber") {
            if (/^\d*$/.test(value) && value.length <= 11) {
                setFormData({ ...formData, [name]: value });

                if (value.length === 11) {
                    if (!validateTCKN(value)) {
                        setErrors({...errors, identityNumber: "Geçersiz TC Kimlik Numarası"});
                    } else {
                        const newErrors = {...errors};
                        delete newErrors.identityNumber;
                        setErrors(newErrors);
                    }
                }
            }
        } else if (name === "username") {
            // Username validasyonu ekle (sadece alfanümerik karakterler)
            if (/^[a-zA-Z0-9_]*$/.test(value)) {
                setFormData({ ...formData, [name]: value });
            }
        } else {
            setFormData({ ...formData, [name]: value });
        }

        // Password match check
        if (name === "confirmPassword" || (name === "password" && formData.confirmPassword)) {
            if (name === "confirmPassword" && formData.password !== value) {
                setErrors({...errors, confirmPassword: "Şifreler eşleşmiyor"});
            } else if (name === "password" && formData.confirmPassword && formData.confirmPassword !== value) {
                setErrors({...errors, confirmPassword: "Şifreler eşleşmiyor"});
            } else {
                const newErrors = {...errors};
                delete newErrors.confirmPassword;
                setErrors(newErrors);
            }
        }
    };

    const validateForm = () => {
        const newErrors = {};
        const requiredFields = {
            username: "Kullanıcı adı gereklidir", // Username hata mesajı eklendi
            fullName: "Ad Soyad gereklidir",
            identityNumber: "TC Kimlik No gereklidir",
            email: "E-posta gereklidir",
            phoneNumber: "Telefon numarası gereklidir",
            password: "Şifre gereklidir",
            confirmPassword: "Şifre tekrarı gereklidir",
            birthDate: "Doğum tarihi gereklidir",
            academicTitle: "Akademik ünvan seçilmelidir"
        };

        // Check all required fields
        Object.entries(requiredFields).forEach(([field, message]) => {
            if (!formData[field]) newErrors[field] = message;
        });

        // Username validation
        if (formData.username) {
            if (formData.username.length < 3) {
                newErrors.username = "Kullanıcı adı en az 3 karakter olmalıdır";
            } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {
                newErrors.username = "Kullanıcı adı sadece harf, rakam ve alt çizgi içerebilir";
            }
        }

        // Format validations
        if (formData.identityNumber && !validateTCKN(formData.identityNumber)) {
            newErrors.identityNumber = "Geçersiz TC Kimlik Numarası";
        }

        if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
            newErrors.email = "Geçersiz e-posta formatı";
        }

        if (formData.phoneNumber && formData.phoneNumber.replace(/[^\d]/g, '').length !== 11) {
            newErrors.phoneNumber = "Geçersiz telefon numarası";
        }

        if (formData.password && formData.password.length < 8) {
            newErrors.password = "Şifre en az 8 karakter olmalıdır";
        }

        if (formData.password && formData.confirmPassword && formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = "Şifreler eşleşmiyor";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleRegister = async (e) => {
        e.preventDefault();

        if (!validateForm()) return;

        setIsSubmitting(true);

        try {
            await axios.post("http://127.0.0.1:8000/api/users/", {
                username: formData.username, // Username alanını gönder
                fullName: formData.fullName,
                identityNumber: formData.identityNumber,
                email: formData.email,
                phoneNumber: formData.phoneNumber.replace(/[^\d]/g, ''),
                password: formData.password,
                birthDate: formData.birthDate,
                address: formData.address,
                academicTitle: formData.academicTitle,
                user_type: "ADAY" // Tüm kullanıcıları ADAY olarak ayarla
            });

            setSuccess("Kayıt başarılı! E-posta adresinize doğrulama bağlantısı gönderildi.");
            setTimeout(() => navigate("/login"), 3000);
        } catch (err) {
            console.error("Kayıt hatası:", err);

            if (err.response?.data?.message) {
                setErrors({general: err.response.data.message});
            } else {
                setErrors({general: "Kayıt başarısız oldu. Lütfen daha sonra tekrar deneyin."});
            }

            setIsSubmitting(false);
        }
    };

    return (
        <div className="register-container">
            <div className="register-box">
                <div className="register-header">
                    <img
                        src="/src/assets/kou_logo.png"
                        alt="Kocaeli Üniversitesi Logo"
                        className="register-logo"
                    />
                    <h2>Kocaeli Üniversitesi</h2>
                    <h3>Akademik Personel Başvuru Sistemi</h3>
                </div>

                {success ? (
                    <div className="success-container">
                        <div className="success-icon">✓</div>
                        <h3>{success}</h3>
                        <p>E-posta adresinize gönderilen doğrulama bağlantısına tıklayarak hesabınızı aktifleştirebilirsiniz.</p>
                        <div className="redirect-message">
                            <span>Giriş sayfasına yönlendiriliyorsunuz</span>
                            <div className="loading-dots">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>
                ) : (
                    <form onSubmit={handleRegister} noValidate className="register-form">
                        <div className="form-title">
                            <h4>Yeni Kayıt</h4>
                        </div>

                        {errors.general && (
                            <div className="error-box">
                                <span>{errors.general}</span>
                            </div>
                        )}

                        <div className="form-section">
                            <h5 className="section-title">Hesap Bilgileri</h5>

                            {/* Username alanı eklendi */}
                            <div className="form-group">
                                <label htmlFor="username">Kullanıcı Adı</label>
                                <input
                                    type="text"
                                    id="username"
                                    name="username"
                                    value={formData.username}
                                    onChange={handleChange}
                                    className={errors.username ? "error" : ""}
                                    placeholder="Kullanıcı adınızı belirleyin"
                                />
                                {errors.username && <span className="error-message">{errors.username}</span>}
                                <small className="field-hint">Sadece harf, rakam ve alt çizgi (_) kullanabilirsiniz</small>
                            </div>
                        </div>

                        <div className="form-section">
                            <h5 className="section-title">Kişisel Bilgiler</h5>

                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="fullName">Ad Soyad</label>
                                    <input
                                        type="text"
                                        id="fullName"
                                        name="fullName"
                                        value={formData.fullName}
                                        onChange={handleChange}
                                        className={errors.fullName ? "error" : ""}
                                        placeholder="Adınızı ve soyadınızı giriniz"
                                    />
                                    {errors.fullName && <span className="error-message">{errors.fullName}</span>}
                                </div>

                                <div className="form-group">
                                    <label htmlFor="birthDate">Doğum Tarihi</label>
                                    <input
                                        type="date"
                                        id="birthDate"
                                        name="birthDate"
                                        value={formData.birthDate}
                                        onChange={handleChange}
                                        className={errors.birthDate ? "error" : ""}
                                    />
                                    {errors.birthDate && <span className="error-message">{errors.birthDate}</span>}
                                </div>
                            </div>

                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="identityNumber">TC Kimlik Numarası</label>
                                    <input
                                        type="text"
                                        id="identityNumber"
                                        name="identityNumber"
                                        value={formData.identityNumber}
                                        onChange={handleChange}
                                        className={errors.identityNumber ? "error" : ""}
                                        placeholder="11 haneli TC Kimlik numaranız"
                                    />
                                    {errors.identityNumber && <span className="error-message">{errors.identityNumber}</span>}
                                </div>

                                <div className="form-group">
                                    <label htmlFor="academicTitle">Akademik Ünvan</label>
                                    <select
                                        id="academicTitle"
                                        name="academicTitle"
                                        value={formData.academicTitle}
                                        onChange={handleChange}
                                        className={errors.academicTitle ? "error" : ""}
                                    >
                                        <option value="">Akademik ünvanınızı seçiniz</option>
                                        <option value="professor">Profesör</option>
                                        <option value="associate">Doçent</option>
                                        <option value="assistant">Dr. Öğretim Üyesi</option>
                                    </select>
                                    {errors.academicTitle && <span className="error-message">{errors.academicTitle}</span>}
                                </div>
                            </div>
                        </div>

                        <div className="form-section">
                            <h5 className="section-title">İletişim Bilgileri</h5>

                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="email">E-posta</label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="email"
                                        value={formData.email}
                                        onChange={handleChange}
                                        className={errors.email ? "error" : ""}
                                        placeholder="örnek@domain.com"
                                    />
                                    {errors.email && <span className="error-message">{errors.email}</span>}
                                </div>

                                <div className="form-group">
                                    <label htmlFor="phoneNumber">Telefon Numarası</label>
                                    <input
                                        type="text"
                                        id="phoneNumber"
                                        name="phoneNumber"
                                        value={formData.phoneNumber}
                                        onChange={handleChange}
                                        placeholder="0(5XX) XXX-XXXX"
                                        className={errors.phoneNumber ? "error" : ""}
                                    />
                                    {errors.phoneNumber && <span className="error-message">{errors.phoneNumber}</span>}
                                </div>
                            </div>

                            <div className="form-group">
                                <label htmlFor="address">Adres</label>
                                <textarea
                                    id="address"
                                    name="address"
                                    value={formData.address}
                                    onChange={handleChange}
                                    rows="3"
                                    className={errors.address ? "error" : ""}
                                    placeholder="Tam adresinizi giriniz"
                                ></textarea>
                                {errors.address && <span className="error-message">{errors.address}</span>}
                            </div>
                        </div>

                        <div className="form-section">
                            <h5 className="section-title">Güvenlik</h5>

                            <div className="form-row">
                                <div className="form-group">
                                    <label htmlFor="password">Şifre</label>
                                    <input
                                        type="password"
                                        id="password"
                                        name="password"
                                        value={formData.password}
                                        onChange={handleChange}
                                        className={errors.password ? "error" : ""}
                                        placeholder="En az 8 karakter"
                                    />
                                    {errors.password && <span className="error-message">{errors.password}</span>}

                                    {formData.password && (
                                        <div className="password-strength">
                                            <div className="strength-bar">
                                                <div
                                                    className="strength-fill"
                                                    style={{
                                                        width: `${(passwordStrength / 5) * 100}%`,
                                                        backgroundColor: getStrengthColor()
                                                    }}
                                                ></div>
                                            </div>
                                            <span className="strength-text" style={{ color: getStrengthColor() }}>
                                                {getStrengthText()}
                                            </span>
                                        </div>
                                    )}
                                </div>

                                <div className="form-group">
                                    <label htmlFor="confirmPassword">Şifre Tekrarı</label>
                                    <input
                                        type="password"
                                        id="confirmPassword"
                                        name="confirmPassword"
                                        value={formData.confirmPassword}
                                        onChange={handleChange}
                                        className={errors.confirmPassword ? "error" : ""}
                                        placeholder="Şifrenizi tekrar giriniz"
                                    />
                                    {errors.confirmPassword && <span className="error-message">{errors.confirmPassword}</span>}
                                </div>
                            </div>
                        </div>

                        <div className="form-actions">
                            <button
                                type="submit"
                                className={isSubmitting ? "btn-register submitting" : "btn-register"}
                                disabled={isSubmitting}
                            >
                                {isSubmitting ? (
                                    <>
                                        <span className="spinner"></span>
                                        İşleniyor...
                                    </>
                                ) : "KAYIT OL"}
                            </button>
                        </div>

                        <div className="form-footer">
                            <p>Zaten hesabınız var mı? <Link to="/login">Giriş Yap</Link></p>
                        </div>
                    </form>
                )}
            </div>
        </div>
    );
};

export default Register;import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import JuryNavbar from "../../components/navbars/JuryNavbar.jsx";
import api from '../../services/api';

const Applications = () => {
  const [sortKey, setSortKey] = useState("name");
  const [filter, setFilter] = useState("");
  const [applications, setApplications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [expandedRow, setExpandedRow] = useState(null);
  const [tumBasvurular, setTumBasvurular] = useState([]);

  useEffect(() => {
    const fetchApplications = async () => {
      setLoading(true);
      setError(null);
      try {
        // Jüri atamalarını al
        const atamalarResponse = await api.get('/juri-atamalar/', {
          params: {
            my_assignments: true
          }
        });
        if (!atamalarResponse.data || !Array.isArray(atamalarResponse.data)) {
          throw new Error('Geçersiz veri formatı');
        }
        console.log("Atamalar:", atamalarResponse.data);
        setApplications(atamalarResponse.data);
        // Tüm başvuruları al
        const basvurularResponse = await api.get('/basvurular/');
        console.log("Başvurular:", basvurularResponse.data);
        setTumBasvurular(basvurularResponse.data || []);
      } catch (err) {
        console.error('Başvurular yüklenirken hata:', err);
        if (err.response) {
          if (err.response.status === 500) {
            setError('Sunucu hatası: Lütfen daha sonra tekrar deneyin.');
          } else if (err.response.status === 401) {
            setError('Oturum süreniz dolmuş. Lütfen tekrar giriş yapın.');
            navigate('/login');
          } else if (err.response.status === 403) {
            setError('Bu sayfaya erişim yetkiniz yok.');
          } else {
            setError(`Sunucu hatası: ${err.response.status} - ${err.response.data?.message || 'Bilinmeyen hata'}`);
          }
        } else if (err.request) {
          setError('Sunucuya bağlanılamıyor. Lütfen internet bağlantınızı kontrol edin.');
        } else {
          setError(`Başvurular yüklenirken hata oluştu: ${err.message}`);
        }
      } finally {
        setLoading(false);
      }
    };
    fetchApplications();
  }, [navigate]);

  const filtered = applications
    .filter(app =>
      (app.ilan?.kadro_tipi?.tip?.toLowerCase().includes(filter.toLowerCase()) ||
      app.ilan?.baslik?.toLowerCase().includes(filter.toLowerCase()) ||
      app.juri_uyesi?.first_name?.toLowerCase().includes(filter.toLowerCase()) ||
      app.juri_uyesi?.last_name?.toLowerCase().includes(filter.toLowerCase()))
    )
    .sort((a, b) => {
      switch(sortKey) {
        case "name":
          return `${a.juri_uyesi?.first_name} ${a.juri_uyesi?.last_name}`.localeCompare(
            `${b.juri_uyesi?.first_name} ${b.juri_uyesi?.last_name}`
          );
        case "position":
          return (a.ilan?.kadro_tipi?.tip || '').localeCompare(b.ilan?.kadro_tipi?.tip || '');
        case "title":
          return (a.ilan?.baslik || '').localeCompare(b.ilan?.baslik || '');
        case "date":
          return new Date(a.atama_tarihi) - new Date(b.atama_tarihi);
        default:
          return 0;
      }
    });

  if (loading) {
    return (
      <>
        <JuryNavbar />
        <div className="applications-container">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Başvurular yükleniyor...</p>
          </div>
        </div>
        <style>{`
          ${css}
          .loading-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 400px;
          }
          .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #009944;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
      </>
    );
  }

  if (error) {
    return (
      <>
        <JuryNavbar />
        <div className="applications-container">
          <h1 className="applications-title">Başvurular</h1>
          <div className="error-container">
            <p className="error-message">{error}</p>
            <button 
              className="retry-button"
              onClick={() => window.location.reload()}
            >
              Yeniden Dene
            </button>
          </div>
        </div>
        <style>{`
          ${css}
          .error-container {
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.06);
          }
          .error-message {
            color: #dc3545;
            margin-bottom: 20px;
            font-size: 1.1rem;
          }
          .retry-button {
            padding: 10px 20px;
            background: #009944;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
          }
          .retry-button:hover {
            opacity: 0.9;
          }
        `}</style>
      </>
    );
  }

  return (
    <>
      <style>{css}</style>
      <JuryNavbar />
      <div className="applications-container">
        <h1 className="applications-title">Başvurular</h1>

        <input
          type="text"
          placeholder="Filtrele: Aday, kadro, ilan..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="filter-input"
        />

        <div className="overflow-x-auto">
          <table className="applications-table">
            <thead>
              <tr>
                <th onClick={() => setSortKey("position")}>Kadro</th>
                <th onClick={() => setSortKey("title")}>İlan Başlığı</th>
                <th onClick={() => setSortKey("date")}>Atama Tarihi</th>
                <th>İşlem</th>
              </tr>
            </thead>
            <tbody>
              {filtered.length > 0 ? filtered.map((app) => {
                const ilgiliBasvurular = tumBasvurular.filter(b => String(b.ilan?.id) === String(app.ilan?.id));
                return (
                  <React.Fragment key={app.id}>
                    <tr>
                      <td>{app.ilan?.kadro_tipi_ad || app.ilan?.kadro_tipi?.tip || '-'}</td>
                      <td>{app.ilan?.baslik || '-'}</td>
                      <td>{app.atama_tarihi ? new Date(app.atama_tarihi).toLocaleDateString('tr-TR') : '-'}</td>
                      <td>
                        <button
                          className="action-button"
                          onClick={() => setExpandedRow(expandedRow === app.id ? null : app.id)}
                        >
                          {expandedRow === app.id ? "Kapat" : "Başvuruları Gör"}
                        </button>
                      </td>
                    </tr>
                    {expandedRow === app.id && (
                      <tr>
                        <td colSpan={4} style={{ background: "#f9f9f9", padding: 0 }}>
                          <div style={{ padding: "18px 0", display: 'flex', justifyContent: 'center' }}>
                            {ilgiliBasvurular.length > 0 ? (
                              <div className="basvuru-cards" style={{ justifyContent: ilgiliBasvurular.length === 1 ? 'center' : 'flex-start' }}>
                                {ilgiliBasvurular.map((basvuru) => (
                                  <div className="basvuru-card" key={basvuru.id} style={{ minWidth: 180, maxWidth: 260, margin: '0 auto' }}>
                                    <div className="aday">{basvuru.aday?.first_name} {basvuru.aday?.last_name}</div>
                                    <div className="tarih">{basvuru.basvuru_tarihi ? new Date(basvuru.basvuru_tarihi).toLocaleDateString('tr-TR') : '-'}</div>
                                    <div style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>
                                      <span className={`status-badge status-${(basvuru.durum || 'Beklemede').toLowerCase()}`}>{basvuru.durum}</span>
                                    </div>
                                    <button
                                      className="action-button"
                                      onClick={() => navigate(`/jury-userapplication/${basvuru.id}`)}
                                    >
                                      Detaylar
                                    </button>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <div style={{padding: '12px 0'}}>Bu ilana henüz başvuru yapılmamış.</div>
                            )}
                          </div>
                        </td>
                      </tr>
                    )}
                  </React.Fragment>
                );
              }) : (
                <tr>
                  <td colSpan="4" style={{ textAlign: 'center', padding: '1rem' }}>
                    {loading ? 'Yükleniyor...' : 'Size atanmış başvuru bulunmamaktadır.'}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
};

const css = `
  .applications-container {
    padding: 24px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: calc(100vh - 70px);
    max-width: 1400px;
    margin: 0 auto;
  }

  .applications-title {
    font-size: 2.3rem;
    font-weight: bold;
    margin-bottom: 28px;
    color: #009944;
    letter-spacing: 1px;
    text-shadow: 0 2px 8px rgba(0,0,0,0.07);
  }

  .filter-input {
    width: 100%;
    padding: 14px;
    border-radius: 10px;
    border: 1.5px solid #cce3d3;
    background-color: #fff;
    color: #333;
    margin-bottom: 28px;
    font-size: 1.08rem;
    transition: border-color 0.2s, box-shadow 0.2s;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
  }

  .filter-input:focus {
    outline: none;
    border-color: #009944;
    box-shadow: 0 0 0 2px #b6f5d8;
  }

  .applications-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    background-color: #fff;
    border-radius: 18px;
    overflow: hidden;
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.10);
  }

  .applications-table th {
    background: #fff;
    color: #009944;
    text-align: left;
    padding: 18px 16px 18px 16px;
    cursor: pointer;
    font-size: 1.08rem;
    font-weight: 600;
    letter-spacing: 0.5px;
    border-bottom: 2px solid #e0e0e0;
    border-top: 4px solid #00c97b;
    border-bottom: 4px solid #00c97b;
    position: relative;
    z-index: 1;
  }
  .applications-table th:first-child {
    border-top-left-radius: 18px;
  }
  .applications-table th:last-child {
    border-top-right-radius: 18px;
  }
  .applications-table tr:last-child td:first-child {
    border-bottom-left-radius: 18px;
  }
  .applications-table tr:last-child td:last-child {
    border-bottom-right-radius: 18px;
  }

  .applications-table td {
    padding: 18px 16px;
    color: #333;
    border-bottom: 1px solid #f0f0f0;
    font-size: 1.01rem;
    vertical-align: middle;
    background: #fff;
    transition: background 0.2s;
  }

  .applications-table tr:last-child td {
    border-bottom: none;
  }

  .applications-table tbody tr:hover {
    background-color: #f6fbf8;
  }

  .status-badge {
    display: inline-block;
    padding: 6px 16px;
    border-radius: 16px;
    font-size: 0.98rem;
    font-weight: 700;
    letter-spacing: 0.2px;
    background: #e0e0e0;
    color: #333;
    box-shadow: 0 1px 4px rgba(0,0,0,0.04);
    margin-bottom: 2px;
    margin-top: 2px;
    min-width: 90px;
    text-align: center;
    border: 1.5px solid #e0e0e0;
    transition: background 0.2s, color 0.2s, border 0.2s;
  }
  .status-beklemede {
    background: #fffbe6;
    color: #bfa100;
    border: 1.5px solid #ffe066;
  }
  .status-incelemede {
    background: #e6f7ff;
    color: #0077b6;
    border: 1.5px solid #90e0ef;
  }
  .status-onaylandı {
    background: #e6ffe6;
    color: #009944;
    border: 1.5px solid #b6f5d8;
  }
  .status-reddedildi {
    background: #ffe6e6;
    color: #d90429;
    border: 1.5px solid #ffb3b3;
  }

  .action-button {
    padding: 9px 18px;
    border-radius: 8px;
    font-size: 0.97rem;
    background: linear-gradient(90deg, #009944 80%, #00c97b 100%);
    color: #fff;
    border: none;
    cursor: pointer;
    font-weight: 600;
    margin-bottom: 3px;
    margin-right: 2px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.07);
    transition: all 0.18s;
  }

  .action-button:hover {
    background: linear-gradient(90deg, #008038 80%, #00b36b 100%);
    transform: translateY(-2px) scale(1.04);
    box-shadow: 0 4px 16px rgba(0,0,0,0.10);
  }

  .action-button:active {
    transform: translateY(0) scale(0.98);
  }

  /* Açılır başvuru kutuları */
  .basvuru-cards {
    display: flex;
    flex-wrap: wrap;
    gap: 18px;
    margin-top: 8px;
    justify-content: flex-start;
  }
  .basvuru-card {
    background: #f8fff9;
    border: 1.5px solid #cce3d3;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    padding: 18px 22px;
    min-width: 180px;
    max-width: 260px;
    flex: 1 1 180px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: space-between;
    transition: box-shadow 0.2s, border 0.2s;
    margin: 0 8px;
  }
  .basvuru-card:hover {
    box-shadow: 0 6px 24px rgba(0,0,0,0.13);
    border: 1.5px solid #009944;
  }
  .basvuru-card .aday {
    font-weight: 600;
    color: #009944;
    margin-bottom: 6px;
    font-size: 1.08rem;
    text-align: center;
    width: 100%;
  }
  .basvuru-card .tarih {
    color: #666;
    font-size: 0.98rem;
    margin-bottom: 4px;
    text-align: center;
    width: 100%;
  }
  .basvuru-card .status-badge {
    margin-bottom: 10px;
    margin-top: 0;
    width: auto;
    min-width: 90px;
    text-align: center;
    display: inline-block;
  }
  .basvuru-card .action-button {
    margin-top: 6px;
    width: 100%;
  }

  @media (max-width: 900px) {
    .applications-container {
      padding: 10px;
    }
    .applications-title {
      font-size: 1.5rem;
      margin-bottom: 16px;
    }
    .applications-table th, .applications-table td {
      padding: 10px 7px;
      font-size: 0.97rem;
    }
    .basvuru-card {
      min-width: 160px;
      padding: 12px 10px;
    }
  }
`;

export default Applications;import React, { useState, useEffect } from "react";
import JuryNavbar from "../../components/navbars/JuryNavbar.jsx";
import api from '../../services/api';
// import { useAuth } from "../../context/AuthContext"; // Gerekli değilse kaldırılabilir

const JuryDashboard = () => {
  // State tanımlamaları
  const [statsData, setStatsData] = useState({ totalApplications: 0, completedEvaluations: 0, pendingReports: 0 });
  const [recentEvaluations, setRecentEvaluations] = useState([]);
  // notificationsData -> assignedIlanlarData olarak yeniden adlandırıldı
  const [assignedIlanlarData, setAssignedIlanlarData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [statsRes, evaluationsRes, assignmentsRes] = await Promise.all([
          api.get('/jury-stats/'),
          api.get('/juri-degerlendirmeler/?my_evaluations=true&ordering=-degerlendirme_tarihi&limit=5'),
          api.get('/juri-atamalar/?my_assignments=true')
        ]);

        setStatsData(statsRes.data);
        setRecentEvaluations(evaluationsRes.data.results || evaluationsRes.data);
        setAssignedIlanlarData(assignmentsRes.data.results || assignmentsRes.data);
      } catch (err) {
        console.error("Jüri Dashboard verileri çekilirken hata:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []); // Sadece component mount olduğunda çalışır

   // Tarih formatlama
   const formatDate = (dateString) => {
     if (!dateString) return "-";
     try {
       return new Date(dateString).toLocaleDateString("tr-TR", {
         day: '2-digit',
         month: '2-digit',
         year: 'numeric'
       });
     } catch  {
       return dateString;
     }
   };

  if (loading) {
    return (
      <>
        <JuryNavbar />
        <div className="dashboard-container">
          <p>Yükleniyor...</p>
        </div>
        <style>{css}</style>
      </>
    );
  }

  if (error) {
    return (
      <>
        <JuryNavbar />
        <div className="dashboard-container">
          <h1 className="dashboard-title">JÜRİ DASHBOARD</h1>
          <p style={{ color: 'red' }}>Hata: {error}</p>
        </div>
        <style>{css}</style>
      </>
    );
  }

  // --- Dashboard İçeriği ---
  return (
    <>
      {/* Stil etiketi */}
      <style>{css}</style>

      <JuryNavbar />
      <div className="dashboard-container">
        <h1 className="dashboard-title" >JÜRİ DASHBOARD</h1>

        {/* İstatistik Kutuları (Değişiklik yok) */}
        <div className="stats-grid">
            {/* ... stats kutuları ... */}
             <div className="stats-box stats-total-applications"><p className="stats-label">Toplam Atanan Başvuru</p><p className="stats-value">{statsData.totalApplications || 0}</p></div>
             <div className="stats-box stats-completed-evaluations"><p className="stats-label">Tamamlanan Değerlendirme</p><p className="stats-value">{statsData.completedEvaluations || 0}</p></div>
             <div className="stats-box stats-pending-reports"><p className="stats-label">Bekleyen Rapor</p><p className="stats-value">{statsData.pendingReports || 0}</p></div>
        </div>

        {/* Ana İçerik Grid'i */}
        <div className="main-grid">
          {/* Son Değerlendirmeler (Değişiklik yok, sadece veri kaynağı API) */}
          <div className="recent-candidates">
            <h2 className="section-title">Son Değerlendirmeler</h2>
            <ul className="candidates-list">
              {recentEvaluations.length > 0 ? recentEvaluations.map((evaluation) => (
                <li key={evaluation.id} className="candidate-item">
                  <span>{evaluation.basvuru?.aday?.first_name || 'Aday'} {evaluation.basvuru?.aday?.last_name || ''}</span>
                  <span className="candidate-date">{formatDate(evaluation.degerlendirme_tarihi)}</span>
                </li>
              )) : <li>Henüz değerlendirme yok.</li>}
            </ul>
          </div>

          {/* Atanmış İlanlar (Bildirimler yerine) */}
          <div className="notifications"> {/* Class adı aynı kalabilir veya değiştirebilirsiniz */}
            <h2 className="section-title">Atanmış İlanlar</h2> {/* Başlık değişti */}
            <ul className="notifications-list"> {/* Class adı aynı kalabilir */}
              {assignedIlanlarData.length > 0 ? assignedIlanlarData.map((atama) => (
                 // JuriAtama serializer'ı 'ilan' detayını nested döndürmeli
                 // Gösterilecek ilan bilgisi size kalmış (örn: başlık, bitiş tarihi)
                 <li key={atama.id} className="notification-item"> {/* Class adı aynı kalabilir */}
                    {atama.ilan ? (
                        <span>
                            <strong>{atama.ilan.baslik || 'İlan Başlığı Yok'}</strong>
                            <br />
                            <small>Bitiş: {formatDate(atama.ilan.bitis_tarihi)}</small>
                        </span>
                    ) : (
                        <span>İlan bilgisi eksik (Atama ID: {atama.id})</span>
                    )}
                 </li>
              )) : <li>Size atanmış aktif ilan bulunmuyor.</li>}
            </ul>
          </div>
        </div>
      </div>
    </>
  );
};


const css = `
  .dashboard-container {
    min-height: calc(100vh - 70px);
    padding: 2rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    max-width: 1400px;
    margin-left: auto;
    margin-right: auto;
  }

  .dashboard-title {
    font-size: 2.2rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: #2c3e50;
    text-align: left;
    padding-bottom: 0.5rem;
    border-bottom: 3px solid #009944;
    display: inline-block;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2.5rem;
  }

  .stats-box {
    padding: 1.5rem;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.07);
    background-color: #fff;
    text-align: left;
    border-left: 5px solid;
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  .stats-box:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }

  .stats-label {
    font-size: 0.95rem;
    color: #555;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .stats-value {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
    line-height: 1.2;
  }

  .stats-total-applications { border-left-color: #ffc107; }
  .stats-completed-evaluations { border-left-color: #28a745; }
  .stats-pending-reports { border-left-color: #dc3545; }

  .main-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  @media (min-width: 768px) {
    .main-grid {
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }
  }

  .recent-candidates, .notifications {
    padding: 1.5rem;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.07);
    background-color: #fff;
  }

  .section-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin-top: 0;
    margin-bottom: 1.5rem;
    color: #009944;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.75rem;
  }

  .candidates-list, .notifications-list {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 350px;
    overflow-y: auto;
  }

  .candidate-item, .notification-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0.5rem;
    border-bottom: 1px solid #f0f0f0;
    color: #444;
    font-size: 1rem;
    transition: background-color 0.15s ease;
  }

  .candidate-item:hover, .notification-item:hover {
    background-color: #f8f9fa;
  }

  .candidate-item:last-child, .notification-item:last-child {
    border-bottom: none;
  }

  .candidate-date {
    font-size: 0.9rem;
    color: #777;
    white-space: nowrap;
    margin-left: 1rem;
  }

  .notification-item {
    justify-content: flex-start;
    line-height: 1.4;
  }

  ::-webkit-scrollbar { width: 8px; }
  ::-webkit-scrollbar-thumb { background-color: #ccc; border-radius: 4px; }
  ::-webkit-scrollbar-thumb:hover { background-color: #aaa; }
  ::-webkit-scrollbar-track { background: transparent; }
`;

export default JuryDashboard;import React, { useState, useEffect } from "react";
import { FaFileAlt } from "react-icons/fa";
import JuryNavbar from "../../components/navbars/JuryNavbar.jsx";
import api from '../../services/api';
// import { useAuth } from "../../context/AuthContext"; // Gerekirse import edilebilir

const Rapor = () => {
  // State'ler
  const [assignments, setAssignments] = useState([]); // Jüri atamaları ve ilişkili veriler
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [uploadModalData, setUploadModalData] = useState(null); // Modal açık mı? Hangi atama/başvuru için? { juriAtamaId: number, basvuruId: number, candidateName: string, ilanTitle: string }
  // Modal Form State'leri
  const [reportFile, setReportFile] = useState(null);
  const [decision, setDecision] = useState("OLUMLU"); // Varsayılan karar
  const [description, setDescription] = useState("");
  const [submitting, setSubmitting] = useState(false); // Form gönderme durumu
  const [modalError, setModalError] = useState(''); // Modal içi hata mesajı
  const [modalSuccess, setModalSuccess] = useState(''); // Modal içi başarı mesajı

  // Atamaları ve ilişkili verileri çek
  useEffect(() => {
    const fetchAssignments = async () => {
      setLoading(true);
      try {
        const response = await api.get('/juri-atamalar/?my_assignments=true');
        // Gelen yanıtı array'e dönüştür
        const assignments = Array.isArray(response.data) ? response.data : 
                          response.data.results ? response.data.results : [];
        setAssignments(assignments);
      } catch (err) {
        console.error("Atamaları çekerken hata:", err);
        setError(err.message);
        setAssignments([]); // Hata durumunda boş array set et
      } finally {
        setLoading(false);
      }
    };

    fetchAssignments();
  }, []);

  // Modal açma fonksiyonu - Gerekli ID'leri state'e atar
  const openUploadModal = (atama) => {
     // Değerlendirmenin hangi başvuru için yapılacağını bilmemiz lazım.
     // Backend atama yanıtında başvuru ID'sini de döndürmeli.
     // Varsayım: API yanıtındaki her 'atama' objesi ilgili 'basvuru' ID'sini içerir.
     // Eğer atama birden fazla başvuruya yapılıyorsa (bu mantıksız olurdu), yapı değişmeli.
     // Tek bir başvuru olduğunu varsayalım: atama.basvuru.id gibi bir alandan alınabilir.
     // VEYA juri_degerlendirme endpoint'i juri_atama_id + basvuru_id ile çalışıyorsa ikisi de lazım.
     // Şimdilik JuriAtama'nın ilişkili olduğu İlan'ın BAŞVURULARINDAN sadece birini alabildiğimizi varsayalım.
     // Bu kısım backend yapınıza çok bağlı!
     // Örnek: const basvuruId = atama.ilan?.basvurular[0]?.id; // Çok kaba bir varsayım!
     // Daha sağlam yöntem: Backend atama bilgisinde ilgili başvuru ID'sini net olarak vermeli.
     // Varsayım: atama objesi içinde basvuru_id var.

     // Jüri Değerlendirme endpoint'i ne bekliyor? Muhtemelen basvuru ID'si ve juri_atama ID'si.
     const basvuruId = atama.basvuru?.id; // Bu alanın API yanıtınızda olduğundan emin olun!
     const juriAtamaId = atama.id;
     const candidateName = `${atama.basvuru?.aday?.first_name || ''} ${atama.basvuru?.aday?.last_name || ''}`.trim() || 'Bilinmiyor';
     const ilanTitle = atama.ilan?.baslik || 'Bilinmiyor';


     if (!basvuruId) {
         alert("Bu atama için ilişkili başvuru ID'si bulunamadı. Backend yanıtını kontrol edin.");
         return;
     }

     setUploadModalData({ juriAtamaId, basvuruId, candidateName, ilanTitle });
     setModalError('');
     setModalSuccess('');
     setReportFile(null); // Önceki seçimi temizle
     setDecision("OLUMLU"); // Varsayılana dön
     setDescription(""); // Açıklamayı temizle
  };

  const closeModal = () => {
    setUploadModalData(null);
  };

  // Modal içindeki dosya seçimini handle etme
  const handleFileSelect = (e) => {
    setReportFile(e.target.files[0] || null);
  };

  // Modal formunu gönderme (Yeni değerlendirme oluşturma - POST)
  const handleReportSubmit = async (e) => {
    e.preventDefault();
    if (!reportFile || !uploadModalData) return;

    setModalError('');
    setModalSuccess('');
    setSubmitting(true);

    const formData = new FormData();
    formData.append('juri_atama_id', uploadModalData.juriAtamaId);
    formData.append('basvuru_id', uploadModalData.basvuruId);
    formData.append('sonuc', decision);
    formData.append('aciklama', description);
    formData.append('rapor', reportFile);

    try {
      const response = await api.post('/juri-degerlendirmeler/', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setModalSuccess("Rapor başarıyla yüklendi!");
      setAssignments(prev => prev.map(assign =>
        assign.id === uploadModalData.juriAtamaId
          ? { ...assign, juri_degerlendirme: response.data }
          : assign
      ));
      setTimeout(() => closeModal(), 1500);
    } catch (err) {
      console.error("Rapor yükleme hatası:", err);
      setModalError(err.response?.data?.detail || "Rapor yüklenirken bir hata oluştu.");
    } finally {
      setSubmitting(false);
    }
  };

  // Tarih formatlama
   const formatDate = (dateString) => {
     if (!dateString) return "-";
     try {
       return new Date(dateString).toLocaleDateString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric' });
     } catch { return dateString; }
   };


  // --- Render ---
  if (loading) {
    return ( <><JuryNavbar /><div className="reports-container"><p>Yükleniyor...</p></div> <style>{css}</style></> );
  }
  if (error) {
       return ( <><JuryNavbar /><div className="reports-container"><h1 className="reports-title">Raporlar</h1><p style={{color:'red'}}>Hata: {error}</p></div><style>{css}</style></> );
   }

  return (
    <>
      {/* Stil etiketini direkt ekleyelim */}
       <style>{css}</style>
      <JuryNavbar />
      <div className="reports-container">
        <h1 className="reports-title">Rapor Yönetimi</h1> {/* Başlık değişti */}

        <div className="overflow-x-auto">
          <table className="reports-table">
            <thead>
              <tr>
                <th>Aday</th>
                <th>İlan</th>
                <th>Kadro</th>
                <th>Rapor Dosyası</th>
                <th>Değerlendirme Tarihi</th> {/* Başlık değişti */}
                <th>İşlem</th>
              </tr>
            </thead>
            <tbody>
              {assignments.length > 0 ? assignments.map((atama) => {
                 // Atama ile ilişkili verileri al (nested olduğunu varsayıyoruz)
                 const basvuru = atama.basvuru;
                 const aday = basvuru?.aday;
                 const ilan = atama.ilan;
                 const degerlendirme = atama.juri_degerlendirme; // Backend bu bilgiyi atama ile birlikte göndermeli

                 return (
                    <tr key={atama.id}>
                      <td>{`${aday?.first_name || ''} ${aday?.last_name || 'Aday Bilgisi Yok'}`}</td>
                      <td>{ilan?.baslik || 'İlan Bilgisi Yok'}</td>
                      <td>{ilan?.kadro_tipi?.tip || ilan?.kadro_tipi_ad || 'Kadro Yok'}</td>
                      <td>
                        {/* Değerlendirme varsa ve rapor URL'i varsa link göster */}
                        {degerlendirme?.rapor ? (
                          <a href={degerlendirme.rapor} target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">
                            {/* URL'den dosya adını almaya çalışabiliriz veya backend adı gönderebilir */}
                            {degerlendirme.rapor.split('/').pop() || 'Rapor'}
                          </a>
                        ) : (
                          <span className="text-red-500">Eksik</span>
                        )}
                      </td>
                      <td>{formatDate(degerlendirme?.degerlendirme_tarihi)}</td>
                      <td>
                         {/* Eğer rapor varsa görüntüle butonu (şimdilik linkle aynı işlevi görüyor) */}
                        {degerlendirme?.rapor && (
                          <a href={degerlendirme.rapor} target="_blank" rel="noopener noreferrer" className="button-primary" style={{marginRight:'5px'}}>Görüntüle</a>
                        )}
                         {/* Rapor yükle/güncelle butonu */}
                        <button
                          className="button-secondary"
                           // Modal'ı açarken gerekli ID'leri ve bilgileri ver
                          onClick={() => openUploadModal(atama)}
                        >
                          {degerlendirme?.rapor ? 'Güncelle' : 'Yükle'} {/* Buton metni duruma göre değişir */}
                        </button>
                      </td>
                    </tr>
                 )
              }) : (
                  <tr><td colSpan="6" style={{textAlign: 'center', padding: '1rem'}}>Size atanmış başvuru bulunmamaktadır.</td></tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Yükleme Modal */}
        {uploadModalData && (
          <div className="modal-overlay" onClick={closeModal}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header"> {/* Header'ı modal içine aldık */}
                 <h2>Rapor Yükle / Güncelle</h2>
                 <button className="close-btn" onClick={closeModal} aria-label="Close">&times;</button>
              </div>
               {/* Aday ve ilan bilgisini göster */}
               <p style={{marginBottom: '1rem', color: '#555'}}><strong>Aday:</strong> {uploadModalData.candidateName}<br/><strong>İlan:</strong> {uploadModalData.ilanTitle}</p>

              <form onSubmit={handleReportSubmit}>
                 {/* Modal içindeki başarı ve hata mesajları */}
                 {modalSuccess && <p style={{ color: 'green', marginBottom: '1rem' }}>{modalSuccess}</p>}
                 {modalError && <p style={{ color: 'red', marginBottom: '1rem' }}>{modalError}</p>}

                <label style={{display:'block', marginBottom:'0.5rem', fontWeight:'bold'}}>Açıklama (isteğe bağlı)</label>
                <textarea
                    className="modal-input" // Stil için class eklendi
                    rows="3"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    disabled={submitting}
                 />

                <label style={{display:'block', marginBottom:'0.5rem', fontWeight:'bold', marginTop:'1rem'}}>PDF Rapor Dosyası*</label>
                <input
                    type="file"
                    accept=".pdf"
                    className="modal-input" // Stil için class eklendi
                    onChange={handleFileSelect}
                    required // Yeni yükleme için zorunlu
                    disabled={submitting}
                />
                 {/* Seçilen dosya adı */}
                 {reportFile && <p style={{fontSize: '0.8em', marginTop: '0.25rem'}}>Seçilen: {reportFile.name}</p>}


                <label style={{display:'block', marginBottom:'0.5rem', fontWeight:'bold', marginTop:'1rem'}}>Karar*</label>
                <select
                    className="modal-input" // Stil için class eklendi
                    value={decision}
                    onChange={(e) => setDecision(e.target.value)}
                    required
                    disabled={submitting}
                 >
                  {/* Backend modelindeki choices ile eşleşmeli */}
                  <option value="OLUMLU">Olumlu</option>
                  <option value="OLUMSUZ">Olumsuz</option>
                  {/* <option value="Duzeltme">Düzeltme İstendi</option> */}
                </select>

                <div style={{display: 'flex', justifyContent: 'space-between', marginTop: '1.5rem'}}>
                  <button
                    type="button"
                    onClick={closeModal}
                    className="button-secondary"
                    disabled={submitting}
                  >
                    İptal
                  </button>
                  <button type="submit" className="button-primary" disabled={submitting || !reportFile}>
                    {submitting ? 'Yükleniyor...' : 'Yükle/Güncelle'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

// CSS stilleri (önceki yanıttan alındı, modal için küçük eklemeler/düzeltmeler yapıldı)
const css = `
    .reports-container { padding: 24px; background-color: #f4f6f9; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 1400px; margin: 0 auto; }
    .reports-title { font-size: 2rem; font-weight: bold; margin-bottom: 24px; color: #333; }
    .overflow-x-auto { overflow-x: auto; } /* Küçük ekranlarda tablo taşarsa scroll çıkar */
    .reports-table { width: 100%; border-collapse: separate; border-spacing: 0; background-color: #fff; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); }
    .reports-table th { background-color: #009944; color: #fff; text-align: left; padding: 12px 15px; font-weight: 600; }
    .reports-table td { padding: 12px 15px; color: #555; border-bottom: 1px solid #eee; vertical-align: middle; }
    .reports-table tbody tr:hover { background-color: #f8f9fa; }
    .reports-table tr:last-child td { border-bottom: none; }
    .reports-table td a { color: white; text-decoration: none; }
    .text-red-500 { color: #dc3545; font-style: italic; }
    .text-blue-600 { color: #007bff; } /* Link rengi */
    .button-primary, .button-secondary { padding: 6px 12px; border: none; border-radius: 6px; cursor: pointer; font-size: 0.85rem; transition: background-color 0.2s ease; margin-left: 5px; }
    .button-primary { background-color: #007c39; color: #fff; }
    .button-primary:hover { background-color: #005f2a; }
    .button-primary:disabled { background-color: #a3d4a3; cursor: not-allowed; }
    .button-secondary { background-color: #6c757d; color: #fff; }
    .button-secondary:hover { background-color: #5a6268; }
    .button-secondary:disabled { background-color: #adb5bd; cursor: not-allowed; }
    .mt-4 { margin-top: 1rem; } /* Basit margin */
    .modal-overlay { position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; padding: 1rem; }
    .modal-content { background-color: #fff; border-radius: 8px; padding: 2rem; width: 100%; max-width: 600px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); animation: fadeInModal 0.3s ease-out; }
    @keyframes fadeInModal { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }
    .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; padding-bottom: 0.75rem; border-bottom: 1px solid #dee2e6; }
    .modal-header h2 { font-size: 1.4rem; font-weight: 600; color: #333; margin: 0; }
    .close-btn { background: none; border: none; font-size: 1.8rem; font-weight: bold; color: #6c757d; cursor: pointer; padding: 0 0.5rem; line-height: 1; }
    .close-btn:hover { color: #343a40; }
    .modal-content form { display: flex; flex-direction: column; gap: 1rem; }
    .modal-input { width: 100%; padding: 0.6rem; border: 1px solid #ced4da; border-radius: 4px; font-size: 0.95rem; }
    .modal-input:disabled { background-color: #e9ecef; }
    label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: #495057; }
    /* Responsive Table */
    @media (max-width: 768px) {
      .reports-table thead { display: none; } /* Başlıkları gizle */
      .reports-table, .reports-table tbody, .reports-table tr, .reports-table td { display: block; width: 100%; }
      .reports-table tr { border: 1px solid #eee; border-radius: 8px; margin-bottom: 1rem; padding: 0.5rem; }
      .reports-table td { text-align: right; padding-left: 50%; position: relative; border-bottom: none; padding-top: 8px; padding-bottom: 8px; min-height: 30px; } /* Padding ayarlandı */
      .reports-table td::before {
        content: attr(data-label); /* data-label attribute'u eklenecek */
        position: absolute;
        left: 10px;
        width: calc(50% - 20px); /* Genişliği ayarla */
        padding-right: 10px;
        font-weight: 600;
        text-align: left;
        color: #009944;
      }
       .reports-table td:last-child { text-align: center; padding-left: 0; } /* İşlem butonu ortalansın */
       .reports-table td:last-child::before { display: none; } /* İşlem etiketi olmasın */
       .button-primary, .button-secondary { width: auto; display: inline-block; margin-top: 5px;} /* Butonlar yan yana */
    }
`;

export default Rapor;import React, { useState, useEffect } from "react"; // useEffect ve useState import edildi
import { useParams } from "react-router-dom";
import JuryNavbar from "../../components/navbars/JuryNavbar.jsx";
import { FaFileAlt } from "react-icons/fa"; // İkonu kullanacağız
import api from '../../services/api';

// Sabit veriyi kaldır
// const application = { ... };

const statusColors = {
  Beklemede: "#ffc107",
  Onaylandı: "#28a745",
  Reddedildi: "#dc3545",
  // Backend'den gelebilecek diğer durumlar
  'Değerlendirmede': '#17a2b8', // Örnek
  Bilinmiyor: "#6c757d",
};

const UserApplication = () => {
  const { id: basvuruId } = useParams(); // URL'den başvuru ID'sini al, isim çakışmasın diye yeniden adlandır
  const [applicationData, setApplicationData] = useState(null); // API'den gelen başvuru verisi
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!basvuruId) {
       setError("Başvuru ID'si bulunamadı.");
       setLoading(false);
       return;
    }

    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await api.get(`/basvurular/${basvuruId}/`);
        console.log("API yanıtı:", response.data);
        if (!response.data) {
          throw new Error('Veri bulunamadı');
        }
        setApplicationData(response.data);
      } catch (err) {
        console.error("Başvuru detayı çekme hatası:", err);
        setError(err.message || 'Veri çekilirken bir hata oluştu');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [basvuruId]); // basvuruId değiştiğinde tekrar çalışır

  // Tarih formatlama
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    try {
      return new Date(dateString).toLocaleDateString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric' });
    } catch { return dateString; }
  };

  // --- Yükleme ve Hata Durumları ---
  if (loading) {
    return ( <><JuryNavbar /><div className="application-container"><p>Başvuru bilgileri yükleniyor...</p></div><style>{css}</style></> );
  }
  if (error) {
    return ( <><JuryNavbar /><div className="application-container"><h1 className="application-name" style={{textAlign:'center', color:'red'}}>Hata</h1><p style={{textAlign:'center', color:'red'}}>{error}</p></div><style>{css}</style></> );
  }
  if (!applicationData) {
    return ( <><JuryNavbar /><div className="application-container"><p>Başvuru verisi bulunamadı.</p></div><style>{css}</style></> );
  }

  // --- Başvuru Detayı ---
  // API yanıtındaki nested yapıya göre erişim yapıyoruz (?. ile güvenli erişim)
  const aday = applicationData.aday || {};
  const ilan = applicationData.ilan || {};
  const kadro = ilan?.kadro_tipi || {};
  const statusColor = statusColors[applicationData.durum] || statusColors.Bilinmiyor;

  // Dosyaları listelemek için (Backend yanıtında dosya URL'leri olmalı)
  const documents = [
      { name: "Özgeçmiş", url: applicationData.ozgecmis_dosyasi },
      { name: "Diploma Belgeleri", url: applicationData.diploma_belgeleri },
      { name: "Yabancı Dil Belgesi", url: applicationData.yabanci_dil_belgesi },
      // Backend modelinizde başka başvuru dosyaları varsa buraya ekleyin
      // { name: "Diğer Belge 1", url: applicationData.diger_belge_1_url },
  ].filter(doc => doc.url); // Sadece URL'i olanları filtrele


  return (
    <>
      <style>{css}</style> {/* CSS stilleri */}
      <JuryNavbar />
      <div className="application-container">
        <div className="application-card">
          {/* Durum Rozeti */}
          <span
            className="status-badge"
            style={{ backgroundColor: statusColor }}
          >
            {applicationData.durum || 'Bilinmiyor'}
          </span>

          {/* Başlık */}
          <div className="application-header">
            <h1 className="application-name">{`${aday?.first_name || ''} ${aday?.last_name || 'Aday Bilgisi Yok'}`}</h1>
            <p className="application-title">{ilan?.baslik || 'İlan Bilgisi Yok'}</p>
          </div>

          {/* Detaylar */}
          <div className="application-details">
            <div className="detail-item">
              <strong>Başvurduğu Kadro</strong>
              <span>{kadro?.tip || 'Kadro Bilgisi Yok'}</span>
            </div>
            <div className="detail-item">
              <strong>Başvuru Tarihi</strong>
              <span>{formatDate(applicationData.basvuru_tarihi)}</span>
            </div>
            {/* İhtiyaç duyulan başka detaylar API yanıtından eklenebilir */}
             <div className="detail-item">
               <strong>Birim / Bölüm</strong>
               <span>{ilan?.birim?.ad || '-'}/{ilan?.bolum?.ad || '-'}</span>
             </div>
             <div className="detail-item">
               <strong>Anabilim Dalı</strong>
               <span>{ilan?.anabilim_dali?.ad || '-'}</span>
             </div>
          </div>

          {/* Belgeler */}
          <div className="documents-section" style={{ marginTop: "24px" }}>
            <h2>Aday Tarafından Yüklenen Belgeler</h2>
            {documents.length > 0 ? (
                <ul className="documents-list">
                {documents.map((doc, index) => (
                    <li key={index}>
                    {/* İkon için FaFileAlt kullanılabilir */}
                    <FaFileAlt className="download-icon" style={{ marginRight: "8px" }}/>
                    <a
                        href={doc.url} // API'den gelen dosya URL'i
                        target="_blank" // Yeni sekmede aç
                        rel="noopener noreferrer"
                        // download // Direkt indirme için, isteğe bağlı
                    >
                        {doc.name} {/* Belge adı */}
                    </a>
                    </li>
                ))}
                </ul>
            ) : (
                <p>Aday tarafından yüklenen belge bulunmuyor veya API yanıtında URL'ler eksik.</p>
            )}
          </div>

          {/* Jüri Değerlendirme Formu/Butonu Buraya Eklenebilir */}
          {/* Örneğin Raporlar sayfasındaki modalı açan bir buton */}
          {/* Veya doğrudan burada bir değerlendirme formu */}
           <div style={{marginTop: '2rem', borderTop: '1px solid #eee', paddingTop: '1rem', textAlign:'center'}}>
                <p>Bu başvuru için değerlendirmenizi Raporlar sayfasından yükleyebilirsiniz.</p>
                {/* <button className="button-primary">Değerlendirme Yap</button> */}
           </div>

        </div>
      </div>
    </>
  );
};

// CSS Stilleri (Önceki koddan alındı, küçük eklemelerle)
const css = `
    .application-container { min-height: 100vh; padding: 24px; background-color: #f4f6f9; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
    .application-card { max-width: 900px; margin: 2rem auto; background-color: #fff; border-radius: 16px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); padding: 32px; position: relative; }
    .application-header { text-align: center; margin-bottom: 24px; padding-bottom: 16px; border-bottom: 1px solid #eee; }
    .application-name { font-size: 2rem; font-weight: bold; color: #333; margin-bottom: 0.25rem; }
    .application-title { font-size: 1.1rem; font-weight: 500; color: #555; margin-top: 0; }
    .status-badge { position: absolute; top: 16px; right: 16px; padding: 6px 14px; border-radius: 20px; font-size: 0.85rem; font-weight: 600; color: #fff; text-transform: capitalize; }
    .application-details { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 24px; margin-bottom: 24px;}
    .detail-item { background-color: #f8f9fa; padding: 12px 16px; border-radius: 8px; /* box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05); */ border: 1px solid #eee;}
    .detail-item strong { display: block; font-size: 0.85rem; color: #6c757d; margin-bottom: 4px; text-transform: uppercase; letter-spacing: 0.5px;}
    .detail-item span { font-size: 1rem; font-weight: 500; color: #343a40; }
    .documents-section h2 { font-size: 1.4rem; font-weight: 600; margin-bottom: 16px; color: #007c39; border-bottom: 2px solid #dee2e6; display: inline-block; padding-bottom: 4px; }
    .documents-list { list-style: none; padding: 0; margin: 0; }
    .documents-list li { margin-bottom: 10px; display: flex; align-items: center; gap: 8px; background-color: #f8f9fa; padding: 8px 12px; border-radius: 4px; border: 1px solid #eee;}
    .documents-list a { text-decoration: none; color: #0056b3; font-weight: 500; transition: color 0.2s ease; word-break: break-all; } /* Bağlantı rengi güncellendi */
    .documents-list a:hover { color: #003875; text-decoration: underline; }
    .download-icon { font-size: 1rem; color: #009944; /* Yeşil ikon */ flex-shrink: 0; }
    @media (max-width: 768px) { .application-details { grid-template-columns: 1fr; } .application-card { padding: 24px; } .application-name { font-size: 1.5rem; } }
    /* Buton stilleri (Rapor sayfasından alınabilir) */
    .button-primary { padding: 8px 16px; background-color: #007c39; color: #fff; border: none; border-radius: 8px; cursor: pointer; }
    .button-primary:hover { background-color: #005f2a; }
`;

export default UserApplication;import React, { useState, useEffect, useRef } from "react"; // useRef eklendi (dropdown için)
import { useNavigate } from "react-router-dom"; // Navigate gerekirse (örn: detay sayfasına gitmek için)
import ManagerNavbar from "../../components/navbars/ManagerNavbar";

// CSRF token fonksiyonu (POST/PATCH vs. gerekirse lazım olabilir ama burada sadece GET var)
// function getCookie(name) { ... }

const Basvurular = () => {
  // Kullanılmıyor ama ileride lazım olabilir
  const _navigate = useNavigate();

  // State Tanımlamaları
  const [allIlanlar, setAllIlanlar] = useState([]); // API'den gelen tüm ilanlar
  const [applicationsData, setApplicationsData] = useState([]); // Seçili ilana ait başvurular
  const [selectedAdId, setSelectedAdId] = useState(null); // Seçili ilanın ID'si
  const [_selectedAdTitle, setSelectedAdTitle] = useState(""); // Input'ta gösterilecek başlık
  const [adSearch, setAdSearch] = useState(""); // Arama input değeri
  const [modalData, setModalData] = useState(null); // Modal'da gösterilecek başvuru verisi
  const [showDropdown, setShowDropdown] = useState(false);
  const [ilanLoading, setIlanLoading] = useState(false);
  const [ilanError, setIlanError] = useState(null);
  const [basvuruLoading, setBasvuruLoading] = useState(false);
  const [basvuruError, setBasvuruError] = useState(null);
  const dropdownRef = useRef(null); // Dropdown dışına tıklamayı algılamak için

  // 1. Tüm ilanları çekme
  useEffect(() => {
    setIlanLoading(true);
    setIlanError(null);
    fetch('http://localhost:8000/api/ilanlar/', { 
      credentials: 'include',
      headers: {
        'Authorization': `Token ${localStorage.getItem('authToken')}`
      }
    })
      .then(res => {
        if (!res.ok) throw new Error(`İlanlar alınamadı (${res.status})`);
        return res.json();
      })
      .then(data => {
        setAllIlanlar(data.results || data);
      })
      .catch(err => {
        console.error("İlanları çekerken hata:", err);
        setIlanError(err.message);
      })
      .finally(() => setIlanLoading(false));
  }, []);

  // 2. Seçili ilan değiştiğinde başvuruları çekme
  useEffect(() => {
    if (selectedAdId === null) {
      setApplicationsData([]); // İlan seçimi kalkarsa listeyi temizle
      return; // ID yoksa istek atma
    }

    setBasvuruLoading(true);
    setBasvuruError(null);
    setApplicationsData([]); // Yeni istek öncesi listeyi temizle
    // Seçili ilana ait başvuruları çek (?ilan_id=... backend'de tanımlı olmalı)
    fetch(`http://localhost:8000/api/basvurular/?ilan_id=${selectedAdId}`, { 
      credentials: 'include',
      headers: {
        'Authorization': `Token ${localStorage.getItem('authToken')}`
      }
    })
      .then(res => {
        if (!res.ok) throw new Error(`Başvurular alınamadı (${res.status})`);
        return res.json();
      })
      .then(data => {
         console.log(`İlan ${selectedAdId} için başvurular:`, data);
        setApplicationsData(data.results || data);
      })
      .catch(err => {
        console.error(`İlan ${selectedAdId} başvuruları çekilirken hata:`, err);
        setBasvuruError(err.message);
      })
      .finally(() => setBasvuruLoading(false));

  }, [selectedAdId]); // Sadece selectedAdId değiştiğinde çalışır


  // İlan arama/filtreleme (client-side)
  const filteredIlanlar = allIlanlar.filter((ilan) =>
    ilan.baslik?.toLowerCase().includes(adSearch.toLowerCase()) // Alan adı 'baslik' varsayıldı
  );

  // Dropdown dışına tıklamayı dinleme
  useEffect(() => {
    const handleClickOutside = (event) => {
       // useRef kullanarak daha doğru kontrol
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

   // Tarih formatlama
   const formatDate = (dateString) => {
     if (!dateString) return "-";
     try {
       return new Date(dateString).toLocaleDateString("tr-TR", { day: '2-digit', month: '2-digit', year: 'numeric' });
     } catch { return dateString; }
   };

  // Belge listesini oluşturma (modal için)
  const getApplicationDocuments = (basvuru) => {
      if (!basvuru) return [];
      const docs = [];
      if (basvuru.ozgecmis_dosyasi) docs.push({ name: "Özgeçmiş", url: basvuru.ozgecmis_dosyasi });
      if (basvuru.diploma_belgeleri) docs.push({ name: "Diploma Belgeleri", url: basvuru.diploma_belgeleri });
      if (basvuru.yabanci_dil_belgesi) docs.push({ name: "Yabancı Dil Belgesi", url: basvuru.yabanci_dil_belgesi });
      // Backend modelinizdeki diğer dosya alanlarını buraya ekleyin
      // if (basvuru.diger_belge_url) docs.push({ name: "Diğer Belge", url: basvuru.diger_belge_url });
      return docs;
  };

  // PDF Butonu Aksiyonu (Örnek: Özgeçmişi açar)
  const handlePdfClick = (basvuru) => {
      if (basvuru?.ozgecmis_dosyasi) {
          window.open(basvuru.ozgecmis_dosyasi, '_blank');
      } else {
          alert("Adayın özgeçmiş dosyası bulunamadı.");
      }
       // Veya Tablo5 PDF'i varsa o açılabilir:
       // if (basvuru.tablo5?.pdf_dosyasi) window.open(basvuru.tablo5.pdf_dosyasi, '_blank');
  };


  // Stil objesi (Değişiklik yok, olduğu gibi bırakıldı)
  const styles = {
    container: { padding: 24, backgroundColor: "#f4f6f9", fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif", minHeight:'calc(100vh - 70px)' },
    box: { backgroundColor: "#fff", padding: 24, borderRadius: 12, boxShadow: "0 4px 10px rgba(0,0,0,0.07)" },
    input: { width: "100%", padding: 12, borderRadius: 8, border: "1px solid #ccc", marginBottom: 12, fontSize:'1rem' },
    // select: { width: "100%", padding: 10, borderRadius: 8, border: "1px solid #ccc", marginBottom: 24 }, // Select kaldırıldı
    table: { width: "100%", borderCollapse: "separate", borderSpacing: 0, marginTop: '1rem' },
    th: { textAlign: "left", padding: '12px 15px', backgroundColor: "#e9ecef", color: "#495057", borderBottom: '2px solid #dee2e6', fontWeight: 600 },
    td: { padding: '12px 15px', borderBottom: "1px solid #eee", verticalAlign: 'middle' },
    button: { padding: "6px 12px", borderRadius: 6, border: "none", cursor: "pointer", fontSize:'0.85rem', fontWeight: 500, transition: 'background-color 0.2s ease' },
    detay: { backgroundColor: "#17a2b8", color: "#fff" }, // Mavi tonu
    pdf: { backgroundColor: "#ffc107", color: "#212529", marginLeft: 8 }, // Sarı tonu
    info: { backgroundColor: "#fff3cd", padding: 15, borderRadius: 8, color: "#856404", border: '1px solid #ffeeba', textAlign:'center', marginTop:'1rem' },
    modalBackdrop: { position: "fixed", top: 0, left: 0, width: "100%", height: "100%", backgroundColor: "rgba(0,0,0,0.5)", display: "flex", justifyContent: "center", alignItems: "center", zIndex: 1050 },
    modal: { backgroundColor: "#fff", padding: 32, borderRadius: 12, width: 500, maxWidth: "95%", boxShadow: "0 5px 15px rgba(0,0,0,0.2)" },
    dropdownContainer: { position: "relative", width: "100%", marginBottom: "24px" },
    dropdown: { position: "absolute", top: "100%", left: 0, right: 0, backgroundColor: "#fff", border: "1px solid #ccc", borderRadius: "8px", boxShadow: "0 2px 6px rgba(0,0,0,0.1)", maxHeight: "200px", overflowY: "auto", zIndex: 1000, marginTop: '4px' },
    dropdownItem: { padding: "12px 15px", cursor: "pointer", borderBottom: '1px solid #eee' },
    // Dropdown hover stilini CSS :hover ile vermek daha iyi ama JS için basitçe
    dropdownItemHover: { backgroundColor: "#f8f9fa" },
  };


  return (
    <>
      {/* Navbar */}
      <ManagerNavbar />

      <div style={styles.container}>
        <h2 style={{ color: "#009944", marginBottom: 24, fontWeight: 600 }}>İlan İnceleme & Aday Başvuruları</h2>
        <div style={styles.box}>
          {/* İlan Arama ve Seçme */}
          <div className="dropdown-container" ref={dropdownRef} style={styles.dropdownContainer}>
             <label htmlFor="ilanSearchInput" style={{fontWeight: '500', marginBottom:'8px', display:'block'}}>İlan Seçiniz:</label>
            <input
              id="ilanSearchInput"
              style={styles.input}
              type="text"
              placeholder={ilanLoading ? "İlanlar Yükleniyor..." : "İlan Adına Göre Ara veya Seç..."}
              value={adSearch}
              onChange={(e) => {
                setAdSearch(e.target.value);
                setSelectedAdId(null); // Arama yaparken seçimi kaldır
                setShowDropdown(true); // Arama yaparken dropdown açılsın
              }}
              onFocus={() => setShowDropdown(true)} // Input'a tıklayınca dropdown açılsın
              disabled={ilanLoading}
            />
             {ilanError && <p style={{ color: 'red', fontSize: '0.9em' }}>İlanlar yüklenirken hata: {ilanError}</p>}

            {showDropdown && filteredIlanlar.length > 0 && (
              <div style={styles.dropdown}>
                {filteredIlanlar.map((ilan) => (
                  <div
                    key={ilan.id}
                    style={styles.dropdownItem}
                     // Hover efekti için basit event handler'lar
                    onMouseEnter={(e) => e.currentTarget.style.backgroundColor = styles.dropdownItemHover.backgroundColor}
                    onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    onClick={() => {
                      setSelectedAdId(ilan.id); // ID'yi state'e ata
                      setSelectedAdTitle(ilan.baslik); // Başlığı state'e ata (input'ta göstermek için)
                      setAdSearch(ilan.baslik); // Arama inputunu da güncelle
                      setShowDropdown(false); // Dropdown'ı kapat
                    }}
                  >
                    {ilan.baslik} {/* Alan adı 'baslik' varsayıldı */}
                  </div>
                ))}
              </div>
            )}
             {/* Arama sonucu bulunamazsa */}
             {showDropdown && adSearch && filteredIlanlar.length === 0 && !ilanLoading && (
                 <div style={{...styles.dropdown, padding: '10px', color:'#777'}}>Aramayla eşleşen ilan bulunamadı.</div>
             )}
          </div>

          {/* Başvuru Tablosu */}
          {selectedAdId ? ( // Sadece bir ilan seçilmişse tabloyu göster
             basvuruLoading ? (
                 <div style={styles.info}>Başvurular yükleniyor...</div>
             ) : basvuruError ? (
                 <div style={{...styles.info, backgroundColor:'#f8d7da', color:'#721c24', border:'1px solid #f5c6cb'}}>Hata: {basvuruError}</div>
             ) : applicationsData.length === 0 ? (
                 <div style={styles.info}>Seçilen ilana ait başvuru bulunmamaktadır.</div>
             ) : (
                 <div style={{ overflowX: 'auto' }}> {/* Küçük ekranlar için scroll */}
                     <table style={styles.table}>
                         <thead>
                             <tr>
                                 <th style={styles.th}>Aday Adı</th>
                                 <th style={styles.th}>Başvuru Tarihi</th>
                                 <th style={styles.th}>Durum</th>
                                 <th style={styles.th}>İşlemler</th>
                             </tr>
                         </thead>
                         <tbody>
                             {applicationsData.map((basvuru) => (
                                 <tr key={basvuru.id}>
                                     <td style={styles.td}>{`${basvuru.aday?.first_name || ''} ${basvuru.aday?.last_name || 'Aday Bilgisi Yok'}`}</td>
                                     <td style={styles.td}>{formatDate(basvuru.basvuru_tarihi)}</td>
                                     <td style={styles.td}>{basvuru.durum || '-'}</td>
                                     <td style={styles.td}>
                                         <button
                                             style={{ ...styles.button, ...styles.detay }}
                                             onClick={() => setModalData(basvuru)} // Tüm başvuru objesini modala gönder
                                         >
                                             Detay
                                         </button>
                                         {/* PDF Butonu - Örnek: Özgeçmişi açar */}
                                         <button
                                             style={{ ...styles.button, ...styles.pdf }}
                                             onClick={() => handlePdfClick(basvuru)}
                                             disabled={!basvuru.ozgecmis_dosyasi} // Örnek: Özgeçmiş yoksa pasif
                                         >
                                             PDF
                                         </button>
                                         {/* Başka işlem butonları eklenebilir (örn: Jüriye Gönder) */}
                                     </td>
                                 </tr>
                             ))}
                         </tbody>
                     </table>
                 </div>
             )
          ) : (
            // Henüz ilan seçilmemişse gösterilecek mesaj
            <div style={styles.info}>Başvuruları görmek için lütfen yukarıdan bir ilan arayın veya seçin.</div>
          )}
        </div>

        {/* Detay Modal */}
        {modalData && (
          <div style={styles.modalBackdrop} onClick={() => setModalData(null)}> {/* Dışa tıklayınca kapat */}
            <div style={styles.modal} onClick={(e) => e.stopPropagation()}> {/* Modala tıklayınca kapanmasın */}
               <h3 style={{ color: '#009944', borderBottom: '1px solid #eee', paddingBottom:'0.5rem', marginBottom: 16 }}>
                   Başvuru Detayları: {`${modalData.aday?.first_name || ''} ${modalData.aday?.last_name || ''}`}
               </h3>
               {/* Puan alanı kaldırıldı, API yanıtında yok varsayıldı */}
               {/* <p><strong>Puan:</strong> {modalData.puan}</p> */}
               <p><strong>Başvuru Tarihi:</strong> {formatDate(modalData.basvuru_tarihi)}</p>
               <p><strong>Durum:</strong> {modalData.durum}</p>
               <p style={{marginTop:'1rem'}}><strong>Yüklenen Belgeler:</strong></p>
              {(() => {
                  const documents = getApplicationDocuments(modalData);
                  return documents.length > 0 ? (
                      <ul style={{ listStyle: 'none', paddingLeft: 0, marginTop:'0.5rem' }}>
                          {documents.map((doc, i) => (
                              <li key={i} style={{marginBottom:'0.5rem'}}>
                                  <a href={doc.url} target="_blank" rel="noopener noreferrer" style={{color:'#007bff', textDecoration:'none'}}>
                                      - {doc.name}
                                  </a>
                              </li>
                          ))}
                      </ul>
                  ) : <p style={{fontStyle:'italic', color:'#6c757d'}}>Yüklü belge bulunamadı.</p>;
              })()}

              <div style={{ textAlign: "right", marginTop: 24 }}>
                <button onClick={() => setModalData(null)} style={{ ...styles.button, backgroundColor: "#6c757d", color: "#fff" }}>
                  Kapat
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default Basvurular;import React, { useState, useEffect } from "react";
import ManagerNavbar from "../../components/navbars/ManagerNavbar";

// CSRF token fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


const CriteriaPage = () => {
  // Dropdown seçenekleri için state'ler
  const [kadroTipiOptions, setKadroTipiOptions] = useState([]);
  const [temelAlanOptions, setTemelAlanOptions] = useState([]);

  // Seçili ID'ler için state'ler
  const [selectedKadroTipiId, setSelectedKadroTipiId] = useState('');
  const [selectedTemelAlanId, setSelectedTemelAlanId] = useState('');

  // Mevcut/Yeni kriter verisi için state'ler (backend modeline göre)
  const [criteriaId, setCriteriaId] = useState(null); // Mevcut kriterin ID'si (varsa)
  const [minToplamPuan, setMinToplamPuan] = useState(0);
  const [minMakaleSayisi, setMinMakaleSayisi] = useState(0);
  const [minBaslicaYazar, setMinBaslicaYazar] = useState(0);
  const [minA1A2Makale, setMinA1A2Makale] = useState(0);
  const [minA1A4Makale, setMinA1A4Makale] = useState(0);
  const [minA1A5Makale, setMinA1A5Makale] = useState(0);
  const [minA1A6Makale, setMinA1A6Makale] = useState(0);
  const [minA1A8Makale, setMinA1A8Makale] = useState(0);
  const [minKisiselEtkinlik, setMinKisiselEtkinlik] = useState(0);
  const [minKarmaEtkinlik, setMinKarmaEtkinlik] = useState(0);
  const [minTezDanismanligi, setMinTezDanismanligi] = useState(0);
  // Diğer min_... alanları için de state ekleyebilirsiniz.

  // Durum state'leri
  const [loadingOptions, setLoadingOptions] = useState(true);
  const [loadingCriteria, setLoadingCriteria] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  // 1. Dropdown seçeneklerini çekme
  useEffect(() => {
    setLoadingOptions(true);
    Promise.all([
      fetch('http://localhost:8000/api/kadro-tipi/', { credentials: 'include' }).then(res => res.ok ? res.json() : Promise.reject('Kadro tipleri alınamadı')),
      fetch('http://localhost:8000/api/temel-alan/', { credentials: 'include' }).then(res => res.ok ? res.json() : Promise.reject('Temel alanlar alınamadı'))
    ])
    .then(([kadroTipleri, temelAlanlar]) => {
      setKadroTipiOptions(kadroTipleri.results || kadroTipleri);
      setTemelAlanOptions(temelAlanlar.results || temelAlanlar);
      // Varsayılan seçimleri ayarla (isteğe bağlı)
      // if (kadroTipleri.length > 0) setSelectedKadroTipiId(kadroTipleri[0].id);
      // if (temelAlanlar.length > 0) setSelectedTemelAlanId(temelAlanlar[0].id);
    })
    .catch(err => {
      console.error("Dropdown seçenekleri çekilirken hata:", err);
      setError(typeof err === 'string' ? err : "Seçenekler yüklenirken hata oluştu.");
    })
    .finally(() => setLoadingOptions(false));
  }, []);

  // 2. Seçili Kadro & Alan değiştiğinde mevcut kriterleri çekme
  useEffect(() => {
    // Sadece her iki seçim de yapıldığında çalış
    if (selectedKadroTipiId && selectedTemelAlanId) {
      setLoadingCriteria(true);
      setError(null); // Önceki hatayı temizle
      setSuccessMessage(''); // Önceki başarı mesajını temizle
      setCriteriaId(null); // Önceki ID'yi temizle
       // Reset form fields to default/zero before fetching new criteria
      setMinToplamPuan(0);
      setMinMakaleSayisi(0);
      setMinBaslicaYazar(0);
      setMinA1A2Makale(0);
      setMinA1A4Makale(0);
      setMinA1A5Makale(0);
      setMinA1A6Makale(0);
      setMinA1A8Makale(0);
      setMinKisiselEtkinlik(0);
      setMinKarmaEtkinlik(0);
      setMinTezDanismanligi(0);

      // Backend'in bu filtreleri desteklediğinden emin olun
      fetch(`http://localhost:8000/api/atama-kriterleri/?kadro_tipi_id=${selectedKadroTipiId}&temel_alan_id=${selectedTemelAlanId}`, { credentials: 'include' })
        .then(res => {
          if (!res.ok) throw new Error(`Kriterler alınamadı (${res.status})`);
          return res.json();
        })
        .then(data => {
          const results = data.results || data;
          if (results.length > 0) {
            // Kayıt bulundu, formu doldur
            const existingCriteria = results[0];
            console.log("Mevcut kriter bulundu:", existingCriteria);
            setCriteriaId(existingCriteria.id);
            setMinToplamPuan(existingCriteria.min_toplam_puan || 0);
            setMinMakaleSayisi(existingCriteria.min_makale_sayisi || 0);
            setMinBaslicaYazar(existingCriteria.min_baslica_yazar || 0);
            setMinA1A2Makale(existingCriteria.min_a1_a2_makale || 0);
            setMinA1A4Makale(existingCriteria.min_a1_a4_makale || 0);
            setMinA1A5Makale(existingCriteria.min_a1_a5_makale || 0);
            setMinA1A6Makale(existingCriteria.min_a1_a6_makale || 0);
            setMinA1A8Makale(existingCriteria.min_a1_a8_makale || 0);
            setMinKisiselEtkinlik(existingCriteria.min_kisisel_etkinlik || 0);
            setMinKarmaEtkinlik(existingCriteria.min_karma_etkinlik || 0);
            setMinTezDanismanligi(existingCriteria.min_tez_danismanligi || 0);
            // Diğer alanları da doldurun...
          } else {
            // Kayıt bulunamadı, ID'yi null yap (yeni kayıt olacak)
            console.log("Mevcut kriter bulunamadı, yeni kayıt oluşturulacak.");
            setCriteriaId(null);
            // Form zaten resetlenmişti
          }
        })
        .catch(err => {
          console.error("Kriterleri çekerken hata:", err);
          setError(err.message);
           setCriteriaId(null); // Hata durumunda da ID'yi null yap
        })
        .finally(() => setLoadingCriteria(false));
    } else {
         setCriteriaId(null); // Seçimlerden biri boşsa ID'yi temizle
         // İsteğe bağlı olarak formu da temizleyebilir/resetleyebilirsiniz.
    }
  }, [selectedKadroTipiId, selectedTemelAlanId]); // Seçimler değiştiğinde çalışır


  // Formu Kaydetme / Güncelleme
  const handleSave = async () => {
    if (!selectedKadroTipiId || !selectedTemelAlanId) {
      setError("Lütfen Kadro Türü ve Alan Türü seçin.");
      return;
    }

    setError(null);
    setSuccessMessage('');
    setSaving(true);

    const csrftoken = getCookie('csrftoken');
    if (!csrftoken) {
      setError("Güvenlik token'ı alınamadı.");
      setSaving(false);
      return;
    }

    // Backend'e gönderilecek veri (serializer alan adlarıyla eşleşmeli)
    const payload = {
      kadro_tipi: parseInt(selectedKadroTipiId, 10),
      temel_alan: parseInt(selectedTemelAlanId, 10),
      min_toplam_puan: minToplamPuan,
      min_makale_sayisi: minMakaleSayisi,
      min_baslica_yazar: minBaslicaYazar,
      min_a1_a2_makale: minA1A2Makale,
      min_a1_a4_makale: minA1A4Makale,
      min_a1_a5_makale: minA1A5Makale,
      min_a1_a6_makale: minA1A6Makale,
      min_a1_a8_makale: minA1A8Makale,
      min_kisisel_etkinlik: minKisiselEtkinlik,
      min_karma_etkinlik: minKarmaEtkinlik,
      min_tez_danismanligi: minTezDanismanligi,
      // Diğer min_... alanları
    };

    // Mevcut kriter varsa PATCH, yoksa POST
    const method = criteriaId ? 'PATCH' : 'POST';
    const url = criteriaId
      ? `http://localhost:8000/api/atama-kriterleri/${criteriaId}/`
      : 'http://localhost:8000/api/atama-kriterleri/';

    console.log(`Kaydetme isteği: ${method} ${url}`, payload);

    try {
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': csrftoken
        },
        credentials: 'include',
        body: JSON.stringify(payload)
      });

      const responseData = await response.json();

      if (response.ok) {
        setSuccessMessage(`Kriterler başarıyla ${criteriaId ? 'güncellendi' : 'kaydedildi'}!`);
        console.log("Kaydedilen/Güncellenen Kriter:", responseData);
        // Yeni kayıt yapıldıysa ID'yi state'e alalım
        if (!criteriaId && responseData.id) {
          setCriteriaId(responseData.id);
        }
         // Başarı durumunda formu sıfırlamak yerine mevcut değerleri tutmak daha mantıklı olabilir.
      } else {
        console.error("Kaydetme/Güncelleme hatası:", responseData);
        let errorMsg = `Hata (${response.status}): Kaydedilemedi. `;
         for (const key in responseData) { errorMsg += `${key}: ${Array.isArray(responseData[key]) ? responseData[key].join(', ') : responseData[key]} `; }
        setError(errorMsg.trim());
      }
    } catch (err) {
      console.error("Kaydetme/Güncelleme isteği sırasında hata:", err);
      setError("Kriterler kaydedilirken bir ağ hatası oluştu.");
    } finally {
      setSaving(false);
    }
  };

   // --- Stil Objeleri --- (Önceki koddan alındı)
   const styles = { /* ... önceki tüm stil tanımlarınız ... */ };


  // --- Render ---
  return (
    <>
      <ManagerNavbar />
      <div style={styles.container}>
        <h1 style={styles.title}>Kadro Atama Kriterleri Yönetimi</h1>

        <div style={styles.card}>
           {/* Hata veya Başarı Mesajları */}
           {successMessage && <div style={{ color: 'green', marginBottom: '1rem', textAlign: 'center', border:'1px solid green', padding:'0.5rem', borderRadius:'8px' }}>{successMessage}</div>}
           {error && !successMessage && <div style={{ color: 'red', marginBottom: '1rem', textAlign: 'center', border:'1px solid red', padding:'0.5rem', borderRadius:'8px' }}>{error}</div>}


          {/* Seçim Alanları */}
          <div style={styles.gridColumns}>
            <div>
              <label style={styles.label} htmlFor="kadroTipiSelect">Kadro Türü</label>
              <select
                id="kadroTipiSelect"
                value={selectedKadroTipiId || ''}
                onChange={(e) => setSelectedKadroTipiId(e.target.value)}
                style={styles.select}
                disabled={loadingOptions || loadingCriteria || saving}
              >
                 <option value="" disabled>-- Seçiniz --</option>
                 {kadroTipiOptions.map(option => (
                     <option key={option.id} value={option.id}>{option.tip}</option> // Alan adı 'tip' varsayıldı
                 ))}
              </select>
            </div>
            <div>
              <label style={styles.label} htmlFor="temelAlanSelect">Temel Alan</label>
              <select
                id="temelAlanSelect"
                value={selectedTemelAlanId || ''}
                onChange={(e) => setSelectedTemelAlanId(e.target.value)}
                style={styles.select}
                disabled={loadingOptions || loadingCriteria || saving}
              >
                 <option value="" disabled>-- Seçiniz --</option>
                  {temelAlanOptions.map(option => (
                     <option key={option.id} value={option.id}>{option.ad}</option> // Alan adı 'ad' varsayıldı
                 ))}
              </select>
            </div>
          </div>

          {/* Kriterler Yükleniyor Mesajı */}
          {loadingCriteria && <div style={styles.info}>Seçili kriteler yükleniyor...</div>}


          {/* Kriter Form Alanları (Seçim yapıldıktan sonra gösterilebilir) */}
          {(selectedKadroTipiId && selectedTemelAlanId && !loadingCriteria) && (
              <>
                <h2 style={{...styles.sectionTitle, marginTop:'2rem'}}>Minimum Kriterler</h2>
                 {/* Burası backend modelindeki tüm min_* alanları için genişletilmeli */}
                 <div style={{...styles.gridColumns, gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))'}}> {/* Daha fazla alan için grid */}
                    <div>
                         <label style={styles.label}>Toplam Puan</label>
                         <input type="number" style={styles.input} value={minToplamPuan} onChange={(e) => setMinToplamPuan(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>Makale Sayısı</label>
                         <input type="number" style={styles.input} value={minMakaleSayisi} onChange={(e) => setMinMakaleSayisi(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>Başlıca Yazar</label>
                         <input type="number" style={styles.input} value={minBaslicaYazar} onChange={(e) => setMinBaslicaYazar(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>A1-A2 Makale</label>
                         <input type="number" style={styles.input} value={minA1A2Makale} onChange={(e) => setMinA1A2Makale(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>A1-A4 Makale</label>
                         <input type="number" style={styles.input} value={minA1A4Makale} onChange={(e) => setMinA1A4Makale(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>A1-A5 Makale</label>
                         <input type="number" style={styles.input} value={minA1A5Makale} onChange={(e) => setMinA1A5Makale(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>A1-A6 Makale</label>
                         <input type="number" style={styles.input} value={minA1A6Makale} onChange={(e) => setMinA1A6Makale(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>A1-A8 Makale</label>
                         <input type="number" style={styles.input} value={minA1A8Makale} onChange={(e) => setMinA1A8Makale(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>Kişisel Etkinlik</label>
                         <input type="number" style={styles.input} value={minKisiselEtkinlik} onChange={(e) => setMinKisiselEtkinlik(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>Karma Etkinlik</label>
                         <input type="number" style={styles.input} value={minKarmaEtkinlik} onChange={(e) => setMinKarmaEtkinlik(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                     <div>
                         <label style={styles.label}>Tez Danışmanlığı</label>
                         <input type="number" style={styles.input} value={minTezDanismanligi} onChange={(e) => setMinTezDanismanligi(Number(e.target.value) || 0)} disabled={saving}/>
                    </div>
                    {/* Diğer min_* alanları için inputları buraya ekleyin */}
                </div>

                {/* Kaydet Butonu */}
                <div style={{ textAlign: "right", marginTop:'2rem' }}>
                  <button onClick={handleSave} style={styles.saveButton} disabled={saving}>
                    {saving ? 'Kaydediliyor...' : (criteriaId ? 'Kriterleri Güncelle' : 'Yeni Kriter Kaydet')}
                  </button>
                </div>
              </>
          )}

           {/* Dinamik yayın kategorileri bölümü kaldırıldı */}
           {/* Önizleme bölümü kaldırıldı */}

        </div>
      </div>
    </>
  );
};

export default CriteriaPage;// src/pages/manager/Dashboard.jsx

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import ManagerNavbar from "../../components/navbars/ManagerNavbar";
import { getCookie } from "../../utils/Cookies";

const quickLinks = [
  { label: "Jüri Atama",        href: "/manager-juri-atama" },
  { label: "Başvuruları İncele", href: "/manager-basvurular" },
  { label: "Yeni İlan Oluştur",  href: "/manager-ilan" },
];

const alertColors = {
  danger: "#f8d7da"
};

const alertTextColors = {
  danger: "#721c24",
  warning: "#856404"
};

const ManagerDashboard = () => {
  const [dashboardData, setDashboardData] = useState({
    stats: {},
    upcomingDeadlines: [],
    alerts: []
  });
  const [loading, setLoading] = useState(true);
  const [error,   setError]   = useState(null);

  useEffect(() => {
    const fetchDashboard = async () => {
      try {
        setLoading(true);
        setError(null);

        // 1) CSRF cookie'sini set eden endpoint'i çağır
        await fetch("http://localhost:8000/api/set-csrf/", {
          credentials: "include"
        });

        // 2) Tarayıcıdaki cookie'den CSRF token'ı al
        const csrftoken = getCookie("csrftoken");
        
        // 3) Auth token'ı al
        const authToken = localStorage.getItem('authToken');

        // 4) Manager-stats isteğini CSRF ve Auth header'ları ile yap
        const res = await fetch("http://localhost:8000/api/manager-stats/", {
          method: "GET",
          credentials: "include",
          headers: {
            "Accept": "application/json",
            "X-CSRFToken": csrftoken,
            "Authorization": `Token ${authToken}`
          },
        });

        if (!res.ok) throw new Error(`Veri alınamadı (${res.status})`);
        const data = await res.json();

        setDashboardData({
          stats: data.stats || {},
          upcomingDeadlines: data.upcomingDeadlines || [],
          alerts: data.alerts || []
        });
      } catch (err) {
        console.error("Dashboard hatası:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboard();
  }, []);

  const formatDate = (d) =>
    d
      ? new Date(d).toLocaleDateString("tr-TR", {
          day: "2-digit",
          month: "short",
          year: "numeric",
        })
      : "-";

  if (loading) {
    return (
      <>
        <ManagerNavbar />
        <div style={styles.container}>
          <p>Yönetici paneli yükleniyor…</p>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <ManagerNavbar />
        <div style={styles.container}>
          <h1 style={styles.title}>Yönetici Paneli - Dashboard</h1>
          <p style={styles.error}>Hata: {error}</p>
        </div>
      </>
    );
  }

  return (
    <>
      <style>{css}</style>
      <ManagerNavbar />
      <div className="dashboard-container">
        <h1 className="dashboard-title">Yönetici Paneli - Dashboard</h1>

        {/* İstatistik Kartları */}
        <div className="stats-grid">
        <div className="stat-card">
            <p>Toplam Aktif İlan</p>
            <p className="stat-value" style={{ color: "#009944" }}>
              {dashboardData.stats.activePostings ?? "-"}
            </p>
          </div>
          <div className="stat-card">
            <p>Bugün Başvuru Alınan</p>
            <p className="stat-value" style={{ color: "#28a745" }}>
              {dashboardData.stats.todayApplications ?? "-"}
            </p>
          </div>
          <div className="stat-card">
            <p>Tamamlanan Değerlendirme</p>
            <p className="stat-value" style={{ color: "#17a2b8" }}>
              {dashboardData.stats.completedEvaluations ?? "-"}
            </p>
          </div>
          <div className="stat-card">
            <p>Eksik Rapor</p>
            <p className="stat-value" style={{ color: "#dc3545" }}>
              {dashboardData.stats.missingReports ?? "-"}
            </p>
          </div>
        </div>

        {/* Yaklaşan Bitişler */}
        <div className="deadlines-section">
          <h2 className="deadlines-title">Yaklaşan Başvuru Bitişleri</h2>
          {dashboardData.upcomingDeadlines.length > 0 ? (
            <ul>
              {dashboardData.upcomingDeadlines.map((item) => (
                <li key={item.id} className="deadline-item">
                  <span>{item.baslik}</span>
                  <span>Bitiş: {formatDate(item.bitis_tarihi)}</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="empty">Yaklaşan bitişli ilan yok.</p>
          )}
        </div>

        {/* Uyarılar */}
        <div className="alerts-section">
          {dashboardData.alerts.length > 0 ? (
            dashboardData.alerts.map((alert) => (
              <div
                key={alert.id}
                className="alert"
                style={{
                  backgroundColor: alertColors[alert.type] || "#e9ecef",
                  color: alertTextColors[alert.type] || "#343a40",
                }}
              >
                ⚠️ {alert.text}
              </div>
            ))
          ) : (
            <p className="empty">Gösterilecek uyarı yok.</p>
          )}
        </div>

        {/* Hızlı Erişim */}
        <div>
          <h2 className="quick-links-title">Hızlı Erişim</h2>
          <div className="quick-links">
            {quickLinks.map((link, i) => (
              <Link key={i} to={link.href} className="quick-link">
                {link.label}
              </Link>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

const css = `
  .dashboard-container { padding: 24px; background-color: #f4f6f9; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; min-height: calc(100vh - 70px); max-width: 1400px; margin: 0 auto; }
  .dashboard-title { font-size: 2rem; font-weight: 600; margin-bottom: 24px; color: #343a40; }
  .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1.5rem; margin-bottom: 2.5rem; }
  .stat-card { padding: 1.25rem; background-color: #fff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.06); border-left: 5px solid; transition: transform 0.2s ease, box-shadow 0.2s ease; }
  .stat-card:nth-child(1) { border-left-color: #009944; }
  .stat-card:nth-child(2) { border-left-color: #28a745; }
  .stat-card:nth-child(3) { border-left-color: #17a2b8; }
  .stat-card:nth-child(4) { border-left-color: #dc3545; }
  .stat-card p { margin: 0; color: #495057; font-size: 0.95rem; margin-bottom: 0.5rem; }
  .stat-card .stat-value { font-size: 2rem; font-weight: 700; margin-top: 0.25rem; line-height: 1.2; }

  .deadlines-section { background-color: #fff; border-radius: 8px; padding: 1.5rem; box-shadow: 0 4px 8px rgba(0,0,0,0.06); margin-bottom: 2rem; }
  .deadlines-title, .quick-links-title { font-size: 1.3rem; font-weight: 600; margin-bottom: 1rem; color: #007c39; padding-bottom: 0.5rem; border-bottom: 1px solid #eee; }
  .deadlines-section ul { list-style: none; padding: 0; margin: 0; }
  .deadline-item { display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px dashed #eee; font-size: 0.95rem; color: #343a40; }
  .deadline-item:last-child { border-bottom: none; }
  .deadline-item span:last-child { font-weight: 500; color: #5a6268; }

  .alerts-section { margin-bottom: 2rem; }
  .alert { padding: 1rem; border-radius: 8px; margin-bottom: 0.75rem; font-weight: 500; border: 1px solid; }

  .quick-links { display: flex; flex-wrap: wrap; gap: 1rem; }
  .quick-link { padding: 0.8rem 1.2rem; background-color: #009944; color: #fff; border-radius: 6px; text-decoration: none; font-weight: 500; box-shadow: 0 2px 5px rgba(0,0,0,0.1); transition: background-color 0.2s ease, transform 0.2s ease; display: inline-block; }
  .quick-link:hover { background-color: #007c39; transform: translateY(-2px); }

  .empty { color: #6c757d; font-style: italic; text-align: center; }

  @media (max-width: 640px) {
    .stats-grid { grid-template-columns: 1fr; }
    .dashboard-title { font-size: 1.8rem; }
  }
`;

const styles = {
  container: {
    padding: 24,
    backgroundColor: "#f4f6f9",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    minHeight: "calc(100vh - 70px)"
  },
  title: {
    fontSize: "2rem",
    fontWeight: 600,
    marginBottom: 24,
    color: "#343a40"
  },
  error: {
    color: "red",
    textAlign: "center",
    border: "1px solid red",
    padding: "1rem",
    borderRadius: 8
  }
};

export default ManagerDashboard;
// src/pages/manager/Ilan.jsx

import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import ManagerNavbar from "../../components/navbars/ManagerNavbar"; // Navbar import edildi (varsayılıyor)
import { FaCog } from 'react-icons/fa'; // Kriterler için cog ikonu (varsayılıyor)

const Ilan = () => {
    const [ilanlar, setIlanlar] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");

    const navigate = useNavigate();

    useEffect(() => {
        fetchIlanlar();
    }, []);

    const fetchIlanlar = () => {
        setLoading(true);
        setError(null);
        fetch('http://localhost:8000/api/ilanlar/', { credentials: 'include' })
            .then(res => {
                if (!res.ok) {
                    throw new Error(`İlanlar alınamadı (${res.status})`);
                }
                return res.json();
            })
            .then(data => {
                setIlanlar(data.results || data);
                setError(null);
            })
            .catch(err => {
                setError(err.message);
                setIlanlar([]);
            })
            .finally(() => setLoading(false));
    };

    const handleSearch = (e) => {
        setSearchTerm(e.target.value);
    };

    const filteredIlanlar = ilanlar.filter((ilan) => {
        if (!searchTerm) return true;
        const searchLower = searchTerm.toLowerCase();
        return (
            ilan.baslik?.toLowerCase().includes(searchLower)
        );
    });

const navigateToKriterDuzenle = (id) => {
  navigate(`/manager-ilan/${id}`);
};

    if (loading) {
        return (
            <>
               <ManagerNavbar />

            <div className="ilan-container loading">
               
                <div className="loading-message">İlanlar yükleniyor...</div>
                <style>{ilanCss}</style>
            </div>
            </>
        );
    }

    if (error) {
        return (
          <>
          <ManagerNavbar />

            <div className="ilan-container error">
                <div className="error-message">Hata: {error}</div>
                <style>{ilanCss}</style>
            </div>

            </>
        );
    }

    return (
      <>
      <ManagerNavbar />
        <div className="ilan-container">
            
            <div className="content-wrapper">
                <input
                    type="text"
                    placeholder="Başlık Ara..."
                    value={searchTerm}
                    onChange={handleSearch}
                    className="search-input"
                />
                <div className="table-container card">
                    <table>
                        <thead>
                            <tr>
                                <th>Başlık</th>
                                <th className="actions-column">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredIlanlar.map((ilan) => (
                                <tr key={ilan.id}>
                                    <td>{ilan.baslik}</td>
                                    <td className="actions-column">
                                        <button
                                            onClick={() => navigateToKriterDuzenle(ilan.id)}
                                            className="action-btn edit"
                                            title="Kriterleri Düzenle"
                                        >
                                            <FaCog /> Kriterleri Düzenle
                                        </button>
                                    </td>
                                </tr>
                            ))}
                            {filteredIlanlar.length === 0 && (
                                <tr>
                                    <td colSpan="2" className="no-results">
                                        Gösterilecek ilan bulunamadı.
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
            <style>{ilanCss}</style>
        </div>
        </>
        
    );
};

const ilanCss = `
.ilan-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f7f6; /* Açık yeşilimsi arka plan */
    min-height: 100vh;
    padding: 20px;
    box-sizing: border-box;
}

.content-wrapper {
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.loading-message, .error-message {
    text-align: center;
    padding: 20px;
    color: #555;
}

.error-message {
    color: #dc3545;
    background-color: #fdecea;
    border: 1px solid #fcc2c3;
    border-radius: 5px;
}

.search-input {
    width: 100%;
    padding: 10px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
    box-sizing: border-box;
}

.table-container.card {
    overflow-x: auto;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
}

th {
    background-color: #e9ecef; /* Açık gri başlık */
    font-weight: bold;
    color: #333;
}

tbody tr:hover {
    background-color: #f5f5f5;
}

.actions-column {
    white-space: nowrap;
}

.action-btn {
    background-color: #28a745; /* Yeşil buton */
    color: white;
    border: none;
    padding: 8px 12px;
    margin-right: 5px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    float: left; /* Butonları sola hizala */
}

.action-btn:hover {
    background-color: #1e7e34; /* Koyu yeşil hover */
}

.no-results {
    padding: 15px;
    text-align: center;
    color: #777;
}

/* Responsive Tasarım */
@media (max-width: 768px) {
    .content-wrapper {
        padding: 15px;
        margin: 10px auto;
    }

    table {
        font-size: 0.9rem;
    }

    th, td {
        padding: 8px 10px;
    }

    .action-btn {
        font-size: 0.8rem;
        padding: 6px 10px;
        margin-bottom: 5px;
        float: none; /* Mobil görünümde float'ı kaldır */
    }

    .actions-column {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Mobil görünümde butonları sola hizala */
    }
}
`;

export default Ilan;.ilan-form-container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-family: sans-serif;
}

.genel-kriterler {
    background-color: #f8f9fa;
    border: 1px dashed #dee2e6;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
}

.genel-kriterler h2 {
    margin-top: 0;
    color: #495057;
    font-size: 1.1em;
    border-bottom: 1px solid #ccc;
    padding-bottom: 5px;
}

.genel-kriterler ul {
    padding-left: 20px;
    font-size: 0.9em;
    color: #6c757d;
}
.genel-kriterler li {
    margin-bottom: 5px;
}


.ilan-form h2 {
    color: #007bff;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 20px;
}
.ilan-form h3 {
    color: #6c757d;
    font-size: 1.0em;
    margin-top: 25px;
    margin-bottom: 15px;
}

.form-grup {
    margin-bottom: 15px;
}

.form-grup label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 0.9em;
}

.form-grup input[type="text"],
.form-grup input[type="number"],
.form-grup input[type="date"],
.form-grup select,
.form-grup textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 14px;
}

.form-grup textarea {
    resize: vertical; /* Sadece dikeyde boyutlandırma */
}
.form-grup-checkbox {
    display: flex;
    align-items: center;
    margin-top: 10px;
    margin-bottom: 20px;
}
.form-grup-checkbox input[type="checkbox"] {
    margin-right: 10px;
}
.form-grup-checkbox label {
    margin-bottom: 0;
    font-weight: normal;
}

.submit-button {
    background-color: #28a745;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
}

.submit-button:hover {
    background-color: #218838;
}

.hata-mesaji {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 10px;
    border-radius: 5px;
    margin-top: 15px;
}

.basari-mesaji {
    color: #155724;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    padding: 10px;
    border-radius: 5px;
    margin-top: 15px;
}
hr {
    margin-top: 25px;
    margin-bottom: 25px;
    border: 0;
    border-top: 1px solid #eee;
}import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import ManagerNavbar from "../../components/navbars/ManagerNavbar";
import api from '../../services/api';

const IlanKriter = () => {
  const { id: ilanId } = useParams();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('criteria');
  const [searchTC, setSearchTC] = useState('');
  const [juriResults, setJuriResults] = useState([]);
  const [assignedJuries, setAssignedJuries] = useState([]);
  const [loadingSearch, setLoadingSearch] = useState(false);
  const [loadingAssign, setLoadingAssign] = useState(false);
  const [errorJuri, setErrorJuri] = useState(null);
  const [IlanKriter, setIlanKriter] = useState(null);
  const [loadingIlan, setLoadingIlan] = useState(true);
  const [errorIlan, setErrorIlan] = useState(null);
  const [kadroTipiOptions, setKadroTipiOptions] = useState([]);
  const [temelAlanOptions, setTemelAlanOptions] = useState([]);
  const [departmanOptions, setDepartmanOptions] = useState([]);
  const [selectedKadroTipiId, setSelectedKadroTipiId] = useState('');
  const [selectedTemelAlanId, setSelectedTemelAlanId] = useState('');
  const [criteriaId, setCriteriaId] = useState(null);
  const [minToplamPuan, setMinToplamPuan] = useState(0);
  const [minMakaleSayisi, setMinMakaleSayisi] = useState(0);
  const [minBaslicaYazar, setMinBaslicaYazar] = useState(0);
  const [minA1A2Makale, setMinA1A2Makale] = useState(0);
  const [minA1A4Makale, setMinA1A4Makale] = useState(0);
  const [minA1A5Makale, setMinA1A5Makale] = useState(0);
  const [minA1A6Makale, setMinA1A6Makale] = useState(0);
  const [minA1A8Makale, setMinA1A8Makale] = useState(0);
  const [minKisiselEtkinlik, setMinKisiselEtkinlik] = useState(0);
  const [minKarmaEtkinlik, setMinKarmaEtkinlik] = useState(0);
  const [minTezDanismanligi, setMinTezDanismanligi] = useState(0);
  const [loadingOptions, setLoadingOptions] = useState(true);
  const [loadingCriteria, setLoadingCriteria] = useState(false);
  const [saving, setSaving] = useState(false);
  const [errorCriteria, setErrorCriteria] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    setLoadingIlan(true);
    setErrorIlan(null);
    api.get(`/ilanlar/${ilanId}/`)
      .then(res => {
        setIlanKriter(res.data);
        if (res.data.kadro_tipi) setSelectedKadroTipiId(res.data.kadro_tipi.toString());
        if (res.data.temel_alan) setSelectedTemelAlanId(res.data.temel_alan.toString());
      })
      .catch(err => setErrorIlan(err.message))
      .finally(() => setLoadingIlan(false));
  }, [ilanId]);

  useEffect(() => {
    setLoadingOptions(true);
    Promise.all([
      api.get('/kadro-tipi/'),
      api.get('/temel-alan/'),
      api.get('/departmanlar/')
    ])
      .then(([kadroTipiRes, temelAlanRes, departmanRes]) => {
        setKadroTipiOptions(Array.isArray(kadroTipiRes.data.results) ? kadroTipiRes.data.results : 
                           Array.isArray(kadroTipiRes.data) ? kadroTipiRes.data : []);
        setTemelAlanOptions(Array.isArray(temelAlanRes.data.results) ? temelAlanRes.data.results : 
                           Array.isArray(temelAlanRes.data) ? temelAlanRes.data : []);
        setDepartmanOptions(Array.isArray(departmanRes.data.results) ? departmanRes.data.results : 
                           Array.isArray(departmanRes.data) ? departmanRes.data : []);
      })
      .catch(err => setErrorCriteria(err.message))
      .finally(() => setLoadingOptions(false));
  }, []);

  useEffect(() => {
    if (ilanId) {
      api.get(`/juri-atamalar/?ilan=${ilanId}`)
        .then(async (res) => {
          const ilanJurileri = res.data.filter(juri => juri.ilan === parseInt(ilanId));
          // Her bir jüri için detaylı bilgileri al
          const juriPromises = ilanJurileri.map(juri => 
            api.get(`/users/${juri.juri_uyesi}/`).then(userRes => ({
              ...juri,
              juri_uyesi: userRes.data
            }))
          );
          const detayliJuriler = await Promise.all(juriPromises);
          setAssignedJuries(detayliJuriler);
        })
        .catch(e => setErrorJuri(e.message));
    }
  }, [ilanId]);

  useEffect(() => {
    if (selectedKadroTipiId && selectedTemelAlanId) {
      setLoadingCriteria(true);
      setErrorCriteria(null);
      setSuccessMessage('');
      setCriteriaId(null);
      setMinToplamPuan(0);
      setMinMakaleSayisi(0);
      setMinBaslicaYazar(0);
      setMinA1A2Makale(0);
      setMinA1A4Makale(0);
      setMinA1A5Makale(0);
      setMinA1A6Makale(0);
      setMinA1A8Makale(0);
      setMinKisiselEtkinlik(0);
      setMinKarmaEtkinlik(0);
      setMinTezDanismanligi(0);
      api.get(`/atama-kriterleri/?kadro_tipi=${selectedKadroTipiId}&temel_alan=${selectedTemelAlanId}`)
        .then(res => {
          const data = res.data;
          if (data && data.length > 0) {
            const kriter = data[0];
            setCriteriaId(kriter.id);
            setMinToplamPuan(kriter.min_toplam_puan || 0);
            setMinMakaleSayisi(kriter.min_makale_sayisi || 0);
            setMinBaslicaYazar(kriter.min_baslica_yazar || 0);
            setMinA1A2Makale(kriter.min_a1_a2_makale || 0);
            setMinA1A4Makale(kriter.min_a1_a4_makale || 0);
            setMinA1A5Makale(kriter.min_a1_a5_makale || 0);
            setMinA1A6Makale(kriter.min_a1_a6_makale || 0);
            setMinA1A8Makale(kriter.min_a1_a8_makale || 0);
            setMinKisiselEtkinlik(kriter.min_kisisel_etkinlik || 0);
            setMinKarmaEtkinlik(kriter.min_karma_etkinlik || 0);
            setMinTezDanismanligi(kriter.min_tez_danismanligi || 0);
          } else {
            setCriteriaId(null);
          }
        })
        .catch(err => setErrorCriteria(err.message))
        .finally(() => setLoadingCriteria(false));
    } else {
      setCriteriaId(null);
    }
  }, [selectedKadroTipiId, selectedTemelAlanId]);

  const handleSaveCriteria = async () => {
    setSaving(true);
    setErrorCriteria(null);
    setSuccessMessage('');
    const criteriaData = {
      temel_alan: selectedTemelAlanId,
      kadro_tipi: selectedKadroTipiId,
      min_toplam_puan: minToplamPuan,
      min_makale_sayisi: minMakaleSayisi,
      min_baslica_yazar: minBaslicaYazar,
      min_a1a2_makale: minA1A2Makale,
      min_a1a4_makale: minA1A4Makale,
      min_a1a5_makale: minA1A5Makale,
      min_a1a6_makale: minA1A6Makale,
      min_a1a8_makale: minA1A8Makale,
      min_kisisel_etkinlik: minKisiselEtkinlik,
      min_karma_etkinlik: minKarmaEtkinlik,
      min_tez_danismanligi: minTezDanismanligi,
    };
    try {
      const resCheck = await api.get(`/atama-kriterleri/?kadro_tipi=${selectedKadroTipiId}&temel_alan=${selectedTemelAlanId}`);
      const existing = resCheck.data && resCheck.data.length > 0 ? resCheck.data[0] : null;
      if (existing && (!criteriaId || existing.id !== criteriaId)) {
        setErrorCriteria('Bu temel alan ve kadro tipi kombinasyonu için zaten bir kriter mevcut.');
        setSaving(false);
        return;
      }
      if (criteriaId) {
        await api.put(`/atama-kriterleri/${criteriaId}/`, criteriaData);
        setSuccessMessage('Kriterler başarıyla güncellendi');
      } else {
        const res = await api.post('/atama-kriterleri/', criteriaData);
        setSuccessMessage('Kriterler başarıyla kaydedildi');
        setCriteriaId(res.data.id);
      }
    } catch (error) {
      setErrorCriteria(error.response?.data?.non_field_errors?.join(' ') || error.message || 'Kriterler kaydedilirken bir hata oluştu');
    } finally {
      setSaving(false);
    }
  };

  const handleSearchJuri = async () => {
    setLoadingSearch(true);
    setErrorJuri(null);
    try {
      const res = await api.get(`/users/?TC_KIMLIK=${searchTC}`);
      setJuriResults(res.data.results || res.data);
    } catch (e) {
      setErrorJuri(e.message);
    } finally {
      setLoadingSearch(false);
    }
  };

  const handleAssignJuri = async (userId) => {
    setLoadingAssign(true);
    setErrorJuri(null);
    try {
      await api.post('/juri-atamalar/', { ilan: Number(ilanId), juri_uyesi: userId });
      const updated = await api.get(`/juri-atamalar/?ilan=${ilanId}`);
      const ilanJurileri = updated.data.filter(juri => juri.ilan === parseInt(ilanId));
      // Her bir jüri için detaylı bilgileri al
      const juriPromises = ilanJurileri.map(juri => 
        api.get(`/users/${juri.juri_uyesi}/`).then(userRes => ({
          ...juri,
          juri_uyesi: userRes.data
        }))
      );
      const detayliJuriler = await Promise.all(juriPromises);
      setAssignedJuries(detayliJuriler);
    } catch (e) {
      setErrorJuri(e.message);
    } finally {
      setLoadingAssign(false);
    }
  };

  const handleRemoveJuri = async (atamaId) => {
    setLoadingAssign(true);
    setErrorJuri(null);
    try {
      await api.delete(`/juri-atamalar/${atamaId}/`);
      const updated = await api.get(`/juri-atamalar/?ilan=${ilanId}`);
      const ilanJurileri = updated.data.filter(juri => juri.ilan === parseInt(ilanId));
      // Her bir jüri için detaylı bilgileri al
      const juriPromises = ilanJurileri.map(juri => 
        api.get(`/users/${juri.juri_uyesi}/`).then(userRes => ({
          ...juri,
          juri_uyesi: userRes.data
        }))
      );
      const detayliJuriler = await Promise.all(juriPromises);
      setAssignedJuries(detayliJuriler);
    } catch (e) {
      setErrorJuri(e.message);
    } finally {
      setLoadingAssign(false);
    }
  };

  const handleGoBack = () => {
    navigate('/manager-ilan');
  };

  if (loadingIlan) {
    return (
      <>
        <ManagerNavbar />
        <div className="container">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Yükleniyor...</p>
          </div>
        </div>
        <style>{componentStyles}</style>
      </>
    );
  }

  if (errorIlan) {
    return (
      <>
        <ManagerNavbar />
        <div className="container">
          <div className="error-container">
            <p className="error-message">Hata: {errorIlan}</p>
            <button className="back-button" onClick={handleGoBack}>İlan Listesine Dön</button>
          </div>
        </div>
        <style>{componentStyles}</style>
      </>
    );
  }

  if (!IlanKriter) {
    return (
      <>
        <ManagerNavbar />
        <div className="container">
          <div className="error-container">
            <p className="error-message">İlan bulunamadı.</p>
            <button className="back-button" onClick={handleGoBack}>İlan Listesine Dön</button>
          </div>
        </div>
        <style>{componentStyles}</style>
      </>
    );
  }

  return (
    <>
      <ManagerNavbar />
      <div className="container">
        <h1 className="page-title">İlan Detayları ve Kriter Yönetimi</h1>

        <div className="selected-announcement-panel">
          <h2>{IlanKriter?.baslik}</h2>
          <div className="announcement-details">
            <p><strong>Departman:</strong> {Array.isArray(departmanOptions) && departmanOptions.find(d => d.id === parseInt(IlanKriter?.departman))?.ad || 'Belirtilmemiş'}</p>
            <p><strong>Kadro Tipi:</strong> {Array.isArray(kadroTipiOptions) && kadroTipiOptions.find(k => k.id === parseInt(IlanKriter?.kadro_tipi))?.tip || 'Belirtilmemiş'}</p>
            <p><strong>Temel Alan:</strong> {Array.isArray(temelAlanOptions) && temelAlanOptions.find(t => t.id === parseInt(IlanKriter?.temel_alan))?.ad || 'Belirtilmemiş'}</p>
            <p><strong>Başlangıç:</strong> {IlanKriter?.baslangic_tarihi || 'Belirtilmemiş'}</p>
            <p><strong>Bitiş:</strong> {IlanKriter?.bitis_tarihi || 'Belirtilmemiş'}</p>
            <p><strong>Açıklama:</strong> {IlanKriter?.aciklama || 'Yok'}</p>
          </div>
          <button className="back-button top-back-button" onClick={handleGoBack}>
            İlan Listesine Dön
          </button>
        </div>

        <div className="tab-navigation">
          <button 
            className={`tab-button ${activeTab === 'criteria' ? 'active' : ''}`}
            onClick={() => setActiveTab('criteria')}
          >
            İlan Kriter Düzenlemesi
          </button>
          <button 
            className={`tab-button ${activeTab === 'jury' ? 'active' : ''}`}
            onClick={() => setActiveTab('jury')}
          >
            Jüri Atama
          </button>
        </div>

        {successMessage &&
          <div className="success-message">{successMessage}</div>
        }
        {errorCriteria && !successMessage &&
          <div className="error-message">{errorCriteria}</div>
        }

        {activeTab === 'criteria' && (
          <div className="card">
            <h2 className="section-title">İlan Kriterleri</h2>
            {loadingOptions ? (
              <div className="loading-message">Seçenekler yükleniyor...</div>
            ) : (
              <div className="criteria-selection">
                <div className="form-group">
                  <label htmlFor="kadroTipiSelect">Kadro Türü</label>
                  <select
                    id="kadroTipiSelect"
                    className="select-input"
                    value={selectedKadroTipiId || ''}
                    onChange={(e) => setSelectedKadroTipiId(e.target.value)}
                    disabled={loadingCriteria || saving}
                  >
                    <option value="" disabled>-- Seçiniz --</option>
                    {kadroTipiOptions.map(option => (
                      <option key={option.id} value={option.id}>{option.tip}</option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label htmlFor="temelAlanSelect">Temel Alan</label>
                  <select
                    id="temelAlanSelect"
                    className="select-input"
                    value={selectedTemelAlanId || ''}
                    onChange={(e) => setSelectedTemelAlanId(e.target.value)}
                    disabled={loadingCriteria || saving}
                  >
                    <option value="" disabled>-- Seçiniz --</option>
                    {temelAlanOptions.map(option => (
                      <option key={option.id} value={option.id}>{option.ad}</option>
                    ))}
                  </select>
                </div>
              </div>
            )}

            {loadingCriteria && (
              <div className="loading-message">Kriterler yükleniyor...</div>
            )}

            {!loadingCriteria && selectedKadroTipiId && selectedTemelAlanId && (
              <>
                <h3 className="subsection-title">Minimum Kriterler</h3>
                <div className="criteria-grid">
                  <div className="form-group">
                    <label>Toplam Puan</label>
                    <input type="number" className="number-input" value={minToplamPuan} onChange={(e) => setMinToplamPuan(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>Makale Sayısı</label>
                    <input type="number" className="number-input" value={minMakaleSayisi} onChange={(e) => setMinMakaleSayisi(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>Başlıca Yazar</label>
                    <input type="number" className="number-input" value={minBaslicaYazar} onChange={(e) => setMinBaslicaYazar(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>A1-A2 Makale</label>
                    <input type="number" className="number-input" value={minA1A2Makale} onChange={(e) => setMinA1A2Makale(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>A1-A4 Makale</label>
                    <input type="number" className="number-input" value={minA1A4Makale} onChange={(e) => setMinA1A4Makale(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>A1-A5 Makale</label>
                    <input type="number" className="number-input" value={minA1A5Makale} onChange={(e) => setMinA1A5Makale(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>A1-A6 Makale</label>
                    <input type="number" className="number-input" value={minA1A6Makale} onChange={(e) => setMinA1A6Makale(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>A1-A8 Makale</label>
                    <input type="number" className="number-input" value={minA1A8Makale} onChange={(e) => setMinA1A8Makale(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>Kişisel Etkinlik</label>
                    <input type="number" className="number-input" value={minKisiselEtkinlik} onChange={(e) => setMinKisiselEtkinlik(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>Karma Etkinlik</label>
                    <input type="number" className="number-input" value={minKarmaEtkinlik} onChange={(e) => setMinKarmaEtkinlik(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                  <div className="form-group">
                    <label>Tez Danışmanlığı</label>
                    <input type="number" className="number-input" value={minTezDanismanligi} onChange={(e) => setMinTezDanismanligi(Number(e.target.value) || 0)} disabled={saving}/>
                  </div>
                </div>

                <div className="form-actions">
                  <button
                    className="primary-button"
                    onClick={handleSaveCriteria}
                    disabled={saving || loadingCriteria}
                  >
                    {saving ? 'Kaydediliyor...' : (criteriaId ? 'Kriterleri Güncelle' : 'Kriterleri Kaydet')}
                  </button>
                </div>
              </>
            )}

            {!loadingCriteria && (!selectedKadroTipiId || !selectedTemelAlanId) && (
                 <p className="info-message">Kriterleri görmek veya düzenlemek için lütfen Kadro Türü ve Temel Alan seçin.</p>
             )}
          </div>
        )}

        {activeTab === 'jury' && (
          <div className="card jury-card">
            <h2 className="section-title">Jüri Atama</h2>
            <div className="jury-section">
              <div className="jury-search-bar">
                <input
                  type="text"
                  placeholder="TC Kimlik No ile jüri ara..."
                  value={searchTC}
                  onChange={e => setSearchTC(e.target.value)}
                  className="jury-search-input"
                  disabled={loadingSearch || loadingAssign}
                />
                <button
                  onClick={handleSearchJuri}
                  disabled={!searchTC || loadingSearch || loadingAssign}
                  className="jury-search-btn"
                >
                  {loadingSearch ? <span className="spinner"></span> : "Ara"}
                </button>
              </div>

              {errorJuri && <div className="jury-error">{errorJuri}</div>}
              
              {juriResults.length > 0 && (
                <div className="jury-results">
                  {juriResults.map(user => (
                    <div key={user.id} className="jury-card-result">
                      <div className="jury-info">
                        <div className="jury-name">{user.first_name} {user.last_name}</div>
                        <div className="jury-tc">TC: {user.TC_KIMLIK}</div>
                      </div>
                      <button
                        onClick={() => handleAssignJuri(user.id)}
                        disabled={loadingAssign || assignedJuries.some(j => j.juri_uyesi?.id === user.id)}
                        className="jury-assign-btn"
                      >
                        {assignedJuries.some(j => j.juri_uyesi?.id === user.id) ? 'Atanmış' : 'Ata'}
                      </button>
                    </div>
                  ))}
                </div>
              )}

              <h3 className="assigned-title">Atanan Jüri Üyeleri</h3>
              <div className="jury-assigned-list">
                {assignedJuries.length > 0 ? assignedJuries.map(a => (
                  <div key={a.id} className="jury-card assigned">
                    <div className="assigned-info">
                      <div className="jury-name">{a.juri_uyesi?.first_name} {a.juri_uyesi?.last_name}</div>
                      <div className="jury-tc">TC: {a.juri_uyesi?.TC_KIMLIK}</div>
                      <div className="assignment-date">
                        Atama Tarihi: {new Date(a.atama_tarihi).toLocaleDateString('tr-TR', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </div>
                    </div>
                    <button
                      className="jury-remove-btn"
                      onClick={() => handleRemoveJuri(a.id)}
                      disabled={loadingAssign}
                    >
                      Kaldır
                    </button>
                  </div>
                )) : <div className="no-assignments">Henüz jüri ataması yapılmamış.</div>}
              </div>
            </div>
            <style>{`
              .jury-section { 
                margin-bottom: 2rem; 
              }
              .jury-search-bar { 
                display: flex; 
                gap: 0.5rem; 
                margin-bottom: 1.5rem;
                max-width: 600px;
                margin: 0 auto 2rem auto;
              }
              .jury-search-input { 
                flex: 1; 
                padding: 0.75rem 1rem; 
                border-radius: 8px; 
                border: 1px solid #e0e0e0; 
                font-size: 1rem;
                transition: all 0.2s;
              }
              .jury-search-input:focus {
                border-color: #3498db;
                box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.1);
                outline: none;
              }
              .jury-search-btn { 
                background: #3498db; 
                color: #fff; 
                border: none; 
                border-radius: 8px; 
                padding: 0.75rem 1.25rem; 
                font-weight: 500; 
                cursor: pointer; 
                transition: all 0.2s;
                font-size: 0.9rem;
                white-space: nowrap;
              }
              .jury-search-btn:hover:not(:disabled) { 
                background: #2980b9; 
                transform: translateY(-1px);
              }
              .jury-search-btn:disabled { 
                background: #bdc3c7; 
                cursor: not-allowed; 
              }
              .jury-error { 
                color: #dc3545; 
                background: #f8d7da; 
                padding: 0.75rem; 
                border-radius: 8px; 
                margin-bottom: 1rem;
                border: 1px solid #f5c6cb;
                text-align: center;
                max-width: 600px;
                margin: 0 auto 1rem auto;
              }
              .jury-results { 
                display: grid; 
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); 
                gap: 1rem; 
                margin-bottom: 2rem;
                max-width: 1000px;
                margin: 0 auto 2rem auto;
              }
              .jury-card-result { 
                background: #fff; 
                border-radius: 12px; 
                padding: 1.25rem; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.08); 
                display: flex; 
                align-items: center; 
                justify-content: space-between;
                border: 1px solid #e9ecef;
                transition: all 0.2s;
              }
              .jury-card-result:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.12);
              }
              .jury-info {
                display: flex;
                flex-direction: column;
                gap: 0.25rem;
              }
              .jury-name {
                font-weight: 600;
                color: #2c3e50;
                font-size: 1.1rem;
              }
              .jury-tc {
                color: #7f8c8d;
                font-size: 0.9rem;
              }
              .jury-assign-btn { 
                background: #2ecc71; 
                color: #fff; 
                border: none; 
                border-radius: 6px; 
                padding: 0.5rem 1rem; 
                font-weight: 500; 
                cursor: pointer; 
                transition: all 0.2s;
                font-size: 0.9rem;
              }
              .jury-assign-btn:hover:not(:disabled) { 
                background: #27ae60; 
                transform: translateY(-1px);
              }
              .jury-assign-btn:disabled { 
                background: #bdc3c7; 
                cursor: not-allowed; 
              }
              .assigned-title {
                color: #2c3e50;
                margin: 2rem 0 1rem;
                font-size: 1.3rem;
                font-weight: 600;
                text-align: center;
              }
              .jury-assigned-list { 
                display: grid; 
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); 
                gap: 1rem;
                max-width: 1000px;
                margin: 0 auto;
              }
              .jury-card.assigned { 
                background: #fff; 
                border-radius: 12px; 
                padding: 1.25rem; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.08); 
                display: flex; 
                align-items: center; 
                justify-content: space-between;
                border: 1px solid #e9ecef;
                transition: all 0.2s;
              }
              .jury-card.assigned:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.12);
              }
              .assigned-info {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
              }
              .assignment-date {
                color: #7f8c8d;
                font-size: 0.85rem;
                font-style: italic;
              }
              .jury-remove-btn { 
                background: #e74c3c; 
                color: #fff; 
                border: none; 
                border-radius: 6px; 
                padding: 0.5rem 1rem; 
                font-weight: 500; 
                cursor: pointer; 
                transition: all 0.2s;
                font-size: 0.9rem;
              }
              .jury-remove-btn:hover:not(:disabled) { 
                background: #c0392b; 
                transform: translateY(-1px);
              }
              .jury-remove-btn:disabled { 
                background: #bdc3c7; 
                cursor: not-allowed; 
              }
              .no-assignments {
                grid-column: 1 / -1;
                text-align: center;
                padding: 2rem;
                background: #f8f9fa;
                border-radius: 8px;
                color: #6c757d;
                font-style: italic;
                border: 1px dashed #dee2e6;
              }
              @media (max-width: 768px) {
                .jury-results, .jury-assigned-list {
                  grid-template-columns: 1fr;
                }
                .jury-search-bar {
                  flex-direction: column;
                  padding: 0 1rem;
                }
                .jury-search-btn {
                  width: 100%;
                }
              }
            `}</style>
          </div>
        )}
      </div>

      <style>{`
        ${componentStyles}
        
        .tab-navigation {
          display: flex;
          gap: 1rem;
          margin-bottom: 1.5rem;
          border-bottom: 2px solid #eee;
          padding-bottom: 0.5rem;
        }

        .tab-button {
          padding: 0.75rem 1.5rem;
          border: none;
          background: none;
          color: #666;
          font-size: 1rem;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
          border-radius: 4px;
        }

        .tab-button:hover {
          background: #f0f0f0;
        }

        .tab-button.active {
          background: #3498db;
          color: white;
        }

        @media (max-width: 768px) {
          .tab-navigation {
            flex-direction: column;
            gap: 0.5rem;
          }

          .tab-button {
            width: 100%;
            text-align: center;
          }
        }

        .jury-card {
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
          padding: 2rem;
          margin-bottom: 2rem;
        }
        
        .jury-search-container {
          margin-bottom: 2rem;
        }
        
        .search-box {
          display: flex;
          gap: 0.75rem;
          margin-bottom: 1rem;
        }
        
        .search-input {
          flex: 1;
          padding: 0.875rem 1.25rem;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 1rem;
          transition: all 0.2s;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .search-input:focus {
          border-color: #3498db;
          box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
          outline: none;
        }
        
        .search-button {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
          padding: 0.875rem 1.5rem;
          background: #3498db;
          color: white;
          border: none;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
          min-width: 120px;
        }
        
        .search-button:hover:not(:disabled) {
          background: #2980b9;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .search-button:disabled {
          background: #bdc3c7;
          cursor: not-allowed;
        }
        
        .search-icon {
          font-size: 1.1rem;
        }
        
        .loading-spinner {
          display: inline-block;
          width: 16px;
          height: 16px;
          border: 2px solid rgba(255, 255, 255, 0.3);
          border-radius: 50%;
          border-top-color: white;
          animation: spin 1s ease-in-out infinite;
        }
        
        .loading-spinner.small {
          width: 12px;
          height: 12px;
          border-width: 1.5px;
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        .search-results {
          margin-bottom: 2rem;
        }
        
        .results-list {
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }
        
        .result-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 1rem 1.25rem;
          background: #f8f9fa;
          border-radius: 8px;
          border: 1px solid #e9ecef;
          transition: all 0.2s;
        }
        
        .result-item:hover {
          background: #f1f3f5;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }
        
        .user-info {
          display: flex;
          flex-direction: column;
          gap: 0.25rem;
        }
        
        .user-name {
          font-weight: 500;
          color: #333;
        }
        
        .user-tc {
          font-size: 0.85rem;
          color: #666;
        }
        
        .assign-button {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
          padding: 0.6rem 1.25rem;
          background: #2ecc71;
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
        }
        
        .assign-button:hover:not(:disabled) {
          background: #27ae60;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .assign-button:disabled {
          background: #bdc3c7;
          cursor: not-allowed;
        }
        
        .assign-icon {
          font-size: 1rem;
        }
        
        .assigned-juries {
          margin-top: 2rem;
        }
        
        .assigned-list {
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }
        
        .assigned-item {
          padding: 1rem 1.25rem;
          background: #f8f9fa;
          border-radius: 8px;
          border: 1px solid #e9ecef;
          transition: all 0.2s;
        }
        
        .assigned-item:hover {
          background: #f1f3f5;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }
        
        .assigned-info {
          display: flex;
          flex-direction: column;
          gap: 0.25rem;
        }
        
        .assigned-id {
          font-weight: 500;
          color: #333;
        }
        
        .assigned-date {
          font-size: 0.85rem;
          color: #666;
        }
        
        .no-assignments {
          padding: 2rem;
          text-align: center;
          background: #f8f9fa;
          border-radius: 8px;
          border: 1px dashed #dee2e6;
          color: #6c757d;
          font-style: italic;
        }
        
        @media (max-width: 768px) {
          .jury-card {
            padding: 1.5rem;
          }
          
          .search-box {
            flex-direction: column;
          }
          
          .search-button {
            width: 100%;
          }
          
          .result-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
          }
          
          .assign-button {
            width: 100%;
          }
        }

        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          min-height: 400px;
          gap: 1rem;
        }

        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 4px solid #f3f3f3;
          border-top: 4px solid #3498db;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .error-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          min-height: 400px;
          gap: 1.5rem;
        }

        .error-message {
          font-size: 1.2rem;
          color: #721c24;
          text-align: center;
        }
      `}</style>
    </>
  );
};

const componentStyles = `
  .container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
    font-family: 'Roboto', sans-serif;
  }

  .page-title {
    font-size: 2rem;
    margin-bottom: 2rem;
    color: #2c3e50;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 1rem;
  }

  .card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .section-title {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: #2c3e50;
  }

  .subsection-title {
    font-size: 1.2rem;
    margin: 1.5rem 0 1rem;
    color: #34495e;
  }

  .selected-announcement-panel {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    border-left: 4px solid #3498db;
    position: relative;
  }

  .selected-announcement-panel h2 {
    margin: 0 0 1rem;
    color: #333;
  }

  .announcement-details {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem 2rem;
    margin-bottom: 1.5rem;
  }

  .announcement-details p {
    margin: 0;
    font-size: 1rem;
    line-height: 1.6;
  }

  .announcement-details p strong {
    margin-right: 8px;
    color: #2c3e50;
  }

  .back-button {
    padding: 0.75rem 1.5rem;
    background: transparent;
    color: #666;
    border: 1px solid #ddd;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
  }

  .top-back-button {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
  }

  .back-button:hover {
    background: #f0f0f0;
    transform: translateY(-1px);
  }

  .success-message {
    background: #d4edda;
    color: #155724;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    border: 1px solid #c3e6cb;
  }

  .error-message {
    background: #f8d7da;
    color: #721c24;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    border: 1px solid #f5c6cb;
  }

  .info-message {
    background: #e2e3e5;
    color: #383d41;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1.5rem;
    border: 1px solid #d6d8db;
    text-align: center;
  }

  .loading-message {
    padding: 1.5rem;
    text-align: center;
    color: #666;
    font-style: italic;
  }

  .criteria-selection {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.75rem;
    font-weight: 500;
    color: #2c3e50;
    font-size: 1rem;
  }

  .select-input, .text-input, .number-input {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
    box-sizing: border-box;
    transition: all 0.2s;
  }

  .select-input:focus, .text-input:focus, .number-input:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    outline: none;
  }

  .select-input:disabled, .text-input:disabled, .number-input:disabled {
    background-color: #f8f9fa;
    cursor: not-allowed;
  }

  .criteria-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem 2rem;
  }

  .form-actions {
    margin-top: 2.5rem;
    text-align: right;
    border-top: 1px solid #eee;
    padding-top: 2rem;
  }

  .primary-button {
    padding: 1rem 2.5rem;
    background: #3498db;
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .primary-button:hover {
    background: #2980b9;
    transform: translateY(-1px);
  }

  .primary-button:disabled {
    background: #95a5a6;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .container {
      margin: 1rem auto;
      padding: 0 1rem;
    }

    .page-title {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .card {
      padding: 1.5rem;
    }

    .selected-announcement-panel {
      padding: 1.25rem;
    }

    .announcement-details {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .top-back-button {
      position: static;
      display: block;
      width: 100%;
      margin-top: 1rem;
      text-align: center;
    }

    .criteria-selection {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .criteria-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .form-actions {
      text-align: center;
    }

    .primary-button {
      width: 100%;
    }
  }
`;

export default IlanKriter;// src/pages/manager/Profile.jsx (Dosya adını ManagerProfile.jsx yapmanız önerilir)

import React, { useState, useEffect } from "react";
import ManagerNavbar from "../../components/navbars/ManagerNavbar";
import { useAuth } from "../../context/AuthContext"; // AuthContext import
import { FaUserCircle, FaLock, FaSave, FaSpinner } from "react-icons/fa"; // İkonlar

// CSRF token fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// API Fetch Helper (opsiyonel ama kullanışlı)
const apiFetch = async (url, options = {}) => {
    const defaultHeaders = { 'Content-Type': 'application/json', 'X-CSRFToken': getCookie('csrftoken') || "", ...(options.headers || {}), };
    const response = await fetch(url, { credentials: 'include', ...options, headers: defaultHeaders, });
    if (!response.ok) {
        let errorData; try { errorData = await response.json(); } catch { errorData = await response.text(); }
        console.error(`API Error (${response.status}) on ${url}:`, errorData);
        throw { status: response.status, data: errorData, message: `API isteği başarısız (${response.status})`};
    }
    if (response.status === 204) return null;
    try { return await response.json(); } catch { return null; }
};


const ManagerProfile = () => {
  const { user, isLoading: authLoading } = useAuth(); // Context'ten kullanıcıyı al

  // Şifre Değiştirme State'leri
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword1, setNewPassword1] = useState("");
  const [newPassword2, setNewPassword2] = useState("");
  const [isSubmittingPassword, setIsSubmittingPassword] = useState(false);
  const [passwordError, setPasswordError] = useState("");
  const [passwordSuccess, setPasswordSuccess] = useState("");

  // Şifre Değiştirme Handler'ı
  const handlePasswordChange = async (e) => {
    e.preventDefault();
    setPasswordError("");
    setPasswordSuccess("");

    if (!oldPassword || !newPassword1 || !newPassword2) {
      setPasswordError("Lütfen tüm şifre alanlarını doldurun.");
      return;
    }
    if (newPassword1 !== newPassword2) {
      setPasswordError("Yeni şifreler eşleşmiyor.");
      return;
    }
    if (newPassword1.length < 8) { // Backend kuralıyla aynı olmalı
       setPasswordError("Yeni şifre en az 8 karakter olmalıdır.");
       return;
    }

    setIsSubmittingPassword(true);

    const payload = {
      old_password: oldPassword,
      new_password1: newPassword1,
      new_password2: newPassword2,
    };

    try {
      await apiFetch('http://localhost:8000/api/auth/password/change/', {
          method: 'POST',
          body: JSON.stringify(payload)
      });
      setPasswordSuccess("Şifreniz başarıyla güncellendi!");
      // Formu temizle
      setOldPassword("");
      setNewPassword1("");
      setNewPassword2("");
      // Başarı mesajını bir süre sonra kaldır
      setTimeout(() => setPasswordSuccess(""), 3000);
    } catch (err) {
        console.error("Şifre değiştirme hatası:", err);
        let errorMsg = `Hata (${err.status || 'Network Error'}): Şifre değiştirilemedi. `;
        if (err.data) {
            for (const key in err.data) { errorMsg += `${key}: ${Array.isArray(err.data[key]) ? err.data[key].join(', ') : err.data[key]} `; }
            // dj-rest-auth'un spesifik hata mesajlarını yakala
            if (err.data.old_password) errorMsg = "Mevcut şifreniz yanlış.";
            if (err.data.new_password2) errorMsg = "Yeni şifreler eşleşmiyor veya yeterince karmaşık değil.";
        } else if (err.message) { errorMsg = err.message; }
        setPasswordError(errorMsg.trim());
    } finally {
      setIsSubmittingPassword(false);
    }
  };

  // --- Render ---

  if (authLoading) {
    return (<><ManagerNavbar /><div className="profile-container is-loading"><p>Kullanıcı bilgileri yükleniyor...</p></div><style>{css}</style></>);
  }

  if (!user) {
       return (<><ManagerNavbar /><div className="profile-container has-error"><h2 className="page-title">Profil ve Ayarlar</h2><p className="error-message">Kullanıcı bilgileri yüklenemedi. Lütfen tekrar giriş yapın.</p></div><style>{css}</style></>);
  }

  return (
    <>
      <ManagerNavbar />
      <div className="profile-container">
        <div className="profile-content">
          <h2 className="page-title">👤 Profil ve Ayarlar</h2>

          {/* Kişisel Bilgiler */}
          <div className="card profile-info-card">
            <h3>📌 Kişisel Bilgiler</h3>
            <div className="info-grid">
                <div className="info-item">
                    <label>Ad Soyad</label>
                    <span>{`${user.first_name || ''} ${user.last_name || ''}`}</span>
                </div>
                 <div className="info-item">
                    <label>Kullanıcı Adı</label>
                    <span>{user.username}</span>
                </div>
                <div className="info-item">
                    <label>TC Kimlik No</label>
                    <span>{user.TC_KIMLIK || '-'}</span>
                </div>
                <div className="info-item">
                    <label>E-posta</label>
                    <span>{user.email || '-'}</span>
                </div>
                <div className="info-item">
                    <label>Telefon</label>
                    <span>{user.telefon || '-'}</span>
                </div>
                 <div className="info-item">
                    <label>Rol</label>
                    <span>{user.user_type || '-'}</span>
                </div>
                 {/* İsteğe bağlı: Düzenleme butonu eklenebilir -> /manager-profile gibi ayrı bir sayfaya yönlendirebilir */}
                 {/* <button className="button primary edit-profile-button">Bilgileri Düzenle</button> */}
            </div>
          </div>

          {/* Şifre Değiştirme */}
          <div className="card password-change-card">
            <h3>🔐 Şifre Değiştir</h3>
             {passwordSuccess && <p className="success-message">{passwordSuccess}</p>}
             {passwordError && <p className="error-message">{passwordError}</p>}
            <form onSubmit={handlePasswordChange}>
                <div className="form-group">
                    <label htmlFor="oldPassword">Mevcut Şifre*</label>
                    <input id="oldPassword" type="password" value={oldPassword} onChange={(e) => setOldPassword(e.target.value)} required disabled={isSubmittingPassword}/>
                </div>
                 <div className="form-group">
                    <label htmlFor="newPassword1">Yeni Şifre*</label>
                    <input id="newPassword1" type="password" value={newPassword1} onChange={(e) => setNewPassword1(e.target.value)} required disabled={isSubmittingPassword}/>
                 </div>
                 <div className="form-group">
                    <label htmlFor="newPassword2">Yeni Şifre (Tekrar)*</label>
                    <input id="newPassword2" type="password" value={newPassword2} onChange={(e) => setNewPassword2(e.target.value)} required disabled={isSubmittingPassword}/>
                 </div>
                 <div className="form-actions">
                    <button type="submit" className="button primary" disabled={isSubmittingPassword}>
                        {isSubmittingPassword ? <><FaSpinner className="spin"/> Güncelleniyor...</> : <><FaSave/> Şifreyi Güncelle</>}
                    </button>
                 </div>
            </form>
          </div>

          {/* Oturum Geçmişi Bölümü Kaldırıldı */}
          {/*
          <div className="card history-card">
            <h3>🕒 Oturum Geçmişi</h3>
            <p><i>Bu özellik için backend desteği gereklidir.</i></p>
            {/* API'den veri çekildiğinde burası doldurulacak *}
          </div>
          */}
        </div>
      </div>
      <style>{css}</style>
    </>
  );
};

// --- CSS Stilleri ---
const css = `
:root {
    --primary-color: #009944; --primary-dark: #007c39; --primary-light: #e6f0e6;
    --secondary-color: #6c757d; --secondary-dark: #5a6268;
    --light-gray: #f8f9fa; --medium-gray: #dee2e6; --dark-gray: #495057; --text-color: #343a40;
    --white-color: #fff; --danger-color: #dc3545; --danger-dark: #bd2130; --danger-light: #f8d7da;
    --warning-color: #ffc107; --warning-dark: #e0a800; --warning-light: #fff3cd;
    --success-color: #28a745; --success-dark: #1e7e34; --success-light: #d1e7dd;
    --info-color: #0dcaf0; --info-dark: #0baccc; --info-light: #cff4fc;
    --border-radius-sm: 0.25rem; --border-radius-md: 0.375rem; --border-radius-lg: 0.5rem;
    --box-shadow-light: 0 1px 3px rgba(0,0,0,0.05); --box-shadow-medium: 0 4px 6px rgba(0,0,0,0.1);
    --font-family-sans-serif: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.profile-container {
    padding: 2rem;
    background-color: var(--light-gray);
    font-family: var(--font-family-sans-serif);
    display: flex;
    justify-content: center;
    min-height: calc(100vh - 60px); /* Navbar yüksekliğine göre */
}
.profile-container.is-loading, .profile-container.has-error { /* Loading/Error için stiller */
    align-items: center; text-align: center; font-size: 1.1rem; color: var(--secondary-color);
}
.profile-container.has-error .error-message { background: none; border: none; padding: 0; margin-top: 0; font-size: 1.1rem;}

.profile-content {
    width: 100%;
    max-width: 700px;
}

.page-title {
    color: var(--primary-dark);
    font-size: 1.75rem;
    font-weight: 600;
    margin-bottom: 2rem;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.card {
    background-color: var(--white-color);
    padding: 1.5rem 2rem;
    border-radius: var(--border-radius-lg);
    box-shadow: var(--box-shadow-medium);
    margin-bottom: 2rem;
    border: 1px solid var(--medium-gray);
}
.card h3 {
    color: var(--primary-color);
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 1.5rem 0;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--medium-gray);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.profile-info-card .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem 1.5rem;
}
.profile-info-card .info-item label {
    font-weight: 600;
    font-size: 0.85rem;
    color: var(--secondary-dark);
    display: block;
    margin-bottom: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}
.profile-info-card .info-item span {
    font-size: 1rem;
    color: var(--text-color);
    word-break: break-word;
}
.edit-profile-button { /* Bilgileri Düzenle butonu için stil */
    margin-top: 1.5rem;
    float: right;
}

.password-change-card .form-group {
    margin-bottom: 1.25rem;
}
.password-change-card label {
    font-weight: 500;
    margin-bottom: 0.4rem;
    display: block;
    font-size: 0.95rem;
    color: var(--dark-gray);
}
.password-change-card input {
    width: 100%;
    padding: 0.7rem 0.8rem;
    border: 1px solid #ced4da;
    border-radius: var(--border-radius-md);
    font-size: 1rem;
    box-sizing: border-box;
}
.password-change-card input:focus {
    border-color: var(--primary-color);
    outline: none;
    box-shadow: 0 0 0 2px rgba(0, 153, 68, 0.2);
}
.password-change-card .form-actions {
    text-align: right;
    margin-top: 1.5rem;
}
.success-message, .error-message { /* Ortak stil */
    padding: 0.8rem 1rem;
    border-radius: var(--border-radius-md);
    margin: 0 0 1rem 0; /* Form içinde üste */
    font-weight: 500;
    font-size: 0.9rem;
    border: 1px solid transparent;
}
.success-message { background: var(--success-light); color: var(--success-dark); border-color: #a3cfbb; }
.error-message { background: var(--danger-light); color: var(--danger-dark); border-color: #f1b0b7;}

/* Butonlar */
.button { padding: 0.6rem 1.2rem; border-radius: var(--border-radius-md); border: none; cursor: pointer; font-weight: 500; font-size: 0.95rem; transition: all 0.2s ease; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; line-height: 1.4; }
.button.primary { background-color: var(--primary-color); color: var(--white-color); }
.button.primary:hover:not(:disabled) { background-color: var(--primary-dark); }
.button.secondary { background-color: var(--secondary-color); color: var(--white-color); }
.button.secondary:hover:not(:disabled) { background-color: var(--secondary-dark); }
.button:disabled { opacity: 0.65; cursor: not-allowed; }

/* Spinner */
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
.spin { animation: spin 1s linear infinite; display: inline-block; line-height: 0; vertical-align: middle;}


/* Responsive */
@media (max-width: 768px) {
    .profile-container { padding: 1rem; }
    .profile-content { max-width: 100%; }
    .card { padding: 1rem 1.25rem; }
    .page-title { font-size: 1.5rem; }
    .card h3 { font-size: 1.1rem; }
    .profile-info-card .info-grid { grid-template-columns: 1fr; }
}

`;

// --- Component Export ---
export default ManagerProfile; // Bileşen adını değiştirdikimport React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import UserNavbar from "../../components/navbars/UserNavbar";
import api from '../../services/api';

// CSRF token'ı almak için getCookie fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

const Apply = () => {
  const { ilanId } = useParams(); // URL'den ilanId'yi al
  const navigate = useNavigate(); // Yönlendirme için
  const [announcement, setAnnouncement] = useState(null); // İlan detayları
  const [requiredDocs, setRequiredDocs] = useState([]); // Backend'den gelen gerekli belgeler listesi
  const [applicationData, setApplicationData] = useState({}); // Yüklenecek dosyaları tutacak state {docKey: File}
  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(true); // İlan yükleme durumu
  const [error, setError] = useState(null); // Hata durumu
  const [submitting, setSubmitting] = useState(false); // Başvuru gönderme durumu

  // Tab yönetimi için state
  const [activeTab, setActiveTab] = useState('kisisel-bilgiler');

  // Akademik faaliyetler için state
  const [academicActivities, setAcademicActivities] = useState({
    articles: [],
    projects: [],
    conferences: [],
    teaching: [],
    citations: [],
    patents: []
  });

  // İlan detaylarını çekme
  useEffect(() => {
    if (!ilanId) return;
    setLoading(true);
    setError(null);
    api.get(`/ilanlar/${ilanId}/`)
      .then(res => {
        const data = res.data;
        setAnnouncement(data);
        // Backend'den Gelen Gerekli Belge Listesi
        const backendRequiredDocs = [
            { key: 'ozgecmis_dosyasi', label: 'Özgeçmiş Dosyası' },
            { key: 'diploma_belgeleri', label: 'Diploma Belgeleri' },
            { key: 'yabanci_dil_belgesi', label: 'Yabancı Dil Belgesi' },
        ];
        setRequiredDocs(backendRequiredDocs);
        const initialDocState = {};
        backendRequiredDocs.forEach(doc => {
            initialDocState[doc.key] = null;
        });
        setApplicationData(initialDocState);
      })
      .catch(err => {
        setError(err.message || "İlan bilgileri yüklenirken bir hata oluştu.");
      })
      .finally(() => {
        setLoading(false);
      });
  }, [ilanId]);

  // Dosya seçildiğinde state'i güncelle
  const handleFileChange = (e, docKey) => {
    const file = e.target.files[0] || null;
    setApplicationData(prevData => ({
      ...prevData,
      [docKey]: file,
    }));
  };

  // Tab'ları değiştirme işlevi
  const handleTabChange = (tab) => {
    // Temel validation kontrolleri
    if (tab === 'akademik-faaliyetler') {
      // Kişisel bilgiler tab'ından akademik faaliyetlere geçerken gerekli kontroller
      let isValid = true;
      requiredDocs.forEach(doc => {
        if (!applicationData[doc.key]) {
          isValid = false;
        }
      });

      if (!isValid) {
        setError("Lütfen gerekli tüm belgeleri yükleyin.");
        return;
      }
    }

    if (tab === 'onizleme') {
      // Akademik faaliyetlerden önizlemeye geçerken kontrol (isteğe bağlı)
      if (academicActivities.articles.length === 0 &&
          academicActivities.projects.length === 0 &&
          academicActivities.conferences.length === 0 &&
          academicActivities.teaching.length === 0) {
        if (!window.confirm("Henüz akademik faaliyet eklemediniz. Devam etmek istiyor musunuz?")) {
          return;
        }
      }
    }

    setActiveTab(tab);
    setError(null); // Tab değişiminde hata mesajlarını temizle
  };

  // Akademik faaliyet ekleme işlevleri
  const handleAddArticle = (article) => {
    setAcademicActivities(prev => ({
      ...prev,
      articles: [...prev.articles, article]
    }));
  };

  const handleAddProject = (project) => {
    setAcademicActivities(prev => ({
      ...prev,
      projects: [...prev.projects, project]
    }));
  };

  const handleAddConference = (conference) => {
    setAcademicActivities(prev => ({
      ...prev,
      conferences: [...prev.conferences, conference]
    }));
  };

  const handleAddTeaching = (teaching) => {
    setAcademicActivities(prev => ({
      ...prev,
      teaching: [...prev.teaching, teaching]
    }));
  };

  const handleAddCitation = (citation) => {
    setAcademicActivities(prev => ({
      ...prev,
      citations: [...prev.citations, citation]
    }));
  };

  const handleAddPatent = (patent) => {
    setAcademicActivities(prev => ({
      ...prev,
      patents: [...prev.patents, patent]
    }));
  };

  // Akademik faaliyet silme işlevleri
  const handleRemoveActivity = (type, index) => {
    setAcademicActivities(prev => {
      const newActivities = {...prev};
      newActivities[type] = prev[type].filter((_, i) => i !== index);
      return newActivities;
    });
  };

  // Formu gönderme
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSubmitting(true);

    // ilanId kontrolü
    if (!ilanId || isNaN(Number(ilanId))) {
      setError("İlan bilgisi alınamadı. Lütfen sayfayı yenileyin veya tekrar deneyin.");
      setSubmitting(false);
      return;
    }

    const csrftoken = getCookie('csrftoken');
    if (!csrftoken) {
      setError("Güvenlik token'ı alınamadı.");
      setSubmitting(false);
      return;
    }

    // FormData oluştur
    const formData = new FormData();
    formData.append('ilan_id', parseInt(ilanId)); // integer olarak gönder

    let hasMissingFile = false;
    // State'teki dosyaları FormData'ya ekle
    requiredDocs.forEach(doc => {
      if (applicationData[doc.key] instanceof File) {
        formData.append(doc.key, applicationData[doc.key]);
      } else {
          console.error(`Eksik dosya: ${doc.label}`);
          hasMissingFile = true;
      }
    });

    if (hasMissingFile) {
        setError("Lütfen gerekli tüm belgeleri yükleyin.");
        setSubmitting(false);
        return;
    }

    // Akademik faaliyetleri ekle
    formData.append('academic_activities', JSON.stringify(academicActivities));

    // Debug için logla
    console.log("Gönderilecek ilanId:", ilanId);
    for (let [key, value] of formData.entries()) {
      console.log(key, value);
    }

    try {
      await api.post('/basvurular/', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      setSubmitted(true);

      // 3 saniye sonra başvurular sayfasına yönlendir
      setTimeout(() => {
        navigate('/basvurularim');
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.message || err.message || "Başvuru gönderilirken bir ağ hatası oluştu. Lütfen tüm alanları ve dosyaları kontrol edin.");
    } finally {
      setSubmitting(false);
    }
  };

  // --- Yükleme ve Hata Durumları ---
  if (loading) {
    return (
      <div className="container">
        <UserNavbar />
        <div className="section">
          <div className="loadingIndicator">
            <div className="spinner"></div>
            <p>İlan bilgileri yükleniyor...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error && !announcement) {
     return (
       <div className="container">
         <UserNavbar />
         <div className="section">
           <h3 className="errorTitle">Hata</h3>
           <p className="errorMessage">{error}</p>
           <button
             className="backButton"
             onClick={() => navigate('/ilanlar')}
           >
             İlanlara Dön
           </button>
         </div>
       </div>
     );
   }

  if (!announcement) {
    return (
      <div className="container">
        <UserNavbar />
        <div className="section">
          <h3 className="errorTitle">İlan Bulunamadı</h3>
          <p className="errorMessage">İlan bulunamadı veya yüklenemedi.</p>
          <button
            className="backButton"
            onClick={() => navigate('/ilanlar')}
          >
            İlanlara Dön
          </button>
        </div>
      </div>
    );
  }

  // --- İlan ve Başvuru Formu ---
  return (
    <>
      <style>
        {`
          /* Genel Konteyner */
          .container {
              background-color: #f4f6f9;
              padding: 2rem;
              border-radius: 16px;
              max-width: 800px;
              margin: 2rem auto;
              font-family: sans-serif;
              color: #555;
          }

          .title {
              color: #333;
              font-size: 2rem;
              margin-bottom: 1rem;
              text-align: center;
          }

          .subtitle {
              color: #009944;
              font-size: 1.25rem;
              margin-bottom: 0.5rem;
          }

          .section {
              background-color: #fff;
              border: 1px solid #eee;
              padding: 1rem;
              border-radius: 12px;
              margin-bottom: 1.5rem;
              box-shadow: 0 2px 4px rgba(0,0,0,0.05);
          }

          ul {
              padding-left: 1.2rem;
          }

          li {
              margin-bottom: 0.3rem;
              color: #666;
          }

          .form {
              display: flex;
              flex-direction: column;
              gap: 1rem;
          }

          label {
              display: flex;
              flex-direction: column;
              font-weight: bold;
              color: #555;
          }

          input[type="text"],
          input[type="email"],
          input[type="file"],
          input[type="number"],
          textarea,
          select {
              margin-top: 0.5rem;
              padding: 0.5rem;
              border-radius: 8px;
              border: 1px solid #ccc;
              font-size: 14px;
              transition: border-color 0.3s;
          }
          
          input[type="text"]:focus,
          input[type="email"]:focus,
          input[type="file"]:focus,
          input[type="number"]:focus,
          textarea:focus,
          select:focus {
              border-color: #009944;
              outline: none;
              box-shadow: 0 0 0 2px rgba(0, 153, 68, 0.2);
          }

          .submitButton {
              background-color: #009944;
              color: #fff;
              border: none;
              padding: 0.75rem 1rem;
              border-radius: 10px;
              cursor: pointer;
              transition: background-color 0.3s;
              font-size: 1rem;
              font-weight: bold;
          }

          .submitButton:hover {
              background-color: #007c39;
          }
          
          .submitButton:disabled {
              background-color: #aaa;
              cursor: not-allowed;
          }
          
          .tabContainer {
              display: flex;
              margin-bottom: 1rem;
              border-bottom: 1px solid #ccc;
          }
          
          .tabButton {
              padding: 0.75rem 1.5rem;
              background: none;
              border: none;
              border-bottom: 2px solid transparent;
              cursor: pointer;
              font-weight: bold;
              color: #555;
              transition: all 0.3s;
          }
          
          .tabButton.active {
              color: #009944;
              border-bottom-color: #009944;
          }
          
          .academicSection {
              border: 1px solid #eee;
              border-radius: 8px;
              padding: 1rem;
              margin-bottom: 1.5rem;
              background-color: #fafafa;
          }
          
          .academicSection h4 {
              color: #333;
              margin-top: 0;
              border-bottom: 1px solid #eee;
              padding-bottom: 0.5rem;
          }
          
          .academicItemCard {
              border: 1px solid #ddd;
              border-radius: 8px;
              padding: 1rem;
              margin-bottom: 1rem;
              position: relative;
              background-color: white;
              transition: box-shadow 0.3s;
          }
          
          .academicItemCard:hover {
              box-shadow: 0 2px 5px rgba(0,0,0,0.1);
          }
          
          .removeButton {
              position: absolute;
              top: 0.5rem;
              right: 0.5rem;
              background: #f44336;
              color: white;
              border: none;
              border-radius: 50%;
              width: 24px;
              height: 24px;
              font-size: 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
          }
          
          .addButton {
              background: #009944;
              color: white;
              border: none;
              border-radius: 8px;
              padding: 0.5rem 1rem;
              cursor: pointer;
              margin-top: 0.5rem;
              font-weight: bold;
              transition: background-color 0.3s;
          }
          
          .addButton:hover {
              background-color: #007c39;
          }
          
          .addForm {
              display: flex;
              flex-direction: column;
              gap: 0.5rem;
              margin-top: 1rem;
              padding: 1rem;
              border: 1px solid #eee;
              border-radius: 8px;
              background-color: white;
          }
          
          summary {
              cursor: pointer;
              font-weight: bold;
              color: #009944;
              padding: 0.5rem;
              border-radius: 5px;
              background-color: #f8f8f8;
              transition: background-color 0.3s;
          }
          
          summary:hover {
              background-color: #eafaef;
          }
          
          details {
              margin-top: 1rem;
          }
          
          .previewTable {
              width: 100%;
              border-collapse: collapse;
              margin-top: 1rem;
          }
          
          .previewTable th, .previewTable td {
              border: 1px solid #ddd;
              padding: 8px;
              text-align: left;
          }
          
          .previewTable th {
              background-color: #f2f2f2;
              color: #333;
          }
          
          .previewTable tr:nth-child(even) {
              background-color: #f9f9f9;
          }
          
          .previewTable tr:hover {
              background-color: #eafaef;
          }
          
          .previewSection {
              margin-top: 1.5rem;
          }
          
          .previewSection h4 {
              color: #333;
              border-bottom: 1px solid #eee;
              padding-bottom: 0.5rem;
          }
          
          .previewSubsection {
              margin-top: 1rem;
          }
          
          .previewSubsection h5 {
              color: #444;
              margin-bottom: 0.5rem;
          }
          
          .navButtons {
              display: flex;
              justify-content: space-between;
              margin-top: 1.5rem;
          }
          
          .backButton {
              background-color: #f2f2f2;
              color: #555;
              border: 1px solid #ccc;
              padding: 0.75rem 1rem;
              border-radius: 10px;
              cursor: pointer;
              font-size: 1rem;
              transition: all 0.3s;
          }
          
          .backButton:hover {
              background-color: #e6e6e6;
          }
          
          .errorMessage {
              color: #f44336;
              background-color: #ffebee;
              padding: 10px;
              border-radius: 5px;
              margin: 10px 0;
              border-left: 4px solid #f44336;
          }
          
          .successMessage {
              color: #4caf50;
              background-color: #e8f5e9;
              padding: 10px;
              border-radius: 5px;
              margin: 10px 0;
              border-left: 4px solid #4caf50;
          }
          
          .loadingIndicator {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              padding: 2rem;
          }
          
          .spinner {
              border: 4px solid rgba(0, 0, 0, 0.1);
              width: 36px;
              height: 36px;
              border-radius: 50%;
              border-left-color: #009944;
              animation: spin 1s linear infinite;
          }
          
          @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
          }
          
          .noActivitiesMessage {
              color: #777;
              font-style: italic;
              text-align: center;
              padding: 1rem;
          }
          
          .errorTitle {
              color: #f44336;
              margin-top: 0;
          }
          
          .fileInputPreview {
              display: flex;
              align-items: center;
              margin-top: 0.5rem;
          }
          
          .fileInputPreview span {
              margin-left: 0.5rem;
              font-size: 0.9rem;
              color: #666;
          }
          
          /* Progress indicator */
          .progressContainer {
              display: flex;
              margin-bottom: 2rem;
              justify-content: center;
          }
          
          .progressStep {
              display: flex;
              flex-direction: column;
              align-items: center;
              flex: 1;
              position: relative;
              max-width: 120px;
          }
          
          .progressStep::before {
              content: '';
              position: absolute;
              top: 15px;
              left: -50%;
              width: 100%;
              height: 2px;
              background-color: #ddd;
              z-index: 0;
          }
          
          .progressStep:first-child::before {
              display: none;
          }
          
          .progressStep.active .stepNumber, 
          .progressStep.completed .stepNumber {
              background-color: #009944;
              color: white;
          }
          
          .progressStep.active::before, 
          .progressStep.completed::before {
              background-color: #009944;
          }
          
          .stepNumber {
              width: 30px;
              height: 30px;
              border-radius: 50%;
              background-color: #ddd;
              display: flex;
              justify-content: center;
              align-items: center;
              margin-bottom: 0.5rem;
              font-weight: bold;
              position: relative;
              z-index: 1;
          }
          
          .stepText {
              font-size: 0.8rem;
              text-align: center;
              color: #555;
          }
          
          .progressStep.active .stepText {
              color: #009944;
              font-weight: bold;
          }

          /* Scrollbar */
          ::-webkit-scrollbar {
              width: 10px;
          }

          ::-webkit-scrollbar-thumb {
              background-color: #ccc;
              border-radius: 5px;
          }

          ::-webkit-scrollbar-track {
              background: transparent;
          }
        `}
      </style>
      <UserNavbar />
      <div className="container">
        <div className="section">
          {/* İlan Detayları */}
          <h1 className="title">{announcement.baslik || 'İlan Başlığı Yok'}</h1>
          <p><strong>Fakülte/Birim:</strong> {announcement.birim_ad || announcement.birim || 'Belirtilmemiş'}</p>
          <p><strong>Bölüm:</strong> {announcement.bolum_ad || announcement.bolum || 'Belirtilmemiş'}</p>
          <p><strong>Anabilim Dalı:</strong> {announcement.anabilim_dali_ad || announcement.anabilim_dali || 'Belirtilmemiş'}</p>
          <p><strong>Kadro:</strong> {announcement.kadro_tipi_ad || announcement.kadro_tipi || 'Belirtilmemiş'}</p>
          <p>
            <strong>Başvuru Tarihleri:</strong>
            {new Date(announcement.baslangic_tarihi).toLocaleDateString('tr-TR')} -{' '}
            {new Date(announcement.bitis_tarihi).toLocaleDateString('tr-TR')}
          </p>
          <p><strong>Açıklama:</strong> {announcement.aciklama || 'Açıklama yok.'}</p>

          {/* Gerekli Belgeler */}
          <h3 className="subtitle">Gerekli Belgeler</h3>
          <ul>
            {requiredDocs.length > 0
                ? requiredDocs.map((doc) => <li key={doc.key}>{doc.label}</li>)
                : <li>Gerekli belge bilgisi bulunamadı.</li>
            }
          </ul>

          {!submitted ? (
            <div>
              {/* İlerleme Göstergesi */}
              <div className="progressContainer">
                <div className={`progressStep ${activeTab === 'kisisel-bilgiler' ? 'active' : ''} ${activeTab === 'akademik-faaliyetler' || activeTab === 'onizleme' ? 'completed' : ''}`}>
                  <div className="stepNumber">1</div>
                  <div className="stepText">Kişisel Bilgiler</div>
                </div>
                <div className={`progressStep ${activeTab === 'akademik-faaliyetler' ? 'active' : ''} ${activeTab === 'onizleme' ? 'completed' : ''}`}>
                  <div className="stepNumber">2</div>
                  <div className="stepText">Akademik Faaliyetler</div>
                </div>
                <div className={`progressStep ${activeTab === 'onizleme' ? 'active' : ''}`}>
                  <div className="stepNumber">3</div>
                  <div className="stepText">Önizleme ve Gönderim</div>
                </div>
              </div>

              {/* Tab Navigasyonu */}
              <div className="tabContainer">
                <button
                  className={`tabButton ${activeTab === 'kisisel-bilgiler' ? 'active' : ''}`}
                  onClick={() => handleTabChange('kisisel-bilgiler')}
                >
                  1. Kişisel Bilgiler
                </button>
                <button
                  className={`tabButton ${activeTab === 'akademik-faaliyetler' ? 'active' : ''}`}
                  onClick={() => handleTabChange('akademik-faaliyetler')}
                >
                  2. Akademik Faaliyetler
                </button>
                <button
                  className={`tabButton ${activeTab === 'onizleme' ? 'active' : ''}`}
                  onClick={() => handleTabChange('onizleme')}
                >
                  3. Önizleme ve Gönderim
                </button>
              </div>

              {/* Hata mesajı */}
              {error && (
                <div className="errorMessage">
                  <p><strong>Hata:</strong> {error}</p>
                </div>
              )}

              {/* Tab İçerikleri */}
              <form onSubmit={handleSubmit} className="form">

                {/* 1. Kişisel Bilgiler Tab */}
                {activeTab === 'kisisel-bilgiler' && (
                  <div>
                    <h3 className="subtitle">Kişisel Bilgiler ve Belgeler</h3>
                    <p>Bu bölümde, başvurunuz için gerekli belgeleri yüklemeniz gerekmektedir. Lütfen tüm belgelerin güncel ve okunaklı olduğundan emin olun.</p>

                    {requiredDocs.map((doc) => (
                      <label key={doc.key}>
                        {doc.label}:
                        <div className="fileInputPreview">
                          <input
                            type="file"
                            onChange={(e) => handleFileChange(e, doc.key)}
                            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                            required
                            disabled={submitting}
                          />
                          {applicationData[doc.key] && (
                            <span>
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                              </svg>
                              {applicationData[doc.key].name}
                            </span>
                          )}
                        </div>
                      </label>
                    ))}

                    <div className="navButtons">
                      <button
                        type="button"
                        className="backButton"
                        onClick={() => navigate('/ilanlar')}
                      >
                        İlanlara Dön
                      </button>
                      <button
                        type="button"
                        className="submitButton"
                        onClick={() => handleTabChange('akademik-faaliyetler')}
                      >
                        Devam Et
                      </button>
                    </div>
                  </div>
                )}

                {/* 2. Akademik Faaliyetler Tab */}
                {activeTab === 'akademik-faaliyetler' && (
                  <div>
                    <h3 className="subtitle">Akademik Faaliyetler</h3>
                    <p>Bu bölümde akademik faaliyetlerinizi ekleyebilirsiniz. Her kategori için yeni kayıt ekleyebilir ve mevcut kayıtları düzenleyebilirsiniz.</p>

                    {/* Makaleler Bölümü */}
                    <div className="academicSection">
                      <h4>Makaleler</h4>

                      {/* Makale Listesi */}
                      {academicActivities.articles.length > 0 ? (
                        academicActivities.articles.map((article, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('articles', index)}
                            >
                              X
                            </button>
                            <p><strong>Başlık:</strong> {article.title}</p>
                            <p><strong>Dergi:</strong> {article.journal}</p>
                            <p><strong>Yıl:</strong> {article.year}</p>
                            <p><strong>İndeks:</strong> {article.index}</p>
                            <p><strong>Başlıca Yazar:</strong> {article.isMainAuthor ? 'Evet' : 'Hayır'}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz makale eklenmemiş.</p>
                      )}

                      {/* Yeni Makale Ekleme Formu */}
                        <details>
                          <summary>Yeni Makale Ekle</summary>
                          <div className="addForm">
                            <input
                              type="text"
                              id="articleTitle"
                              placeholder="Makale Başlığı"
                            />
                            <input
                              type="text"
                              id="articleJournal"
                              placeholder="Dergi Adı"
                            />
                            <input
                              type="number"
                              id="articleYear"
                              placeholder="Yayın Yılı"
                              min="1900"
                              max={new Date().getFullYear()}
                            />
                            <select id="articleIndex">
                              <option value="">İndeks Seçiniz</option>
                              <option value="SCI">SCI</option>
                              <option value="SCI-E">SCI-E</option>
                              <option value="SSCI">SSCI</option>
                              <option value="AHCI">AHCI</option>
                              <option value="ESCI">ESCI</option>
                              <option value="Scopus">Scopus</option>
                              <option value="TR Dizin">TR Dizin</option>
                              <option value="Diğer">Diğer</option>
                            </select>
                            <div style={{display: 'flex', alignItems: 'center', marginTop: '8px'}}>
                              <input
                                type="checkbox"
                                id="articleIsMainAuthor"
                                style={{marginRight: '8px', width: 'auto'}}
                              />
                              <label htmlFor="articleIsMainAuthor" style={{fontWeight: 'normal'}}>
                                Başlıca Yazar
                              </label>
                            </div>

                            {/* Kanıt Belgesi Yükleme Alanı */}
                            <div className="evidenceUpload" style={{marginTop: '0.75rem', border: '1px dashed #ccc', padding: '0.75rem', borderRadius: '4px'}}>
                              <label htmlFor="articleEvidence" style={{display: 'block', marginBottom: '0.5rem', fontWeight: 'normal'}}>
                                <strong>Kanıt Belgesi Yükle:</strong> (Makale tam metni, indeks kanıtı, vb.)
                              </label>
                              <input
                                type="file"
                                id="articleEvidence"
                                accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                              />
                              <p style={{fontSize: '0.8rem', color: '#666', marginTop: '0.5rem'}}>
                                Not: WoS/Scopus indeks sayfası, makale ilk sayfası veya tam metin PDF dosyası yükleyebilirsiniz.
                              </p>
                            </div>

                            <button
                              type="button"
                              className="addButton"
                              onClick={() => {
                                const title = document.getElementById('articleTitle').value;
                                const journal = document.getElementById('articleJournal').value;
                                const year = document.getElementById('articleYear').value;
                                const index = document.getElementById('articleIndex').value;
                                const isMainAuthor = document.getElementById('articleIsMainAuthor').checked;
                                const evidenceFile = document.getElementById('articleEvidence').files[0];

                                if (title && journal && year && index) {
                                  handleAddArticle({
                                    title,
                                    journal,
                                    year,
                                    index,
                                    isMainAuthor,
                                    evidence: evidenceFile // Kanıt dosyasını ekle
                                  });

                                  // Form alanlarını temizle
                                  document.getElementById('articleTitle').value = '';
                                  document.getElementById('articleJournal').value = '';
                                  document.getElementById('articleYear').value = '';
                                  document.getElementById('articleIndex').value = '';
                                  document.getElementById('articleIsMainAuthor').checked = false;
                                  document.getElementById('articleEvidence').value = '';
                                } else {
                                  alert("Lütfen tüm zorunlu alanları doldurun!");
                                }
                              }}
                            >
                              Ekle
                            </button>
                          </div>
                        </details>
                    </div>

                    {/* Projeler Bölümü */}
                    <div className="academicSection">
                      <h4>Projeler</h4>

                      {/* Proje Listesi */}
                      {academicActivities.projects.length > 0 ? (
                        academicActivities.projects.map((project, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('projects', index)}
                            >
                              X
                            </button>
                            <p><strong>Başlık:</strong> {project.title}</p>
                            <p><strong>Kurum:</strong> {project.institution}</p>
                            <p><strong>Rol:</strong> {project.role}</p>
                            <p><strong>Tarih:</strong> {project.date}</p>
                            <p><strong>Durum:</strong> {project.status}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz proje eklenmemiş.</p>
                      )}

                      {/* Yeni Proje Ekleme Formu */}
                      <details>
                        <summary>Yeni Proje Ekle</summary>
                        <div className="addForm">
                          <input
                            type="text"
                            id="projectTitle"
                            placeholder="Proje Başlığı"
                          />
                          <input
                            type="text"
                            id="projectInstitution"
                            placeholder="Destekleyen Kurum"
                          />
                          <select id="projectRole">
                            <option value="">Rol Seçiniz</option>
                            <option value="Yürütücü">Yürütücü</option>
                            <option value="Araştırmacı">Araştırmacı</option>
                            <option value="Danışman">Danışman</option>
                            <option value="Bursiyer">Bursiyer</option>
                          </select>
                          <input
                            type="text"
                            id="projectDate"
                            placeholder="Tarih (2020-2023)"
                          />
                          <select id="projectStatus">
                            <option value="">Durum Seçiniz</option>
                            <option value="Devam Ediyor">Devam Ediyor</option>
                            <option value="Tamamlandı">Tamamlandı</option>
                          </select>
                          <button
                            type="button"
                            className="addButton"
                            onClick={() => {
                              const title = document.getElementById('projectTitle').value;
                              const institution = document.getElementById('projectInstitution').value;
                              const role = document.getElementById('projectRole').value;
                              const date = document.getElementById('projectDate').value;
                              const status = document.getElementById('projectStatus').value;

                              if (title && institution && role && date && status) {
                                handleAddProject({ title, institution, role, date, status });

                                // Form alanlarını temizle
                                document.getElementById('projectTitle').value = '';
                                document.getElementById('projectInstitution').value = '';
                                document.getElementById('projectRole').value = '';
                                document.getElementById('projectDate').value = '';
                                document.getElementById('projectStatus').value = '';
                              } else {
                                alert("Lütfen tüm alanları doldurun!");
                              }
                            }}
                          >
                            Ekle
                          </button>
                        </div>
                      </details>
                    </div>

                    {/* Konferanslar Bölümü */}
                    <div className="academicSection">
                      <h4>Konferans Yayınları</h4>

                      {/* Konferans Listesi */}
                      {academicActivities.conferences.length > 0 ? (
                        academicActivities.conferences.map((conference, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('conferences', index)}
                            >
                              X
                            </button>
                            <p><strong>Başlık:</strong> {conference.title}</p>
                            <p><strong>Konferans:</strong> {conference.name}</p>
                            <p><strong>Tür:</strong> {conference.type}</p>
                            <p><strong>Yıl:</strong> {conference.year}</p>
                            <p><strong>Kapsam:</strong> {conference.scope}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz konferans yayını eklenmemiş.</p>
                      )}

                      {/* Yeni Konferans Ekleme Formu */}
                      <details>
                        <summary>Yeni Konferans Yayını Ekle</summary>
                        <div className="addForm">
                          <input
                            type="text"
                            id="confTitle"
                            placeholder="Bildiri Başlığı"
                          />
                          <input
                            type="text"
                            id="confName"
                            placeholder="Konferans Adı"
                          />
                          <select id="confType">
                            <option value="">Tür Seçiniz</option>
                            <option value="Sözlü Sunum (Tam Metin)">Sözlü Sunum (Tam Metin)</option>
                            <option value="Sözlü Sunum (Özet)">Sözlü Sunum (Özet)</option>
                            <option value="Poster">Poster</option>
                          </select>
                          <input
                            type="number"
                            id="confYear"
                            placeholder="Yıl"
                            min="1900"
                            max={new Date().getFullYear()}
                          />
                          <select id="confScope">
                            <option value="">Kapsam Seçiniz</option>
                            <option value="Uluslararası">Uluslararası</option>
                            <option value="Ulusal">Ulusal</option>
                          </select>
                          <button
                            type="button"
                            className="addButton"
                            onClick={() => {
                              const title = document.getElementById('confTitle').value;
                              const name = document.getElementById('confName').value;
                              const type = document.getElementById('confType').value;
                              const year = document.getElementById('confYear').value;
                              const scope = document.getElementById('confScope').value;

                              if (title && name && type && year && scope) {
                                handleAddConference({ title, name, type, year, scope });

                                // Form alanlarını temizle
                                document.getElementById('confTitle').value = '';
                                document.getElementById('confName').value = '';
                                document.getElementById('confType').value = '';
                                document.getElementById('confYear').value = '';
                                document.getElementById('confScope').value = '';
                              } else {
                                alert("Lütfen tüm alanları doldurun!");
                              }
                            }}
                          >
                            Ekle
                          </button>
                        </div>
                      </details>
                    </div>

                    {/* Eğitim Faaliyetleri Bölümü */}
                    <div className="academicSection">
                      <h4>Eğitim Faaliyetleri</h4>

                      {/* Eğitim Faaliyeti Listesi */}
                      {academicActivities.teaching.length > 0 ? (
                        academicActivities.teaching.map((teaching, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('teaching', index)}
                            >
                              X
                            </button>
                            <p><strong>Ders Adı:</strong> {teaching.course}</p>
                            <p><strong>Kurum:</strong> {teaching.institution}</p>
                            <p><strong>Düzey:</strong> {teaching.level}</p>
                            <p><strong>Dönem:</strong> {teaching.term}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz eğitim faaliyeti eklenmemiş.</p>
                      )}

                      {/* Yeni Eğitim Faaliyeti Ekleme Formu */}
                      <details>
                        <summary>Yeni Eğitim Faaliyeti Ekle</summary>
                        <div className="addForm">
                          <input
                            type="text"
                            id="teachCourse"
                            placeholder="Ders Adı"
                          />
                          <input
                            type="text"
                            id="teachInstitution"
                            placeholder="Kurum"
                          />
                          <select id="teachLevel">
                            <option value="">Düzey Seçiniz</option>
                            <option value="Önlisans">Önlisans</option>
                            <option value="Lisans">Lisans</option>
                            <option value="Yüksek Lisans">Yüksek Lisans</option>
                            <option value="Doktora">Doktora</option>
                          </select>
                          <input
                            type="text"
                            id="teachTerm"
                            placeholder="Dönem (2023 Bahar)"
                          />
                          <button
                            type="button"
                            className="addButton"
                            onClick={() => {
                              const course = document.getElementById('teachCourse').value;
                              const institution = document.getElementById('teachInstitution').value;
                              const level = document.getElementById('teachLevel').value;
                              const term = document.getElementById('teachTerm').value;

                              if (course && institution && level && term) {
                                handleAddTeaching({ course, institution, level, term });

                                // Form alanlarını temizle
                                document.getElementById('teachCourse').value = '';
                                document.getElementById('teachInstitution').value = '';
                                document.getElementById('teachLevel').value = '';
                                document.getElementById('teachTerm').value = '';
                              } else {
                                alert("Lütfen tüm alanları doldurun!");
                              }
                            }}
                          >
                            Ekle
                          </button>
                        </div>
                      </details>
                    </div>

                    {/* Atıflar Bölümü */}
                    <div className="academicSection">
                      <h4>Atıflar</h4>

                      {/* Atıf Listesi */}
                      {academicActivities.citations.length > 0 ? (
                        academicActivities.citations.map((citation, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('citations', index)}
                            >
                              X
                            </button>
                            <p><strong>Atıf Yapılan Eser:</strong> {citation.referencedWork}</p>
                            <p><strong>Atıf Yapan Eser:</strong> {citation.citingWork}</p>
                            <p><strong>Yıl:</strong> {citation.year}</p>
                            <p><strong>İndeks:</strong> {citation.index}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz atıf eklenmemiş.</p>
                      )}

                      {/* Yeni Atıf Ekleme Formu */}
                      <details>
                        <summary>Yeni Atıf Ekle</summary>
                        <div className="addForm">
                          <input
                            type="text"
                            id="citationReferencedWork"
                            placeholder="Atıf Yapılan Eseriniz"
                          />
                          <input
                            type="text"
                            id="citationCitingWork"
                            placeholder="Atıf Yapan Eser"
                          />
                          <input
                            type="number"
                            id="citationYear"
                            placeholder="Atıf Yılı"
                            min="1900"
                            max={new Date().getFullYear()}
                          />
                          <select id="citationIndex">
                            <option value="">İndeks Seçiniz</option>
                            <option value="SCI-E">SCI-E</option>
                            <option value="SSCI">SSCI</option>
                            <option value="AHCI">AHCI</option>
                            <option value="ESCI">ESCI</option>
                            <option value="Scopus">Scopus</option>
                            <option value="Diğer">Diğer</option>
                          </select>
                          <button
                            type="button"
                            className="addButton"
                            onClick={() => {
                              const referencedWork = document.getElementById('citationReferencedWork').value;
                              const citingWork = document.getElementById('citationCitingWork').value;
                              const year = document.getElementById('citationYear').value;
                              const index = document.getElementById('citationIndex').value;

                              if (referencedWork && citingWork && year && index) {
                                handleAddCitation({ referencedWork, citingWork, year, index });

                                // Form alanlarını temizle
                                document.getElementById('citationReferencedWork').value = '';
                                document.getElementById('citationCitingWork').value = '';
                                document.getElementById('citationYear').value = '';
                                document.getElementById('citationIndex').value = '';
                              } else {
                                alert("Lütfen tüm alanları doldurun!");
                              }
                            }}
                          >
                            Ekle
                          </button>
                        </div>
                      </details>
                    </div>

                    {/* Patent/Faydalı Model Bölümü */}
                    <div className="academicSection">
                      <h4>Patent / Faydalı Model</h4>

                      {/* Patent Listesi */}
                      {academicActivities.patents.length > 0 ? (
                        academicActivities.patents.map((patent, index) => (
                          <div key={index} className="academicItemCard">
                            <button
                              type="button"
                              className="removeButton"
                              onClick={() => handleRemoveActivity('patents', index)}
                            >
                              X
                            </button>
                            <p><strong>Başlık:</strong> {patent.title}</p>
                            <p><strong>Tür:</strong> {patent.type}</p>
                            <p><strong>Numarası:</strong> {patent.number}</p>
                            <p><strong>Tarih:</strong> {patent.date}</p>
                            <p><strong>Kapsam:</strong> {patent.scope}</p>
                          </div>
                        ))
                      ) : (
                        <p className="noActivitiesMessage">Henüz patent/faydalı model eklenmemiş.</p>
                      )}

                      {/* Yeni Patent Ekleme Formu */}
                      <details>
                        <summary>Yeni Patent / Faydalı Model Ekle</summary>
                        <div className="addForm">
                          <input
                            type="text"
                            id="patentTitle"
                            placeholder="Patent Başlığı"
                          />
                          <select id="patentType">
                            <option value="">Tür Seçiniz</option>
                            <option value="Patent">Patent</option>
                            <option value="Faydalı Model">Faydalı Model</option>
                            <option value="Tasarım Tescil">Tasarım Tescil</option>
                          </select>
                          <input
                            type="text"
                            id="patentNumber"
                            placeholder="Patent Numarası"
                          />
                          <input
                            type="text"
                            id="patentDate"
                            placeholder="Tarih (YY-AA-GG)"
                          />
                          <select id="patentScope">
                            <option value="">Kapsam Seçiniz</option>
                            <option value="Uluslararası">Uluslararası</option>
                            <option value="Ulusal">Ulusal</option>
                          </select>
                          <button
                            type="button"
                            className="addButton"
                            onClick={() => {
                              const title = document.getElementById('patentTitle').value;
                              const type = document.getElementById('patentType').value;
                              const number = document.getElementById('patentNumber').value;
                              const date = document.getElementById('patentDate').value;
                              const scope = document.getElementById('patentScope').value;

                              if (title && type && number && date && scope) {
                                handleAddPatent({ title, type, number, date, scope });

                                // Form alanlarını temizle
                                document.getElementById('patentTitle').value = '';
                                document.getElementById('patentType').value = '';
                                document.getElementById('patentNumber').value = '';
                                document.getElementById('patentDate').value = '';
                                document.getElementById('patentScope').value = '';
                              } else {
                                alert("Lütfen tüm alanları doldurun!");
                              }
                            }}
                          >
                            Ekle
                          </button>
                        </div>
                      </details>
                    </div>

                    <div className="navButtons">
                      <button
                        type="button"
                        className="backButton"
                        onClick={() => handleTabChange('kisisel-bilgiler')}
                      >
                        Geri
                      </button>
                      <button
                        type="button"
                        className="submitButton"
                        onClick={() => handleTabChange('onizleme')}
                      >
                        Devam Et
                      </button>
                    </div>
                  </div>
                )}{/* 3. Önizleme ve Gönderim Tab */}
{activeTab === 'onizleme' && (
  <div>
    <h3 className="subtitle">Başvuru Önizlemesi</h3>
    <p>Lütfen başvuru bilgilerinizi kontrol edin. Bilgilerinizin doğru ve eksiksiz olduğundan emin olduktan sonra başvurunuzu gönderebilirsiniz.</p>

    <div className="previewSection">
      <h4>Kişisel Bilgiler ve Yüklenen Belgeler</h4>
      <ul>
        {requiredDocs.map(doc => (
          <li key={doc.key}>
            <strong>{doc.label}:</strong> {applicationData[doc.key] ? applicationData[doc.key].name : 'Yüklenmedi'}
          </li>
        ))}
      </ul>
    </div>

    <div className="previewSection">
      <h4>Akademik Faaliyetler Özeti</h4>

      {/* Toplam sayılar */}
      <div className="summaryCounts" style={{marginBottom: '1rem', display: 'flex', flexWrap: 'wrap', gap: '1rem'}}>
        <div className="countBox" style={{padding: '0.75rem', border: '1px solid #eee', borderRadius: '8px', background: '#f9f9f9', textAlign: 'center', flex: '1'}}>
          <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#009944'}}>{academicActivities.articles.length}</div>
          <div>Makale</div>
        </div>
        <div className="countBox" style={{padding: '0.75rem', border: '1px solid #eee', borderRadius: '8px', background: '#f9f9f9', textAlign: 'center', flex: '1'}}>
          <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#009944'}}>{academicActivities.projects.length}</div>
          <div>Proje</div>
        </div>
        <div className="countBox" style={{padding: '0.75rem', border: '1px solid #eee', borderRadius: '8px', background: '#f9f9f9', textAlign: 'center', flex: '1'}}>
          <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#009944'}}>{academicActivities.conferences.length}</div>
          <div>Konferans</div>
        </div>
        <div className="countBox" style={{padding: '0.75rem', border: '1px solid #eee', borderRadius: '8px', background: '#f9f9f9', textAlign: 'center', flex: '1'}}>
          <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#009944'}}>{academicActivities.teaching.length}</div>
          <div>Eğitim</div>
        </div>
      </div>

      {/* Makaleler Önizleme */}
      {academicActivities.articles.length > 0 && (
        <div className="previewSubsection">
          <h5>Makaleler</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Başlık</th>
                <th>Dergi</th>
                <th>Yıl</th>
                <th>İndeks</th>
                <th>Başlıca Yazar</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.articles.map((article, index) => (
                <tr key={index}>
                  <td>{article.title}</td>
                  <td>{article.journal}</td>
                  <td>{article.year}</td>
                  <td>{article.index}</td>
                  <td>{article.isMainAuthor ? 'Evet' : 'Hayır'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Projeler Önizleme */}
      {academicActivities.projects.length > 0 && (
        <div className="previewSubsection">
          <h5>Projeler</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Başlık</th>
                <th>Kurum</th>
                <th>Rol</th>
                <th>Tarih</th>
                <th>Durum</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.projects.map((project, index) => (
                <tr key={index}>
                  <td>{project.title}</td>
                  <td>{project.institution}</td>
                  <td>{project.role}</td>
                  <td>{project.date}</td>
                  <td>{project.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Konferanslar Önizleme */}
      {academicActivities.conferences.length > 0 && (
        <div className="previewSubsection">
          <h5>Konferans Yayınları</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Başlık</th>
                <th>Konferans</th>
                <th>Tür</th>
                <th>Yıl</th>
                <th>Kapsam</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.conferences.map((conference, index) => (
                <tr key={index}>
                  <td>{conference.title}</td>
                  <td>{conference.name}</td>
                  <td>{conference.type}</td>
                  <td>{conference.year}</td>
                  <td>{conference.scope}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Eğitim Faaliyetleri Önizleme */}
      {academicActivities.teaching.length > 0 && (
        <div className="previewSubsection">
          <h5>Eğitim Faaliyetleri</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Ders Adı</th>
                <th>Kurum</th>
                <th>Düzey</th>
                <th>Dönem</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.teaching.map((teaching, index) => (
                <tr key={index}>
                  <td>{teaching.course}</td>
                  <td>{teaching.institution}</td>
                  <td>{teaching.level}</td>
                  <td>{teaching.term}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Atıflar Önizleme */}
      {academicActivities.citations.length > 0 && (
        <div className="previewSubsection">
          <h5>Atıflar</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Atıf Yapılan Eser</th>
                <th>Atıf Yapan Eser</th>
                <th>Yıl</th>
                <th>İndeks</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.citations.map((citation, index) => (
                <tr key={index}>
                  <td>{citation.referencedWork}</td>
                  <td>{citation.citingWork}</td>
                  <td>{citation.year}</td>
                  <td>{citation.index}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Patent/Faydalı Model Önizleme */}
      {academicActivities.patents.length > 0 && (
        <div className="previewSubsection">
          <h5>Patent / Faydalı Model</h5>
          <table className="previewTable">
            <thead>
              <tr>
                <th>Başlık</th>
                <th>Tür</th>
                <th>Numarası</th>
                <th>Tarih</th>
                <th>Kapsam</th>
              </tr>
            </thead>
            <tbody>
              {academicActivities.patents.map((patent, index) => (
                <tr key={index}>
                  <td>{patent.title}</td>
                  <td>{patent.type}</td>
                  <td>{patent.number}</td>
                  <td>{patent.date}</td>
                  <td>{patent.scope}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Eğer hiç akademik faaliyet eklenmemişse */}
      {academicActivities.articles.length === 0 &&
       academicActivities.projects.length === 0 &&
       academicActivities.conferences.length === 0 &&
       academicActivities.teaching.length === 0 &&
       academicActivities.citations.length === 0 &&
       academicActivities.patents.length === 0 && (
        <p className="noActivitiesMessage">Henüz akademik faaliyet eklenmemiş.</p>
      )}
    </div>

    {/* Otomatik Oluşturulan Tablolar ve Puanlar - Tablo 5 */}
    <div className="previewSection">
      <h4>KOÜ Akademik Değerlendirme Puanı</h4>
      <p>Aşağıdaki puan değerlendirmesi başvurduğunuz kadro türüne göre Kocaeli Üniversitesi Öğretim Üyeliği Atama ve Yükseltme Yönergesi'ne göre otomatik olarak hesaplanmıştır.</p>

      {/* Örnek Puan Tablosu */}
      <table className="previewTable">
        <thead>
          <tr>
            <th>Faaliyet Türü</th>
            <th>Sayı</th>
            <th>Puanı</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Makaleler (A.1-A.4)</td>
            <td>{academicActivities.articles.filter(a => ['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length}</td>
            <td>{academicActivities.articles.filter(a => ['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length * 40}</td>
          </tr>
          <tr>
            <td>Makaleler (A.5-A.8)</td>
            <td>{academicActivities.articles.filter(a => !['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length}</td>
            <td>{academicActivities.articles.filter(a => !['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length * 20}</td>
          </tr>
          <tr>
            <td>Projeler (H.1-H.12)</td>
            <td>{academicActivities.projects.length}</td>
            <td>{academicActivities.projects.length * 30}</td>
          </tr>
          <tr>
            <td>Bilimsel Toplantılar (B.1-B.12)</td>
            <td>{academicActivities.conferences.length}</td>
            <td>{academicActivities.conferences.length * 10}</td>
          </tr>
          <tr>
            <td>Eğitim Faaliyetleri (E.1-E.4)</td>
            <td>{academicActivities.teaching.length}</td>
            <td>{academicActivities.teaching.length * 5}</td>
          </tr>
          <tr>
            <td>Atıflar (D.1-D.6)</td>
            <td>{academicActivities.citations.length}</td>
            <td>{academicActivities.citations.length * 3}</td>
          </tr>
          <tr>
            <td>Patent/Faydalı Model (G.1-G.8)</td>
            <td>{academicActivities.patents.length}</td>
            <td>{academicActivities.patents.length * 50}</td>
          </tr>
          <tr style={{fontWeight: 'bold', backgroundColor: '#e8f5e9'}}>
            <td>Toplam Puan</td>
            <td></td>
            <td>
              {academicActivities.articles.filter(a => ['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length * 40 +
               academicActivities.articles.filter(a => !['SCI', 'SCI-E', 'SSCI', 'AHCI'].includes(a.index)).length * 20 +
               academicActivities.projects.length * 30 +
               academicActivities.conferences.length * 10 +
               academicActivities.teaching.length * 5 +
               academicActivities.citations.length * 3 +
               academicActivities.patents.length * 50}
            </td>
          </tr>
        </tbody>
      </table>

      <div style={{marginTop: '1rem'}}>
        <p style={{fontStyle: 'italic', fontSize: '0.9rem', color: '#666'}}>
          Not: Bu puan hesaplaması tahmini bir değerlendirmedir. Başvurunuz Kocaeli Üniversitesi Atama Komisyonu ve jüri üyeleri tarafından değerlendirilerek nihai puanlaması yapılacaktır.
        </p>
      </div>
    </div>

    {/* Onay kutusu */}
    <div className="confirmationSection" style={{marginTop: '1.5rem', padding: '1rem', border: '1px solid #eee', borderRadius: '8px', backgroundColor: '#f9f9f9'}}>
      <div style={{display: 'flex', alignItems: 'flex-start', marginBottom: '1rem'}}>
        <input
          type="checkbox"
          id="confirmAccuracy"
          style={{marginRight: '10px', marginTop: '4px'}}
          required
        />
        <label htmlFor="confirmAccuracy" style={{fontSize: '0.9rem'}}>
          Yukarıda belirtilen bilgilerin doğru ve eksiksiz olduğunu, herhangi bir yanlış beyan durumunda başvurumun reddedilebileceğini kabul ve beyan ederim.
        </label>
      </div>
    </div>

    {/* Hata mesajı */}
    {error && (
      <div className="errorMessage">
        <p><strong>Hata:</strong> {error}</p>
      </div>
    )}

    <div className="navButtons">
      <button
        type="button"
        className="backButton"
        onClick={() => handleTabChange('akademik-faaliyetler')}
      >
        Geri
      </button>
      <button
        type="submit"
        className="submitButton"
        disabled={submitting}
      >
        {submitting ? 'Gönderiliyor...' : 'Başvuruyu Gönder'}
      </button>
    </div>
  </div>
)}</form>
</div>
) : (
<div className="section" style={{borderColor: 'green', color: 'green', textAlign: 'center', padding: '2rem'}}>
  <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" style={{margin: '0 auto 1rem'}}>
    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
    <polyline points="22 4 12 14.01 9 11.01"></polyline>
  </svg>
  <h3 style={{marginBottom: '1rem'}}>Başvurunuz Başarıyla Alınmıştır</h3>
  <p>Teşekkür ederiz! Başvurunuz sistemimize kaydedilmiştir.</p>
  <p>Başvurunuzun durumunu <a href="/basvurularim" style={{color: '#009944', textDecoration: 'underline'}}>Başvurularım</a> sayfasından takip edebilirsiniz.</p>
  <p style={{fontSize: '0.9rem', marginTop: '1rem', color: '#666'}}>3 saniye içinde yönlendirileceksiniz...</p>
</div>
)}
</div>
</div>
</>
);
};

export default Apply;import React, { useState, useEffect } from "react";
// useNavigate artık burada gerekmeyebilir, çünkü yetkisiz erişimi ProtectedRoute hallediyor.
// import { useNavigate } from "react-router-dom";
import UserNavbar from "../../components/navbars/UserNavbar.jsx";
import { useAuth } from "../../context/AuthContext"; // AuthContext'i import et
import api from '../../services/api';

// SABİT VERİLERİ SİLİN (ilanlar, duyurular, basvurular, predefinedUsers)

const UserDashboard = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const { user } = useAuth(); // Kullanıcı bilgisini Context'ten alıyoruz
  const [announcements, setAnnouncements] = useState([]);
  const [latestAnnouncements, setLatestAnnouncements] = useState([]);
  const [applications, setApplications] = useState([]); // Başvurular için state
  const [loading, setLoading] = useState(true); // Veri yükleme durumu
  const [error, setError] = useState(null); // Hata durumu
  // const navigate = useNavigate(); // Artık burada navigate'e gerek yok

  useEffect(() => {
    // localStorage kontrolünü ve navigate('/login') çağrısını kaldırın.
    // Bu kontrolü ProtectedRoute yapmalı.

    // Verileri API'den çek
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [announcementsRes, listingsRes, applicationsRes] = await Promise.all([
          api.get('/bildirimler/'),
          api.get('/ilanlar/', { params: { aktif: true } }),
          api.get('/basvurular/')
        ]);
        setAnnouncements(announcementsRes.data.results || announcementsRes.data);
        setLatestAnnouncements(listingsRes.data.results || listingsRes.data);
        setApplications(applicationsRes.data.results || applicationsRes.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []); // Sadece component mount olduğunda çalışır

  // Takvim fonksiyonları (aynı kalabilir)
  const daysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();
  const handlePrevMonth = () => {
    setCurrentDate(
      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1)
    );
  };
  const handleNextMonth = () => {
    setCurrentDate(
      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1)
    );
  };

  const renderCalendar = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1).getDay();
    const days = daysInMonth(year, month);

    const calendar = [];
    // Takvimin başına boş günler ekle (Pazartesi'den başlaması için ayar gerekebilir)
    let startDay = firstDay === 0 ? 6 : firstDay -1; // Haftayı Pazartesi'den başlat
    for (let i = 0; i < startDay; i++) {
      calendar.push(<div key={`empty-${i}`} className="calendar-day empty"></div>);
    }

    // Tarih karşılaştırması için pad fonksiyonu
    const pad = (n) => n.toString().padStart(2, '0');

    for (let day = 1; day <= days; day++) {
      const dayDate = new Date(year, month, day);
      const currentDateStr = `${dayDate.getFullYear()}-${pad(dayDate.getMonth() + 1)}-${pad(dayDate.getDate())}`;

      // API'den gelen başvuruları filtrele (backend 'basvuru_tarihi' formatına dikkat!)
      const dailyApplications = applications.filter(
        (b) => {
          if (!b.basvuru_tarihi) return false;
          const d = new Date(b.basvuru_tarihi);
          const bDateStr = `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;
          return bDateStr === currentDateStr;
        }
      );

      calendar.push(
        <div key={day} className="calendar-day">
          <div className="day-number">{day}</div>
          {dailyApplications.map((app) => (
            <div key={app.id} className={`application ${app.durum ? app.durum.toLowerCase() : 'bilinmiyor'}`}>
               {/* Backend'den PDF URL gelmiyorsa linki kaldırın veya düzenleyin */}
               {app.durum || 'Detay'}
               {/* Eğer PDF URL varsa:
               <a href={app.pdf_url} target="_blank" rel="noopener noreferrer">
                 {app.durum}
               </a>
               */}
            </div>
          ))}
        </div>
      );
    }
    return calendar;
  };


  // Yükleme veya Hata Durumlarını Göster
  if (loading) {
      return <div><UserNavbar /> <div className="container">Yükleniyor...</div></div>;
  }

  if (error) {
       return <div><UserNavbar /> <div className="container">Hata: {error}</div></div>;
  }

  // Veri başarıyla yüklendiyse render et
  return (
    <div className="dashboard">
      <UserNavbar /> {/* Navbar */}
      {/* user bilgisini localStorage yerine Context'ten alıyoruz */}
      {user && (
        <div className="user-welcome" style={{ padding: '0 20px' }}> {/* Padding ekledim */}
          <h2>Hoş geldiniz, {user.first_name} {user.last_name}</h2>
        </div>
      )}
      <div className="container" style={{ padding: '0 20px 20px 20px' }}> {/* Padding ekledim */}
        <div className="calendar-container">
          <div className="calendar-header">
            <button onClick={handlePrevMonth}>&lt;</button>
            <h2>
              {currentDate.toLocaleString("tr-TR", {
                year: "numeric",
                month: "long",
              })}
            </h2>
            <button onClick={handleNextMonth}>&gt;</button>
          </div>
          <div className="calendar-grid">
            {["Pzt", "Sal", "Çrş", "Prş", "Cum", "Cmt", "Paz"].map((day) => (
              <div key={day} className="calendar-day-header">{day}</div>
            ))}
            {renderCalendar()}
          </div>
        </div>
        <div className="sidebar">
          <div className="announcements">
            <h3>Duyurular (Bildirimler)</h3> {/* Başlığı güncelledim */}
            <ul>
              {announcements.length > 0 ? announcements.map((d) => (
                <li key={d.id}>
                  {/* Backend'den gelen bildirim modeline göre alan adlarını güncelleyin */}
                  <strong>{d.baslik}:</strong> {d.mesaj}
                </li>
              )) : <li>Gösterilecek duyuru yok.</li>}
            </ul>
          </div>
          <div className="latest-announcements">
            <h3>Aktif İlanlar</h3> {/* Başlığı güncelledim */}
            <ul>
               {/* Backend'den gelen ilan modeline göre alan adlarını güncelleyin */}
              {latestAnnouncements.length > 0 ? latestAnnouncements.map((i) => (
                <li key={i.id}>
                   {/* İlanın kadro tipi yerine başlığını göstermek daha anlamlı olabilir */}
                  <strong>{i.baslik}:</strong> {i.kadro_tipi_ad || i.kadro_tipi} - Bitiş: {new Date(i.bitis_tarihi).toLocaleDateString('tr-TR')}
                  {/* Belki ilanın detayına link verilebilir */}
                </li>
              )) : <li>Aktif ilan bulunmuyor.</li>}
            </ul>
          </div>
        </div>
      </div>
      {/* CSS Kodları (Değişiklik Yok) */}
      <style>
        {`
          /* CSS kodları buraya eklendi */
          .user-navbar {
              width: 100%;
              position: relative;
              z-index: 10;
              background-color: white;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          }

          .dashboard {
              display: flex;
              flex-direction: column;
              align-items: stretch;
              width: 100%;
              margin: 0 auto;
              padding: 0;
              box-sizing: border-box;
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              background-color: #f4f6f9;
              gap: 20px;
          }

          .container {
              display: flex;
              flex-direction: row;
              gap: 20px;
              width: 100%;
          }

          .user-welcome {
              width: 100%;
              margin-bottom: 20px;
          }

          .announcements, .latest-announcements {
              background-color: white;
              border-radius: 10px;
              box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
              padding: 20px;
          }

          .announcements:hover, .latest-announcements:hover {
              transform: translateY(-5px);
          }

          .announcements h3, .latest-announcements h3 {
              margin-bottom: 15px;
              border-bottom: 2px solid #009944;
              padding-bottom: 10px;
              font-size: 20px;
              color: #009944;
          }

          .announcements ul, .latest-announcements ul {
              list-style: none;
              padding: 0;
              margin: 0;
              max-height: 300px;
              overflow-y: auto;
          }

          .announcements li, .latest-announcements li {
              margin-bottom: 15px;
              padding-bottom: 10px;
              border-bottom: 1px solid #eee;
              font-size: 16px;
              color: #555;
              padding: 10px;
              border-radius: 4px;
              transition: background-color 0.1s ease-in-out;
              cursor: pointer;
          }

          .announcements li:hover, .latest-announcements li:hover {
              background-color: #e6f0e6;
          }

          .calendar-container {
              flex: 2;
              background-color: white;
              border-radius: 10px;
              padding: 20px;
              box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
          }

          .calendar-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
          }

          .calendar-header h2 {
              font-size: 20px;
              color: #009944;
          }

          .calendar-header button {
              background-color: #009944;
              color: white;
              border: none;
              border-radius: 5px;
              padding: 10px 15px;
              font-size: 16px;
              cursor: pointer;
              transition: background-color 0.3s ease;
          }

          .calendar-header button:hover {
              background-color: #007c39;
          }

          .calendar-grid {
              display: grid;
              grid-template-columns: repeat(7, 1fr);
              gap: 10px;
          }

          .calendar-day-header {
              font-weight: bold;
              text-align: center;
              padding: 10px;
              background-color: #e6f0e6;
              border-radius: 4px;
              color: #009944;
          }

          .calendar-day {
              text-align: center;
              padding: 15px;
              border-radius: 4px;
              background-color: #f0f0f0;
              transition: background-color 0.2s ease-in-out;
              position: relative;
              cursor: pointer;
          }

          .calendar-day:hover {
              background-color: #d9f2d9;
          }

          .calendar-day.empty {
              background-color: transparent;
          }

          .calendar-day .day-number {
              font-weight: bold;
              margin-bottom: 5px;
          }

          .application {
              font-size: 12px;
              margin-top: 5px;
              padding: 5px;
              border-radius: 4px;
              text-align: center;
              color: white;
              font-weight: bold;
          }

          .application.beklemede {
              background-color: #ffc107;
          }

          .application.onaylandı {
              background-color: #28a745;
          }

          .application.reddedildi {
              background-color: #dc3545;
          }
        `}
      </style>
    </div>
  );
};

export default UserDashboard;import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import UserNavbar from "../../components/navbars/UserNavbar";
import api from '../../services/api';

// --- IlanCard Bileşeni ---
const IlanCard = ({ ilan }) => {
  const navigate = useNavigate();

  // Yönlendirmeyi URL parametresi ile yap
  const handleRedirect = () => {
    // localStorage.setItem("ilanId", ilan.id); // localStorage KULLANMA
    navigate(`/apply/${ilan.id}`); // /apply/:ilanId rotasına yönlendir
  };

  // Tarih formatlama (isteğe bağlı)
  const formatDate = (dateString) => {
    if (!dateString) return "";
    try {
      return new Date(dateString).toLocaleDateString("tr-TR");
    } catch {
      return dateString;
    }
  };
  return (
    <div className="ilan-card">
      <h2 className="ilan-title">{ilan.baslik || ilan.kadro_tipi_ad || ilan.unvan || 'Başlık Yok'}</h2>
      <p className="ilan-detail">{ilan.birim_ad || ilan.birim?.ad || ilan.birim || 'Birim Belirtilmemiş'}</p>
      <p className="ilan-detail">{ilan.bolum_ad || ilan.bolum?.ad || ilan.bolum || 'Bölüm Belirtilmemiş'}</p>
      {/* <p className="ilan-detail">Anabilim Dalı: {ilan.anabilim_dali_ad || ilan.anabilim_dali?.ad || ''}</p> */}
      <p className="ilan-dates">
        Başvuru Tarihleri: {formatDate(ilan.baslangic_tarihi)} - {formatDate(ilan.bitis_tarihi)}
      </p>
      {/* İlanın aktif olup olmadığını gösterebiliriz */}
      {/* <p>Durum: {ilan.aktif ? 'Aktif' : 'Pasif'}</p> */}
      <button className="ilan-button" onClick={handleRedirect}>
        Detayları Gör ve Başvur
      </button>
    </div>
  );
};


// --- IlanListesi Bileşeni ---
const IlanListesi = () => {
  const [ilanlarData, setIlanlarData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filtre, setFiltre] = useState("");

  useEffect(() => {
    setLoading(true);
    setError(null);
    api.get('/ilanlar/')
      .then(res => {
        setIlanlarData(res.data.results || res.data);
      })
      .catch(err => {
        setError(err.message);
      })
      .finally(() => {
        setLoading(false);
      });
  }, []);

  // Filtreleme işlemini API'den gelen veri üzerinde yap
  const filtrelenmisIlanlar = ilanlarData.filter(
    (ilan) => {
        // API'den gelen gerçek alan adlarına göre filtrele
        const searchString = filtre.toLowerCase();
        return (
            (ilan.baslik && ilan.baslik.toLowerCase().includes(searchString)) ||
            (ilan.kadro_tipi_ad && ilan.kadro_tipi_ad.toLowerCase().includes(searchString)) || // veya ilan.kadro_tipi?.tip
            (ilan.birim_ad && ilan.birim_ad.toLowerCase().includes(searchString)) || // veya ilan.birim?.ad
            (ilan.bolum_ad && ilan.bolum_ad.toLowerCase().includes(searchString)) // veya ilan.bolum?.ad
        );
    }
  );

  if (loading) {
    return <div className="ilan-listesi"><p>İlanlar yükleniyor...</p></div>;
  }

  if (error) {
    return <div className="ilan-listesi"><p>Hata: {error}</p></div>;
  }

  return (
    <div className="ilan-listesi">
      <h1 className="ilan-header">Akademik İlanlar</h1>
      <input
        type="text"
        placeholder="Başlık, unvan, birim veya bölüm ara..." // Placeholder güncellendi
        className="ilan-search"
        value={filtre}
        onChange={(e) => setFiltre(e.target.value)}
      />
      <div className="ilan-grid">
        {filtrelenmisIlanlar.length > 0 ? (
             filtrelenmisIlanlar.map((ilan) => (
                <IlanCard key={ilan.id} ilan={ilan} />
             ))
         ) : (
             <p>Filtreye uygun ilan bulunamadı.</p>
         )}
      </div>
    </div>
  );
};


// --- Ana Listings Bileşeni ---
const Listings = () => {
  return (
    <>
      <style>
        {`
          * {
            box-sizing: border-box;
          }
          .listings-page {
            background-color: #f4f6f9;
            min-height: 100vh;
            padding: 20px;
          }

          .listings-container {
            max-width: 1200px;
            padding: 50px;
            margin: 20px auto;
          }

          .ilan-listesi {
            background-color: #f4f6f9;
            padding: 20px;
            border-radius: 10px;
          }

          .ilan-header {
            font-size: 24px;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
          }

          .ilan-search {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          }

          .ilan-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
          }

          .ilan-card {
            background-color: white;
            border: 1px solid #eee;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s ease, transform 0.3s ease;
          }

          .ilan-card:hover {
            background-color: #e6f0e6;
            transform: translateY(-5px);
          }

          .ilan-title {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
          }

          .ilan-detail {
            font-size: 16px;
            color: #555;
            margin-bottom: 5px;
          }

          .ilan-dates {
            font-size: 14px;
            color: #666;
            margin-top: 10px;
          }

          .ilan-button {
            display: inline-block;
            margin-top: 15px;
            padding: 10px 20px;
            background-color: #009944;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
          }

          .ilan-button:hover {
            background-color: #007c39;
          }
        `}
      </style>
      <div className="listings-page">
        <UserNavbar />
        <div className="listings-container">
          <IlanListesi />
        </div>
      </div>
    </>
  );
};

export default Listings;import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

export default function Logout() {
  const navigate = useNavigate();
  const { logout } = useAuth();

  useEffect(() => {
    logout();
    navigate('/login');
  }, [logout, navigate]);

  return null;
}
import React, { useState, useEffect } from "react";
// useNavigate burada doğrudan kullanılmıyor, kaldırılabilir
// import { useNavigate } from "react-router-dom";
import UserNavbar from "../../components/navbars/UserNavbar";
import { FaFileAlt } from "react-icons/fa";
// AuthContext'i kullanmıyoruz çünkü backend zaten kullanıcıya göre filtreliyor olmalı
// import { useAuth } from "../../context/AuthContext";
import api from '../../services/api';

// Sabit verileri kaldırıyoruz
// const academicAnnouncements = [ ... ];
// const myApplications = [ ... ];

const statusColors = {
  Beklemede: "#ffc107", // Sarı
  Onaylandı: "#28a745", // Yeşil
  Reddedildi: "#dc3545", // Kırmızı
  // Backend'den gelebilecek diğer durumlar için renkler eklenebilir
  bilinmiyor: "#6c757d", // Gri
};

export default function MyApplications() {
  const [applications, setApplications] = useState([]); // API'den gelen başvurular
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [openId, setOpenId] = useState(null); // Hangi modalın açık olduğu

  useEffect(() => {
    setLoading(true);
    setError(null);
    api.get('/basvurular/')
      .then(res => {
        setApplications(res.data.results || res.data);
      })
      .catch(err => {
        setError(err.message);
      })
      .finally(() => {
        setLoading(false);
      });
  }, []);

  const toggleDialog = (id) => {
    setOpenId(prev => (prev === id ? null : id));
  };

  // Tarih formatlama (isteğe bağlı)
  const formatDate = (dateString) => {
    if (!dateString) return "";
    try {
      return new Date(dateString).toLocaleString("tr-TR", {
          year: 'numeric', month: 'long', day: 'numeric'
      });
    } catch {
      return dateString;
    }
  };


  // --- Yükleme ve Hata Durumları ---
  if (loading) {
    return (
      <>
        <UserNavbar />
        <div className="container"><p>Başvurularınız yükleniyor...</p></div>
        {/* Stil etiketi burada da olabilir veya global CSS'e taşınabilir */}
        <style>{` /* ... CSS kodları ... */ `}</style>
      </>
    );
  }

  if (error) {
    return (
      <>
        <UserNavbar />
        <div className="container">
           <h1 className="title">Başvurularım</h1>
           <p style={{color:'red'}}>Hata: {error}</p>
        </div>
        <style>{` /* ... CSS kodları ... */ `}</style>
      </>
    );
  }

  // --- Başvuruları Listeleme ---
  return (
    <>
      <UserNavbar />
      <div className="container">
        <h1 className="title">Başvurularım</h1>
        <div className="grid">
          {applications.length > 0 ? applications.map(app => {
            // Başvuruyla ilişkili ilan verisine erişim (nested olduğunu varsayıyoruz)
            // Backend Serializer'ınızın 'ilan' detayını döndürdüğünden emin olun.
            const announcement = app.ilan; // API yanıtınızda ilan detayları 'ilan' anahtarı altında varsayılıyor
            const isOpen = openId === app.id; // Başvurunun ID'si app.id varsayılıyor

            // Durum için renk belirle, bilinmeyen durumlar için varsayılan renk
            const statusColor = statusColors[app.durum] || statusColors.bilinmiyor;

            return (
              <div
                key={app.id} // Başvurunun ID'si
                className="card"
                style={{ borderLeftColor: statusColor }}
              >
                <div>
                  {/* İlan bilgilerini nested objeden al (alan adları serializer'a göre değişebilir) */}
                  <h2>{announcement?.baslik || 'İlan Başlığı Yok'}</h2>
                  <p className="text-gray">{announcement?.birim_ad || announcement?.birim?.ad || 'Birim Yok'}</p>
                  <p className="text-gray">{announcement?.bolum_ad || announcement?.bolum?.ad || 'Bölüm Yok'}</p>
                  <p className="text-gray-light">
                      Başvuru Tarihleri: {formatDate(announcement?.baslangic_tarihi)} - {formatDate(announcement?.bitis_tarihi)}
                  </p>
                  <p className="text-gray-light">
                      Başvurduğunuz Tarih: {formatDate(app.basvuru_tarihi)}
                  </p>
                  <p className="text-gray-light status">
                      Durum: <span style={{ color: statusColor }}>{app.durum || 'Bilinmiyor'}</span>
                  </p>
                </div>
                <button className="btn mt-4" onClick={() => toggleDialog(app.id)}>Yüklediğim Belgeleri Gör</button>

                {/* Modal */}
                {isOpen && (
                  <div className="modal-overlay" onClick={() => setOpenId(null)}>
                    <div className="modal" onClick={(e) => e.stopPropagation()}>
                      <div className="modal-header">
                        <h2>Yüklenen Belgeler</h2>
                        <button
                          className="close-btn"
                          onClick={() => setOpenId(null)}
                          aria-label="Close"
                        >
                          &times;
                        </button>
                      </div>
                      <ul className="document-list">
                        {/*
                          Backend'den gelen dosya URL'lerini burada listele.
                          Varsayım: Başvuru objesi içinde *_url ile biten alanlar var.
                          Backend Serializer'ınızın bu URL'leri sağladığından emin olun.
                          (settings.py'da MEDIA_URL doğru ayarlanmalı)
                        */}
                        {app.ozgecmis_dosyasi ? (
                          <li>
                            <a
                              href={app.ozgecmis_dosyasi}
                              download={app.ozgecmis_dosyasi.split('/').pop()}
                            >
                              <FaFileAlt style={{ marginRight: "6px", color: "#009944" }} /> Özgeçmiş
                            </a>
                          </li>
                        ) : null}
                        {app.diploma_belgeleri ? (
                          <li>
                            <a
                              href={app.diploma_belgeleri}
                              download={app.diploma_belgeleri.split('/').pop()}
                            >
                              <FaFileAlt style={{ marginRight: "6px", color: "#009944" }} /> Diploma Belgeleri
                            </a>
                          </li>
                        ) : null}
                        {app.yabanci_dil_belgesi ? (
                          <li>
                            <a
                              href={app.yabanci_dil_belgesi}
                              download={app.yabanci_dil_belgesi.split('/').pop()}
                            >
                              <FaFileAlt style={{ marginRight: "6px", color: "#009944" }} /> Yabancı Dil Belgesi
                            </a>
                          </li>
                        ) : null}
                        {/* Başvuruya bağlı diğer potansiyel dosyalar (AdayFaaliyet vb.) burada listelenebilir */}
                        {/* Eğer API'den sadece dosya adları değil, URL'ler geliyorsa 'href' kısmını ona göre ayarlayın */}
                         {/* Eğer hiç belge URL'i yoksa bir mesaj gösterilebilir */}
                         {!(app.ozgecmis_dosyasi || app.diploma_belgeleri || app.yabanci_dil_belgesi) && <li>Yüklü belge bulunamadı veya API yanıtında URL eksik.</li>}
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            );
          }) : <p>Henüz hiç başvurunuz bulunmuyor.</p>}
        </div>
        <style>{`
          .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f4f6f9;
            padding: 1rem;
            font-family: sans-serif;
            margin: 100px auto; 
            text-align: center;
          }

          .title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            text-align: center;
          }

          .grid {
            display: grid;
            gap: 2rem;
            width: 100%; /* Grid genişliği tam olur */
            max-width: 1200px; /* İçeriği sınırlamak için maksimum genişlik */
          }

          @media (min-width: 768px) {
            .grid {
              grid-template-columns: repeat(2, 1fr);
            }
          }

          @media (min-width: 1024px) {
            .grid {
              grid-template-columns: repeat(3, 1fr);
            }
          }

          .card {
            background: white;
            border-radius: 1rem;
            padding: 1rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            border-left: 8px solid transparent;
            position: relative;
          }

          .card h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #333;
          }

          .text-gray {
            color: #555;
          }

          .text-gray-light {
            color: #666;
          }

          .status {
            font-weight: 500;
            margin-top: 0.5rem;
          }

          .btn {
            background-color: #009944;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            width: 100%;
            cursor: pointer;
            transition: background-color 0.3s;
          }

          .btn:hover {
            background-color: #007c39;
          }

          .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
          }

          .modal {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 400px;
            max-width: 90%;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            position: relative;
            animation: fadeIn 0.3s ease-in-out;
          }

          @keyframes fadeIn {
            from {
              opacity: 0;
              transform: translateY(-20px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }

          .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            border-bottom: 1px solid #ddd; /* Alt çizgi ekleyerek başlığı ayırır */
            padding-bottom: 0.5rem;
          }

          .modal-header h2 {
            font-size: 1.25rem;
            font-weight: bold;
            color: #333;
            margin: 0;
          }

          .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            cursor: pointer;
            transition: color 0.3s ease, transform 0.2s ease;
          }

          .close-btn:hover {
            color: #dc3545; /* Hover durumunda kırmızı renk */
            transform: scale(1.2); /* Hover durumunda hafif büyütme efekti */
          }

          .document-list {
            list-style: none;
            padding: 0;
            margin: 0;
          }

          .document-list li {
            margin-bottom: 0.5rem;
          }

          .document-list a {
            color: #1d4ed8;
            text-decoration: none;
          }

          .document-list a:hover {
            text-decoration: underline;
          }
        `}</style>
      </div>
    </>
  );
}import React, { useState, useEffect } from "react";
import { FaUserCircle } from "react-icons/fa";
import UserNavbar from "../../components/navbars/UserNavbar";
import { useAuth } from "../../context/AuthContext"; // AuthContext'i import et
import api from '../../services/api';

// CSRF token'ı almak için getCookie fonksiyonu
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


export default function UserProfile() {
  const { user, isLoading: authLoading, login: updateUserInContext } = useAuth(); // Context'ten kullanıcıyı ve login fonksiyonunu al (state güncellemek için)
  const [formData, setFormData] = useState({
    first_name: "",
    last_name: "",
    email: "",
    telefon: "",
    TC_KIMLIK: "", // Backend field adı
    akademik_unvan: "", // Backend'e gönderilecek ID'yi tutacak
    // Kurum ve Bölüm kaldırıldı
  });
  const [academicTitles, setAcademicTitles] = useState([]); // Kadro tiplerini tutacak state
  const [loading, setLoading] = useState(true); // Genel yükleme durumu
  const [submitting, setSubmitting] = useState(false); // Form gönderme durumu
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  // 1. Akademik Unvanları (Kadro Tiplerini) Çekme
  useEffect(() => {
    api.get('/kadro-tipi/')
      .then(res => {
        setAcademicTitles(res.data.results || res.data);
      })
      .catch(err => {
        setError(err.message || "Akademik unvanlar yüklenemedi.");
      });
  }, []);

  // 2. Context'ten gelen kullanıcı bilgisiyle formu doldurma
  useEffect(() => {
    if (user) {
      setFormData({
        first_name: user.first_name || "",
        last_name: user.last_name || "",
        email: user.email || "",
        telefon: user.telefon || "",
        TC_KIMLIK: user.TC_KIMLIK || "",
        // Backend'den user.akademik_unvan ID olarak gelmeli (serializer'da ayarlıysa)
        // Eğer user.akademik_unvan nested obje ise user.akademik_unvan.id olmalı
        akademik_unvan: user.akademik_unvan || "",
      });
      setLoading(false); // Formu doldurduktan sonra yüklemeyi bitir
    } else if (!authLoading) {
        // Auth context yüklemesi bitti ama kullanıcı yoksa hata ver/login'e yönlendir
        setError("Kullanıcı bilgileri alınamadı. Lütfen tekrar giriş yapın.");
        setLoading(false);
    }
  }, [user, authLoading]); // user veya authLoading değiştiğinde çalışır

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage('');
    setSubmitting(true);

    const csrftoken = getCookie('csrftoken');
    if (!csrftoken) {
      setError("Güvenlik token'ı alınamadı.");
      setSubmitting(false);
      return;
    }

    // Backend'e gönderilecek veriyi hazırla (sadece güncellenebilir alanlar)
    // Şifre ve TCKN genellikle buradan güncellenmez
    const payload = {
        first_name: formData.first_name,
        last_name: formData.last_name,
        email: formData.email,
        telefon: formData.telefon,
        // akademik_unvan ID olarak gönderilmeli. Select'in value'su ID olmalı.
        akademik_unvan: formData.akademik_unvan ? parseInt(formData.akademik_unvan, 10) : null
    };
     // Sadece dolu olan (değiştirilen) alanları göndermek PATCH için daha uygundur,
     // ama şimdilik tümünü gönderelim, backend serializer halleder varsayalım.

    console.log("Gönderilen Payload:", payload);

    try {
      await api.patch('/auth/user/', payload);
      setSuccessMessage("Profil bilgileri başarıyla güncellendi!");
      updateUserInContext({ ...user, ...payload });
    } catch (err) {
      setError(err.message || "Profil güncellenirken bir ağ hatası oluştu.");
    } finally {
      setSubmitting(false);
    }
  };

  // --- Yükleme veya Context Yükleme Durumu ---
   if (authLoading || loading) {
     return (
       <>
         <UserNavbar />
         <div className="profile-wrapper">
           <div className="profile-card">Profil bilgileri yükleniyor...</div>
         </div>
         <style>{` /* ... CSS ... */ `}</style>
       </>
     );
   }

   // Kullanıcı yoksa veya hata varsa (Context'ten veya fetch'ten)
   if (!user || (error && !formData.email)) { // formData.email kontrolü, fetch hatası mı context hatası mı anlamak için
     return (
       <>
         <UserNavbar />
         <div className="profile-wrapper">
           <div className="profile-card" style={{ color: 'red' }}>
               Hata: Kullanıcı bilgileri yüklenemedi. Lütfen tekrar giriş yapmayı deneyin. {error && `(${error})`}
           </div>
         </div>
         <style>{` /* ... CSS ... */ `}</style>
       </>
     );
   }

  // --- Profil Formu ---
  return (
    <>
      <UserNavbar />
      <div className="profile-wrapper">
        <div className="profile-card">
          <div className="profile-header">
            <FaUserCircle size={48} color="#009944" />
            <h2 className="profile-title">Profil Bilgilerim</h2>
          </div>

          {successMessage && <div style={{ color: 'green', marginBottom: '1rem', textAlign: 'center' }}>{successMessage}</div>}
          {error && !successMessage && <div style={{ color: 'red', marginBottom: '1rem', textAlign: 'center' }}>{error}</div>}


          <form onSubmit={handleSubmit} className="profile-form">
            <div className="form-section">
              <h3 className="section-title">Kişisel Bilgiler</h3>
              <label>Ad
                 {/* Ad Soyad birleşik gösterilip, state'de ayrı tutulabilir veya iki ayrı input yapılabilir */}
                <input type="text" name="first_name" value={formData.first_name} onChange={handleChange} required disabled={submitting}/>
              </label>
               <label>Soyad
                <input type="text" name="last_name" value={formData.last_name} onChange={handleChange} required disabled={submitting}/>
              </label>
              <label>T.C. Kimlik No (Değiştirilemez)
                {/* TCKN değiştirilemez olmalı */}
                <input type="text" name="TC_KIMLIK" value={formData.TC_KIMLIK} readOnly disabled style={{ backgroundColor: '#eee' }} />
              </label>
              <label>E-posta
                <input type="email" name="email" value={formData.email} onChange={handleChange} required disabled={submitting}/>
              </label>
              <label>Telefon Numarası
                <input type="tel" name="telefon" value={formData.telefon} onChange={handleChange} disabled={submitting}/>
              </label>
              {/* Yeni Şifre alanı kaldırıldı. Ayrı bir sayfada/modalda yapılmalı. */}
            </div>

            <div className="form-section">
              <h3 className="section-title">Akademik Bilgiler</h3>
               {/* Kurum ve Bölüm alanları kaldırıldı (DB'de yoktu) */}
              <label>Akademik Unvan
                <select
                    name="akademik_unvan" // name backend'deki field adı olmalı (veya ona maplenmeli)
                    value={formData.akademik_unvan || ""} // value ID olmalı
                    onChange={handleChange}
                    required
                    disabled={submitting}
                >
                  <option value="" disabled>Seçiniz...</option>
                  {academicTitles.map(title => (
                    // Option'ın value'su ID, görünen kısmı unvanın adı/tipi olmalı
                    <option key={title.id} value={title.id}>
                        {title.tip || title.ad || title.id} {/* Backend'den gelen unvan alanına göre */}
                    </option>
                  ))}
                </select>
              </label>
            </div>

            <button type="submit" className="profile-btn" disabled={submitting}>
                {submitting ? 'Güncelleniyor...' : 'Bilgileri Güncelle'}
            </button>
          </form>
        </div>
      </div>
      <style>{`
        /* Navbar ve Profil Wrapper Ayırma */
        .profile-wrapper {
          display: flex;
          justify-content: center;
          align-items: flex-start;
          padding: 2rem;
          background-color: #f4f6f9;
          min-height: calc(100vh - 70px); /* Navbar yüksekliği çıkarıldı */
          margin-top: 70px; /* Navbarın altında yer alır */
        }

        .profile-card {
          background-color: #fff;
          border-radius: 1rem;
          padding: 2rem;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          max-width: 700px;
          width: 100%;
        }

        .profile-header {
          display: flex;
          align-items: center;
          gap: 1rem;
          margin-bottom: 1.5rem;
        }

        .profile-title {
          font-size: 1.5rem;
          font-weight: 700;
          color: #333;
        }

        .profile-form {
          display: flex;
          flex-direction: column;
          gap: 2rem;
        }

        .form-section {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .section-title {
          font-size: 1.1rem;
          font-weight: 600;
          color: #007c39;
          margin-bottom: 0.5rem;
        }

        label {
          color: #555;
          font-size: 0.95rem;
          display: flex;
          flex-direction: column;
        }

        input, select {
          margin-top: 0.25rem;
          padding: 0.5rem;
          border: 1px solid #ccc;
          border-radius: 0.5rem;
          font-size: 1rem;
        }

        .profile-btn {
          background-color: #009944;
          color: white;
          padding: 0.75rem;
          border: none;
          border-radius: 0.5rem;
          font-weight: bold;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }

        .profile-btn:hover {
          background-color: #007c39;
        }

        /* Responsive Tasarım */
        @media (max-width: 768px) {
          .profile-wrapper {
            padding: 1rem;
          }

          .profile-card {
            padding: 1.5rem;
          }

          .profile-header {
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
          }

          .profile-title {
            font-size: 1.25rem;
            text-align: center;
          }

          .form-section {
            gap: 0.75rem;
          }

          input, select {
            font-size: 0.9rem;
            padding: 0.5rem;
          }

          .profile-btn {
            font-size: 0.9rem;
            padding: 0.5rem;
          }
        }

        @media (max-width: 480px) {
          .profile-card {
            padding: 1rem;
          }

          .profile-title {
            font-size: 1.1rem;
          }

          .section-title {
            font-size: 1rem;
          }

          input, select {
            font-size: 0.85rem;
            padding: 0.4rem;
          }

          .profile-btn {
            font-size: 0.85rem;
            padding: 0.4rem;
          }
        }
      `}</style>
    </>
  );
}import api from './api';

// Kullanıcı işlemleri
export const userService = {
  getAll: async (params) => {
    try {
      const response = await api.get('/users/', { params });
      return Array.isArray(response.data?.results) ? response.data.results : 
             Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error('Kullanıcılar alınırken hata:', error);
      throw error;
    }
  },
  
  getById: async (id) => {
    try {
      const response = await api.get(`/users/${id}/`);
      return response.data;
    } catch (error) {
      console.error(`Kullanıcı (${id}) alınırken hata:`, error);
      throw error;
    }
  },
  
  create: async (userData) => {
    try {
      const response = await api.post('/users/', userData);
      return response.data;
    } catch (error) {
      console.error('Kullanıcı oluşturulurken hata:', error);
      throw error;
    }
  },
  
  update: async (id, userData) => {
    try {
      const response = await api.put(`/users/${id}/`, userData);
      return response.data;
    } catch (error) {
      console.error(`Kullanıcı (${id}) güncellenirken hata:`, error);
      throw error;
    }
  },
  
  delete: async (id) => {
    try {
      const response = await api.delete(`/users/${id}/`);
      return response.data;
    } catch (error) {
      console.error(`Kullanıcı (${id}) silinirken hata:`, error);
      throw error;
    }
  }
};

// İlan işlemleri
export const advertisementService = {
  getAll: async (params) => {
    try {
      const response = await api.get('/ilanlar/', { params });
      return Array.isArray(response.data?.results) ? response.data.results : 
             Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error('İlanlar alınırken hata:', error);
      throw error;
    }
  },
  
  getById: async (id) => {
    try {
      const response = await api.get(`/ilanlar/${id}/`);
      return response.data;
    } catch (error) {
      console.error(`İlan (${id}) alınırken hata:`, error);
      throw error;
    }
  },
  
  create: async (adData) => {
    try {
      const response = await api.post('/ilanlar/', adData);
      return response.data;
    } catch (error) {
      console.error('İlan oluşturulurken hata:', error);
      throw error;
    }
  },
  
  update: async (id, adData) => {
    try {
      const response = await api.put(`/ilanlar/${id}/`, adData);
      return response.data;
    } catch (error) {
      console.error(`İlan (${id}) güncellenirken hata:`, error);
      throw error;
    }
  },
  
  delete: async (id) => {
    try {
      const response = await api.delete(`/ilanlar/${id}/`);
      return response.data;
    } catch (error) {
      console.error(`İlan (${id}) silinirken hata:`, error);
      throw error;
    }
  }
};

// Başvuru işlemleri
export const applicationService = {
  getAll: async (params) => {
    try {
      const response = await api.get('/basvurular/', { 
        params,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      // Yanıtın JSON formatında olduğunu kontrol et
      if (typeof response.data === 'string' && response.data.includes('<!doctype html>')) {
        throw new Error('API yanıtı HTML formatında. Lütfen backend servisini kontrol edin.');
      }

      return Array.isArray(response.data?.results) ? response.data.results : 
             Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error('Başvurular alınırken hata:', error);
      if (error.response) {
        // Backend'den gelen hata mesajını göster
        throw new Error(`Sunucu hatası: ${error.response.status} - ${error.response.data?.message || 'Bilinmeyen hata'}`);
      } else if (error.request) {
        // İstek yapıldı ama yanıt alınamadı
        throw new Error('Sunucuya bağlanılamıyor. Lütfen internet bağlantınızı kontrol edin.');
      } else {
        // İstek oluşturulurken hata oluştu
        throw new Error(`Başvurular alınırken hata oluştu: ${error.message}`);
      }
    }
  },
  
  getById: async (id) => {
    try {
      const response = await api.get(`/basvurular/${id}/`, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      return response.data;
    } catch (error) {
      console.error(`Başvuru (${id}) alınırken hata:`, error);
      throw error;
    }
  },
  
  update: async (id, applicationData) => {
    try {
      const response = await api.put(`/basvuru/${id}/`, applicationData);
      return response.data;
    } catch (error) {
      console.error(`Başvuru (${id}) güncellenirken hata:`, error);
      throw error;
    }
  },
  
  delete: async (id) => {
    try {
      const response = await api.delete(`/basvuru/${id}/`);
      return response.data;
    } catch (error) {
      console.error(`Başvuru (${id}) silinirken hata:`, error);
      throw error;
    }
  }
};

// Dashboard verileri
export const dashboardService = {
  getStats: async () => {
    try {
      const response = await api.get('/admin-stats/');
      
      // Veri doğrulama
      if (!response.data || typeof response.data !== 'object') {
        throw new Error('Geçersiz dashboard verisi');
      }

      // Stats objesi kontrolü
      const stats = response.data.stats || {};

      // DepartmentApplications array kontrolü ve normalizasyonu
      let departmentApplications = [];
      if (Array.isArray(response.data.departmentApplications)) {
        departmentApplications = response.data.departmentApplications
          .filter(item => item && item.name) // Geçersiz verileri filtrele
          .map(item => ({
            name: item.name || 'Bilinmeyen',
            value: parseInt(item.value) || 0
          }))
          .filter(item => item.value > 0); // Sıfır değerli verileri filtrele
      }

      // Veriyi normalize et
      return {
        stats: {
          totalPostings: parseInt(stats.totalPostings) || 0,
          activePostings: parseInt(stats.activePostings) || 0,
          ongoingApplications: parseInt(stats.ongoingApplications) || 0,
          mostApplied: stats.mostApplied || '-',
          totalUsers: parseInt(stats.totalUsers) || 0,
          totalApplications: parseInt(stats.totalApplications) || 0
        },
        departmentApplications
      };
    } catch (error) {
      console.error('Dashboard verisi alınırken hata:', error);
      // Hata mesajını daha açıklayıcı hale getir
      if (error.response?.status === 403) {
        throw new Error('Bu sayfaya erişim yetkiniz yok');
      } else if (error.response?.status === 401) {
        throw new Error('Oturum süreniz dolmuş. Lütfen tekrar giriş yapın');
      } else if (!error.response) {
        throw new Error('Sunucuya bağlanılamadı. Lütfen internet bağlantınızı kontrol edin');
      }
      throw error;
    }
  },
  
  getRecentActivities: async () => {
    const response = await api.get('/dashboard/recent-activities/');
    return response.data;
  }
}; import axios from 'axios';

const getBaseURL = () => {
  // Eğer window.location.host 8000 ise, tam adres kullan
  if (window.location.port === '8000') {
    return 'http://127.0.0.1:8000/api';
  }
  // Geliştirme ortamı için proxy
  return '/api';
};

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

const api = axios.create({
    baseURL: getBaseURL(),
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    },
    withCredentials: true,
});

// Request interceptor
api.interceptors.request.use(
    (config) => {
        // CSRF token'ı ekle
        const csrfToken = getCookie('csrftoken');
        if (csrfToken) {
            config.headers['X-CSRFToken'] = csrfToken;
        }

        // Auth token'ı ekle
        const authToken = localStorage.getItem('authToken');
        if (authToken) {
            config.headers['Authorization'] = `Token ${authToken}`;
        }

        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// Response interceptor
api.interceptors.response.use(
    (response) => {
        // Yanıtın JSON formatında olduğunu kontrol et
        if (typeof response.data === 'string' && response.data.includes('<!doctype html>')) {
            return Promise.reject(new Error('API yanıtı HTML formatında. Lütfen backend servisini kontrol edin.'));
        }
        return response;
    },
    (error) => {
        if (error.response) {
            // Backend'den gelen hata
            if (error.response.status === 401) {
                // Yetkilendirme hatası - kullanıcıyı login sayfasına yönlendir
                localStorage.removeItem('authToken');
                window.location.href = '/login';
            }
        }
        return Promise.reject(error);
    }
);

export default api; // src/services/authService.js
import { getCookie } from '../utils/cookie';

const API_BASE = '/api';

export async function login({ username, password }) {
  const response = await fetch(`${API_BASE}/login/`, {
    method: 'POST',
    credentials: 'include',              // cookie’leri gönder
    headers: {
      'Content-Type': 'application/json',
      'X-CSRFToken': getCookie('csrftoken'),
    },
    body: JSON.stringify({ username, password }),
  });
  if (!response.ok) {
    const err = await response.json();
    throw new Error(err.detail || 'Giriş başarısız');
  }
  return response.json();
}

export async function logout() {
  await fetch(`${API_BASE}/logout/`, {
    method: 'POST',
    credentials: 'include',
    headers: {
      'X-CSRFToken': getCookie('csrftoken'),
    },
  });
}
// src/utils/cookie.js
export function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) {
      return parts.pop().split(';').shift();
    }
    return '';
  }
  // src/App.jsx

import React, { useEffect } from "react"; // useEffect eklendi (AuthHandler için)
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Navigate,
    useNavigate,     // useNavigate eklendi (AuthHandler için)
    useLocation      // useLocation eklendi (AuthHandler için)
} from "react-router-dom";
import { useAuth } from "./context/AuthContext"; // useAuth import edildi

// Sayfa Bileşenleri
import Login from "./pages/auth/Login";
import Register from "./pages/auth/Register";
import Listings from "./pages/user/Listings";
import Apply from "./pages/user/Apply";
import MyApplications from "./pages/user/MyApplications";
import Profile from "./pages/user/Profile";
import UserDashboard from "./pages/user/Dashboard";
import AdminAdvertisements from "./pages/admin/Advertisements";
import AdminApplications from "./pages/admin/Applications";
import AdminUsers from "./pages/admin/Users";
import AdminDashboard from "./pages/admin/Dashboard";
import UserApplication from "./pages/jury/User-Application";
import Applications from "./pages/jury/Applications";
import Rapor from "./pages/jury/Rapor";
import JuryDashboard from "./pages/jury/Dashboard";
import ManagerDashboard from "./pages/manager/Dashboard";
import Basvurular from "./pages/manager/Basvurular";
import CriteriaPage from "./pages/manager/CriteriaPage";
import ManagerProfile from "./pages/manager/Profile";

// İlan Listesi Sayfası
import Ilan from "./pages/manager/Ilan";
// İlan Kriter Sayfası (ilan id ile görüntülenecek)
import IlanKriter from "./pages/manager/IlanKriter";

// --- ProtectedRoute (Context Kullanan Versiyon) ---
// Bu bileşeni ayrı bir dosyaya (örn: src/components/ProtectedRoute.jsx) taşımanız önerilir.
function ProtectedRoute({ children, allowedRole }) {
    const { isAuthenticated, user, isLoading } = useAuth(); // Sadece context'i oku

    console.log("ProtectedRoute Check for:", window.location.pathname, { isLoading, isAuthenticated, userRole: user?.user_type?.toLowerCase(), allowedRole });

    // console.log("ProtectedRoute Check:", { isLoading, isAuthenticated, user, allowedRole });

    if (isLoading) {
        // console.log("ProtectedRoute: Rendering loading state from context.");
        return <div>Oturum kontrol ediliyor...</div>;
    }

    if (!isAuthenticated) {
        // console.log("ProtectedRoute: Not authenticated, redirecting to login.");
        return <Navigate to="/login" replace />;
    }

    const userRole = user?.user_type ? user.user_type.toLowerCase() : null;
    if (userRole !== allowedRole) {
        // console.log(`ProtectedRoute: Role mismatch (User: ${userRole}, Allowed: ${allowedRole}), redirecting.`);
        return <Navigate to="/login" replace />; // Veya Yetkisiz Erişim sayfasına
    }

    // console.log("ProtectedRoute: Access granted, rendering children.");
    return children;
}


// --- Auth Durumunu Dinleyip Yönlendiren Bileşen ---
function AuthHandler() {
    const { isAuthenticated, user, isLoading } = useAuth();
    const navigate = useNavigate();
    const location = useLocation();

    useEffect(() => {
        if (isLoading) return; // Yükleme bitene kadar bekle

        if (isAuthenticated && user) {
            // Kullanıcı giriş yapmışsa
            const onLoginPage = location.pathname === '/login';
            const userRole = user.user_type ? user.user_type.toLowerCase() : null;
            let targetPath = '/'; // Default fallback

            if (userRole === "admin") targetPath = "/admin";
            else if (userRole === "aday") targetPath = "/user";
            else if (userRole === "yonetici") targetPath = "/manager";
            else if (userRole === "juri") targetPath = "/jury";

            // Tüm dashboard ve ilgili alt sayfaları kapsayan path'ler
            const dashboardPaths = [
              // User
              '/user', '/listing', '/apply', '/basvurularim', '/profile',
              // Admin
              '/admin', '/admin-applications', '/admin-advertisements', '/admin-users',
              // Manager
              '/manager', '/manager-ilan', '/manager-ilan/', '/manager-basvurular', '/manager-criteriapage', '/manager-profile',
              // Jury
              '/jury', '/jury-rapor', '/jury-applications', '/jury-userapplication'
            ];
            const isOnDashboard = dashboardPaths.some(path => location.pathname.startsWith(path));

            if (targetPath !== '/' && (onLoginPage || !isOnDashboard)) {
                console.log(`AuthHandler: User authenticated (Role: ${userRole}). Navigating to ${targetPath}`);
                navigate(targetPath, { replace: true });
            }
        } else {
            // Kullanıcı giriş yapmamışsa ve korumalı olmayan bir sayfada değilse (örn: /login değilse) login'e yönlendir
            // Bu kısım isteğe bağlı, belki ProtectedRoute yeterlidir.
            // if (location.pathname !== '/login') {
            //     console.log("AuthHandler: User not authenticated. Navigating to /login");
            //     navigate('/login', { replace: true });
            // }
        }

    }, [isAuthenticated, user, isLoading, navigate, location]);

    return null; // Bu bileşen bir şey render etmez
}


// --- Ana App Fonksiyonu ---
export default function App() {
    return (
        <Router>
            {/* AuthHandler, Router içinde ama Routes dışında olmalı */}
            <AuthHandler />
            <Routes>
                <Route path="/" element={<Navigate to="/login" replace />} />
                <Route path="/login" element={<Login />} />
                <Route path="/register" element={<Register />} />

                {/* User Routes */}
                <Route path="/user" element={<ProtectedRoute allowedRole="aday"><UserDashboard /></ProtectedRoute>} />
                <Route path="/listing" element={<ProtectedRoute allowedRole="aday"><Listings /></ProtectedRoute>} />
                <Route path="/apply/:ilanId" element={<ProtectedRoute allowedRole="aday"><Apply /></ProtectedRoute>} />
                <Route path="/basvurularim" element={<ProtectedRoute allowedRole="aday"><MyApplications /></ProtectedRoute>} />
                <Route path="/profile" element={<ProtectedRoute allowedRole="aday"><Profile /></ProtectedRoute>} />

                {/* Admin Routes */}
                <Route path="/admin" element={<ProtectedRoute allowedRole="admin"><AdminDashboard /></ProtectedRoute>} />
                <Route path="/admin-applications" element={<ProtectedRoute allowedRole="admin"><AdminApplications /></ProtectedRoute>} />
                <Route path="/admin-advertisements" element={<ProtectedRoute allowedRole="admin"><AdminAdvertisements /></ProtectedRoute>} />
                <Route path="/admin-users" element={<ProtectedRoute allowedRole="admin"><AdminUsers /></ProtectedRoute>} />

                {/* Manager Routes */}
                <Route path="/manager" element={<ProtectedRoute allowedRole="yonetici"><ManagerDashboard /></ProtectedRoute>} />
                <Route path="/manager-ilan" element={<ProtectedRoute allowedRole="yonetici"><Ilan /></ProtectedRoute>} /> {/* Ilan listesi */}
                <Route path="/manager-ilan/:id" element={<ProtectedRoute allowedRole="yonetici"><IlanKriter /></ProtectedRoute>} /> {/* Ilan kriter sayfası */}
                <Route path="/manager-basvurular" element={<ProtectedRoute allowedRole="yonetici"><Basvurular /></ProtectedRoute>} />
                <Route path="/manager-criteriapage" element={<ProtectedRoute allowedRole="yonetici"><CriteriaPage /></ProtectedRoute>} />
                <Route path="/manager-profile" element={<ProtectedRoute allowedRole="yonetici"><ManagerProfile /></ProtectedRoute>} />

                {/* Jury Routes */}
                <Route path="/jury" element={<ProtectedRoute allowedRole="juri"><JuryDashboard /></ProtectedRoute>} />
                <Route path="/jury-rapor" element={<ProtectedRoute allowedRole="juri"><Rapor /></ProtectedRoute>} />
                <Route path="/jury-applications" element={<ProtectedRoute allowedRole="juri"><Applications /></ProtectedRoute>} />
                <Route path="/jury-userapplication/:id" element={<ProtectedRoute allowedRole="juri"><UserApplication /></ProtectedRoute>} />

                {/* Catch-all */}
                <Route path="*" element={<Navigate to="/login" replace />} />
            </Routes>
        </Router>
    );
}*{
    margin: 0;
    padding: 0;
    font-family: Arial, Helvetica, sans-serif;
}// src/main.jsx (veya index.js)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { AuthProvider } from './context/AuthContext'; // AuthProvider'ı import et
import './index.css'; // Global stilleriniz

ReactDOM.createRoot(document.getElementById('root')).render(
  // StrictMode'u test için geçici olarak kaldırmıştık, isterseniz geri ekleyebilirsiniz
  // <React.StrictMode>
    <AuthProvider> {/* Uygulamanın tamamını AuthProvider ile sar */}
      <App />
    </AuthProvider>
  // </React.StrictMode>
);import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/src/index.css" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
{
  "name": "yazlab-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "proxy": "http://localhost:8000",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.4.0",
    "recharts": "^2.15.1",
    "vite-plugin-svgr": "^4.3.0",
    "yazlab-frontend": "file:"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}
{
  "name": "yazlab-frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "yazlab-frontend",
      "version": "0.0.0",
      "dependencies": {
        "axios": "^1.8.4",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "react-icons": "^5.5.0",
        "react-router-dom": "^7.4.0",
        "recharts": "^2.15.1",
        "vite-plugin-svgr": "^4.3.0",
        "yazlab-frontend": "file:"
      },
      "devDependencies": {
        "@eslint/js": "^9.21.0",
        "@types/react": "^19.0.10",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "eslint": "^9.21.0",
        "eslint-plugin-react-hooks": "^5.1.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^15.15.0",
        "vite": "^6.2.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.26.2",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.9",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.26.8",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.26.10",
        "@babel/helper-compilation-targets": "^7.26.5",
        "@babel/helper-module-transforms": "^7.26.0",
        "@babel/helpers": "^7.26.10",
        "@babel/parser": "^7.26.10",
        "@babel/template": "^7.26.9",
        "@babel/traverse": "^7.26.10",
        "@babel/types": "^7.26.10",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.10.tgz",
      "integrity": "sha512-rRHT8siFIXQrAYOYqZQVsAr8vJ+cBNqcVAY6m5V8/4QqzaPl+zDBe6cLEPRDuNOUf3ww8RfJVlOyQMoSI+5Ang==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.26.10",
        "@babel/types": "^7.26.10",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.26.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.26.5.tgz",
      "integrity": "sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.26.5",
        "@babel/helper-validator-option": "^7.25.9",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.25.9",
        "@babel/types": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.26.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9",
        "@babel/traverse": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.26.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.10.tgz",
      "integrity": "sha512-UPYc3SauzZ3JGgj87GgZ89JVdC5dj0AoetR5Bw6wj4niittNyFh6+eOGonYvJ1ao6B8lEa3Q3klS7ADZ53bc5g==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.26.9",
        "@babel/types": "^7.26.10"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.10.tgz",
      "integrity": "sha512-6aQR2zGE/QFi8JpDLjUZEPYOs7+mhKXm86VaKFiLP35JQwQb6bwUE+XbvkH0EptsYhbNBSUGaUBLKqxH1xSgsA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.26.10"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.9.tgz",
      "integrity": "sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.9.tgz",
      "integrity": "sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.0.tgz",
      "integrity": "sha512-VtPOkrdPHZsKc/clNqyi9WUA8TINkZ4cGk63UUE3u4pmB2k+ZMQRDuIOagv8UVd6j7k0T3+RRIb7beKTebNbcw==",
      "license": "MIT",
      "dependencies": {
        "regenerator-runtime": "^0.14.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.26.9",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.26.9.tgz",
      "integrity": "sha512-qyRplbeIpNZhmzOysF/wFMuP9sctmh2cFzRAZOn1YapxBsE1i9bJIY586R/WBLfLcmcBlM8ROBiQURnnNy+zfA==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/parser": "^7.26.9",
        "@babel/types": "^7.26.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.10.tgz",
      "integrity": "sha512-k8NuDrxr0WrPH5Aupqb2LCVURP/S0vBEn5mK6iH+GIYob66U5EtoZvcdudR2jQ4cmTwhEwW1DLB+Yyas9zjF6A==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.26.10",
        "@babel/parser": "^7.26.10",
        "@babel/template": "^7.26.9",
        "@babel/types": "^7.26.10",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.10.tgz",
      "integrity": "sha512-emqcG3vHrpxUKTrxcblR36dcrcoRDvKmnL/dCL6ZsHaShW80qxCAcNhzQZrpeM765VzEos+xOi4s+r4IXzTwdQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.1.tgz",
      "integrity": "sha512-kfYGy8IdzTGy+z0vFGvExZtxkFlA4zAxgKEahG9KE1ScBjpQnFsNOX8KTU5ojNru5ed5CVoJYXFtoxaq5nFbjQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.1.tgz",
      "integrity": "sha512-dp+MshLYux6j/JjdqVLnMglQlFu+MuVeNrmT5nk6q07wNhCdSnB7QZj+7G8VMUGh1q+vj2Bq8kRsuyA00I/k+Q==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.1.tgz",
      "integrity": "sha512-50tM0zCJW5kGqgG7fQ7IHvQOcAn9TKiVRuQ/lN0xR+T2lzEFvAi1ZcS8DiksFcEpf1t/GYOeOfCAgDHFpkiSmA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.1.tgz",
      "integrity": "sha512-GCj6WfUtNldqUzYkN/ITtlhwQqGWu9S45vUXs7EIYf+7rCiiqH9bCloatO9VhxsL0Pji+PF4Lz2XXCES+Q8hDw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.1.tgz",
      "integrity": "sha512-5hEZKPf+nQjYoSr/elb62U19/l1mZDdqidGfmFutVUjjUZrOazAtwK+Kr+3y0C/oeJfLlxo9fXb1w7L+P7E4FQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.1.tgz",
      "integrity": "sha512-hxVnwL2Dqs3fM1IWq8Iezh0cX7ZGdVhbTfnOy5uURtao5OIVCEyj9xIzemDi7sRvKsuSdtCAhMKarxqtlyVyfA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.1.tgz",
      "integrity": "sha512-1MrCZs0fZa2g8E+FUo2ipw6jw5qqQiH+tERoS5fAfKnRx6NXH31tXBKI3VpmLijLH6yriMZsxJtaXUyFt/8Y4A==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.1.tgz",
      "integrity": "sha512-0IZWLiTyz7nm0xuIs0q1Y3QWJC52R8aSXxe40VUxm6BB1RNmkODtW6LHvWRrGiICulcX7ZvyH6h5fqdLu4gkww==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.1.tgz",
      "integrity": "sha512-NdKOhS4u7JhDKw9G3cY6sWqFcnLITn6SqivVArbzIaf3cemShqfLGHYMx8Xlm/lBit3/5d7kXvriTUGa5YViuQ==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.1.tgz",
      "integrity": "sha512-jaN3dHi0/DDPelk0nLcXRm1q7DNJpjXy7yWaWvbfkPvI+7XNSc/lDOnCLN7gzsyzgu6qSAmgSvP9oXAhP973uQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.1.tgz",
      "integrity": "sha512-OJykPaF4v8JidKNGz8c/q1lBO44sQNUQtq1KktJXdBLn1hPod5rE/Hko5ugKKZd+D2+o1a9MFGUEIUwO2YfgkQ==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.1.tgz",
      "integrity": "sha512-nGfornQj4dzcq5Vp835oM/o21UMlXzn79KobKlcs3Wz9smwiifknLy4xDCLUU0BWp7b/houtdrgUz7nOGnfIYg==",
      "cpu": [
        "loong64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.1.tgz",
      "integrity": "sha512-1osBbPEFYwIE5IVB/0g2X6i1qInZa1aIoj1TdL4AaAb55xIIgbg8Doq6a5BzYWgr+tEcDzYH67XVnTmUzL+nXg==",
      "cpu": [
        "mips64el"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.1.tgz",
      "integrity": "sha512-/6VBJOwUf3TdTvJZ82qF3tbLuWsscd7/1w+D9LH0W/SqUgM5/JJD0lrJ1fVIfZsqB6RFmLCe0Xz3fmZc3WtyVg==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.1.tgz",
      "integrity": "sha512-nSut/Mx5gnilhcq2yIMLMe3Wl4FK5wx/o0QuuCLMtmJn+WeWYoEGDN1ipcN72g1WHsnIbxGXd4i/MF0gTcuAjQ==",
      "cpu": [
        "riscv64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.1.tgz",
      "integrity": "sha512-cEECeLlJNfT8kZHqLarDBQso9a27o2Zd2AQ8USAEoGtejOrCYHNtKP8XQhMDJMtthdF4GBmjR2au3x1udADQQQ==",
      "cpu": [
        "s390x"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.1.tgz",
      "integrity": "sha512-xbfUhu/gnvSEg+EGovRc+kjBAkrvtk38RlerAzQxvMzlB4fXpCFCeUAYzJvrnhFtdeyVCDANSjJvOvGYoeKzFA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.1.tgz",
      "integrity": "sha512-O96poM2XGhLtpTh+s4+nP7YCCAfb4tJNRVZHfIE7dgmax+yMP2WgMd2OecBuaATHKTHsLWHQeuaxMRnCsH8+5g==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.1.tgz",
      "integrity": "sha512-X53z6uXip6KFXBQ+Krbx25XHV/NCbzryM6ehOAeAil7X7oa4XIq+394PWGnwaSQ2WRA0KI6PUO6hTO5zeF5ijA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.1.tgz",
      "integrity": "sha512-Na9T3szbXezdzM/Kfs3GcRQNjHzM6GzFBeU1/6IV/npKP5ORtp9zbQjvkDJ47s6BCgaAZnnnu/cY1x342+MvZg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.1.tgz",
      "integrity": "sha512-T3H78X2h1tszfRSf+txbt5aOp/e7TAz3ptVKu9Oyir3IAOFPGV6O9c2naym5TOriy1l0nNf6a4X5UXRZSGX/dw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.1.tgz",
      "integrity": "sha512-2H3RUvcmULO7dIE5EWJH8eubZAI4xw54H1ilJnRNZdeo8dTADEZ21w6J22XBkXqGJbe0+wnNJtw3UXRoLJnFEg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.1.tgz",
      "integrity": "sha512-GE7XvrdOzrb+yVKB9KsRMq+7a2U/K5Cf/8grVFRAGJmfADr/e/ODQ134RK2/eeHqYV5eQRFxb1hY7Nr15fv1NQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.1.tgz",
      "integrity": "sha512-uOxSJCIcavSiT6UnBhBzE8wy3n0hOkJsBOzy7HDAuTDE++1DJMRRVCPGisULScHL+a/ZwdXPpXD3IyFKjA7K8A==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.1.tgz",
      "integrity": "sha512-Y1EQdcfwMSeQN/ujR5VayLOJ1BHaK+ssyk0AEzPjC+t1lITgsnccPqFjb6V+LsTp/9Iov4ysfjxLaGJ9RPtkVg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.5.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.5.1.tgz",
      "integrity": "sha512-soEIOALTfTK6EjmKMMoLugwaP0rzkad90iIWd1hMO9ARkSAyjfMfkRRhLvD5qH7vvM0Cg72pieUfR6yh6XxC4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.2.tgz",
      "integrity": "sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.1.0.tgz",
      "integrity": "sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.0.tgz",
      "integrity": "sha512-yaVPAiNAalnCZedKLdR21GOGILMLKPyqSLWaAjQFvYA2i/ciDi8ArYVr69Anohb6cH2Ukhqti4aFnYyPm8wdwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.22.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.22.0.tgz",
      "integrity": "sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.7.tgz",
      "integrity": "sha512-JubJ5B2pJ4k4yGxaNLdbjrnk9d/iDz6/q8wOilpIowd6PJPgaxCuHBnBszq7Ce2TyMrywm5r4PnKm6V3iiZF+g==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.12.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.1.4.tgz",
      "integrity": "sha512-USm05zrsFxYLPdWWq+K3STlWiT/3ELn3RcV5hJMghpeAIhxfsUIg6mt12CBJBInWMV4VneoV7SfGv8xIwo2qNQ==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0",
        "estree-walker": "^2.0.2",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
      },
      "peerDependenciesMeta": {
        "rollup": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.36.0.tgz",
      "integrity": "sha512-jgrXjjcEwN6XpZXL0HUeOVGfjXhPyxAbbhD0BlXUB+abTOpbPiN5Wb3kOT7yb+uEtATNYF5x5gIfwutmuBA26w==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.36.0.tgz",
      "integrity": "sha512-NyfuLvdPdNUfUNeYKUwPwKsE5SXa2J6bCt2LdB/N+AxShnkpiczi3tcLJrm5mA+eqpy0HmaIY9F6XCa32N5yzg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.36.0.tgz",
      "integrity": "sha512-JQ1Jk5G4bGrD4pWJQzWsD8I1n1mgPXq33+/vP4sk8j/z/C2siRuxZtaUA7yMTf71TCZTZl/4e1bfzwUmFb3+rw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.36.0.tgz",
      "integrity": "sha512-6c6wMZa1lrtiRsbDziCmjE53YbTkxMYhhnWnSW8R/yqsM7a6mSJ3uAVT0t8Y/DGt7gxUWYuFM4bwWk9XCJrFKA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.36.0.tgz",
      "integrity": "sha512-KXVsijKeJXOl8QzXTsA+sHVDsFOmMCdBRgFmBb+mfEb/7geR7+C8ypAml4fquUt14ZyVXaw2o1FWhqAfOvA4sg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.36.0.tgz",
      "integrity": "sha512-dVeWq1ebbvByI+ndz4IJcD4a09RJgRYmLccwlQ8bPd4olz3Y213uf1iwvc7ZaxNn2ab7bjc08PrtBgMu6nb4pQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.36.0.tgz",
      "integrity": "sha512-bvXVU42mOVcF4le6XSjscdXjqx8okv4n5vmwgzcmtvFdifQ5U4dXFYaCB87namDRKlUL9ybVtLQ9ztnawaSzvg==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.36.0.tgz",
      "integrity": "sha512-JFIQrDJYrxOnyDQGYkqnNBtjDwTgbasdbUiQvcU8JmGDfValfH1lNpng+4FWlhaVIR4KPkeddYjsVVbmJYvDcg==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.36.0.tgz",
      "integrity": "sha512-KqjYVh3oM1bj//5X7k79PSCZ6CvaVzb7Qs7VMWS+SlWB5M8p3FqufLP9VNp4CazJ0CsPDLwVD9r3vX7Ci4J56A==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.36.0.tgz",
      "integrity": "sha512-QiGnhScND+mAAtfHqeT+cB1S9yFnNQ/EwCg5yE3MzoaZZnIV0RV9O5alJAoJKX/sBONVKeZdMfO8QSaWEygMhw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.36.0.tgz",
      "integrity": "sha512-1ZPyEDWF8phd4FQtTzMh8FQwqzvIjLsl6/84gzUxnMNFBtExBtpL51H67mV9xipuxl1AEAerRBgBwFNpkw8+Lg==",
      "cpu": [
        "loong64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.36.0.tgz",
      "integrity": "sha512-VMPMEIUpPFKpPI9GZMhJrtu8rxnp6mJR3ZzQPykq4xc2GmdHj3Q4cA+7avMyegXy4n1v+Qynr9fR88BmyO74tg==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.36.0.tgz",
      "integrity": "sha512-ttE6ayb/kHwNRJGYLpuAvB7SMtOeQnVXEIpMtAvx3kepFQeowVED0n1K9nAdraHUPJ5hydEMxBpIR7o4nrm8uA==",
      "cpu": [
        "riscv64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.36.0.tgz",
      "integrity": "sha512-4a5gf2jpS0AIe7uBjxDeUMNcFmaRTbNv7NxI5xOCs4lhzsVyGR/0qBXduPnoWf6dGC365saTiwag8hP1imTgag==",
      "cpu": [
        "s390x"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.36.0.tgz",
      "integrity": "sha512-5KtoW8UWmwFKQ96aQL3LlRXX16IMwyzMq/jSSVIIyAANiE1doaQsx/KRyhAvpHlPjPiSU/AYX/8m+lQ9VToxFQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.36.0.tgz",
      "integrity": "sha512-sycrYZPrv2ag4OCvaN5js+f01eoZ2U+RmT5as8vhxiFz+kxwlHrsxOwKPSA8WyS+Wc6Epid9QeI/IkQ9NkgYyQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.36.0.tgz",
      "integrity": "sha512-qbqt4N7tokFwwSVlWDsjfoHgviS3n/vZ8LK0h1uLG9TYIRuUTJC88E1xb3LM2iqZ/WTqNQjYrtmtGmrmmawB6A==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.36.0.tgz",
      "integrity": "sha512-t+RY0JuRamIocMuQcfwYSOkmdX9dtkr1PbhKW42AMvaDQa+jOdpUYysroTF/nuPpAaQMWp7ye+ndlmmthieJrQ==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.36.0.tgz",
      "integrity": "sha512-aRXd7tRZkWLqGbChgcMMDEHjOKudo1kChb1Jt1IfR8cY/KIpgNviLeJy5FUb9IpSuQj8dU2fAYNMPW/hLKOSTw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@svgr/babel-plugin-add-jsx-attribute": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-8.0.0.tgz",
      "integrity": "sha512-b9MIk7yhdS1pMCZM8VeNfUlSKVRhsHZNMl5O9SfaX0l0t5wjdgu4IDzGB8bpnGBBOjGST3rRFVsaaEtI4W6f7g==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-attribute": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-8.0.0.tgz",
      "integrity": "sha512-BcCkm/STipKvbCl6b7QFrMh/vx00vIP63k2eM66MfHJzPr6O2U0jYEViXkHJWqXqQYjdeA9cuCl5KWmlwjDvbA==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-empty-expression": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-8.0.0.tgz",
      "integrity": "sha512-5BcGCBfBxB5+XSDSWnhTThfI9jcO5f0Ai2V24gZpG+wXF14BzwxxdDb4g6trdOux0rhibGs385BeFMSmxtS3uA==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-replace-jsx-attribute-value": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-8.0.0.tgz",
      "integrity": "sha512-KVQ+PtIjb1BuYT3ht8M5KbzWBhdAjjUPdlMtpuw/VjT8coTrItWX6Qafl9+ji831JaJcu6PJNKCV0bp01lBNzQ==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-dynamic-title": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-8.0.0.tgz",
      "integrity": "sha512-omNiKqwjNmOQJ2v6ge4SErBbkooV2aAWwaPFs2vUY7p7GhVkzRkJ00kILXQvRhA6miHnNpXv7MRnnSjdRjK8og==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-em-dimensions": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-8.0.0.tgz",
      "integrity": "sha512-mURHYnu6Iw3UBTbhGwE/vsngtCIbHE43xCRK7kCw4t01xyGqb2Pd+WXekRRoFOBIY29ZoOhUCTEweDMdrjfi9g==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-react-native-svg": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-8.1.0.tgz",
      "integrity": "sha512-Tx8T58CHo+7nwJ+EhUwx3LfdNSG9R2OKfaIXXs5soiy5HtgoAEkDay9LIimLOcG8dJQH1wPZp/cnAv6S9CrR1Q==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-svg-component": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-8.0.0.tgz",
      "integrity": "sha512-DFx8xa3cZXTdb/k3kfPeaixecQLgKh5NVBMwD0AQxOzcZawK4oo1Jh9LbrcACUivsCA7TLG8eeWgrDXjTMhRmw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/babel-preset": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-preset/-/babel-preset-8.1.0.tgz",
      "integrity": "sha512-7EYDbHE7MxHpv4sxvnVPngw5fuR6pw79SkcrILHJ/iMpuKySNCl5W1qcwPEpU+LgyRXOaAFgH0KhwD18wwg6ug==",
      "license": "MIT",
      "dependencies": {
        "@svgr/babel-plugin-add-jsx-attribute": "8.0.0",
        "@svgr/babel-plugin-remove-jsx-attribute": "8.0.0",
        "@svgr/babel-plugin-remove-jsx-empty-expression": "8.0.0",
        "@svgr/babel-plugin-replace-jsx-attribute-value": "8.0.0",
        "@svgr/babel-plugin-svg-dynamic-title": "8.0.0",
        "@svgr/babel-plugin-svg-em-dimensions": "8.0.0",
        "@svgr/babel-plugin-transform-react-native-svg": "8.1.0",
        "@svgr/babel-plugin-transform-svg-component": "8.0.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@svgr/core": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@svgr/core/-/core-8.1.0.tgz",
      "integrity": "sha512-8QqtOQT5ACVlmsvKOJNEaWmRPmcojMOzCz4Hs2BGG/toAp/K38LcsMRyLp349glq5AzJbCEeimEoxaX6v/fLrA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.21.3",
        "@svgr/babel-preset": "8.1.0",
        "camelcase": "^6.2.0",
        "cosmiconfig": "^8.1.3",
        "snake-case": "^3.0.4"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/hast-util-to-babel-ast": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-8.0.0.tgz",
      "integrity": "sha512-EbDKwO9GpfWP4jN9sGdYwPBU0kdomaPIL2Eu4YwmgP+sJeXT+L7bMwJUBnhzfH8Q2qMBqZ4fJwpCyYsAN3mt2Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.21.3",
        "entities": "^4.4.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-jsx": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-jsx/-/plugin-jsx-8.1.0.tgz",
      "integrity": "sha512-0xiIyBsLlr8quN+WyuxooNW9RJ0Dpr8uOnH/xrCVO8GLUcwHISwj1AG0k+LFzteTkAA0GbX0kj9q6Dk70PTiPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.21.3",
        "@svgr/babel-preset": "8.1.0",
        "@svgr/hast-util-to-babel-ast": "8.0.0",
        "svg-parser": "^2.0.4"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      },
      "peerDependencies": {
        "@svgr/core": "*"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.0.12",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.0.12.tgz",
      "integrity": "sha512-V6Ar115dBDrjbtXSrS+/Oruobc+qVbbUxDFC1RSbRqLt5SYvxxyIDrSC85RWml54g+jfNeEMZhEj7wW07ONQhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.0.4",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.0.4.tgz",
      "integrity": "sha512-4fSQ8vWFkg+TGhePfUzVmat3eC14TXYSsiiDSLI0dVLsrm9gZFABjPy/Qu6TKgl1tq1Bu1yDsuQgY3A3DOjCcg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.4.tgz",
      "integrity": "sha512-SCCPBJtYLdE8PX/7ZQAs1QAZ8Jqwih+0VBLum1EGqmCCQal+MIUqLCzj3ZUy8ufbC0cAM4LRlSTm7IQJwWT4ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.26.0",
        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.14.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.8.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.4.tgz",
      "integrity": "sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001688",
        "electron-to-chromium": "^1.5.73",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.1"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001706",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001706.tgz",
      "integrity": "sha512-3ZczoTApMAZwPKYWmwVbQMFpXBDds3/0VciVoUwPUbldlYyVLmRVuRs/PcUZtHpbLRpzzDvrvnFuREsGt6lUug==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "8.3.6",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-8.3.6.tgz",
      "integrity": "sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==",
      "license": "MIT",
      "dependencies": {
        "import-fresh": "^3.3.0",
        "js-yaml": "^4.1.0",
        "parse-json": "^5.2.0",
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/d-fischer"
      },
      "peerDependencies": {
        "typescript": ">=4.9.5"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.122",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.122.tgz",
      "integrity": "sha512-EML1wnwkY5MFh/xUnCvY8FrhUuKzdYhowuZExZOfwJo+Zu9OsNCI23Cgl5y7awy7HrUHSwB1Z8pZX5TI34lsUg==",
      "license": "ISC"
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.1.tgz",
      "integrity": "sha512-BGO5LtrGC7vxnqucAe/rmvKdJllfGaYWdyABvyMoXQlfYMb2bbRuReWR5tEGE//4LcNJj9XrkovTqNYRFZHAMQ==",
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.1",
        "@esbuild/android-arm": "0.25.1",
        "@esbuild/android-arm64": "0.25.1",
        "@esbuild/android-x64": "0.25.1",
        "@esbuild/darwin-arm64": "0.25.1",
        "@esbuild/darwin-x64": "0.25.1",
        "@esbuild/freebsd-arm64": "0.25.1",
        "@esbuild/freebsd-x64": "0.25.1",
        "@esbuild/linux-arm": "0.25.1",
        "@esbuild/linux-arm64": "0.25.1",
        "@esbuild/linux-ia32": "0.25.1",
        "@esbuild/linux-loong64": "0.25.1",
        "@esbuild/linux-mips64el": "0.25.1",
        "@esbuild/linux-ppc64": "0.25.1",
        "@esbuild/linux-riscv64": "0.25.1",
        "@esbuild/linux-s390x": "0.25.1",
        "@esbuild/linux-x64": "0.25.1",
        "@esbuild/netbsd-arm64": "0.25.1",
        "@esbuild/netbsd-x64": "0.25.1",
        "@esbuild/openbsd-arm64": "0.25.1",
        "@esbuild/openbsd-x64": "0.25.1",
        "@esbuild/sunos-x64": "0.25.1",
        "@esbuild/win32-arm64": "0.25.1",
        "@esbuild/win32-ia32": "0.25.1",
        "@esbuild/win32-x64": "0.25.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.22.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.22.0.tgz",
      "integrity": "sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.19.2",
        "@eslint/config-helpers": "^0.1.0",
        "@eslint/core": "^0.12.0",
        "@eslint/eslintrc": "^3.3.0",
        "@eslint/js": "9.22.0",
        "@eslint/plugin-kit": "^0.2.7",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.3.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.19",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.19.tgz",
      "integrity": "sha512-eyy8pcr/YxSYjBoqIFSrlbn9i/xvxUFa8CjzAYo9cFjgGXqq1hyjihcpZvxRLalpaWmueWR81xn7vuKmAFijDQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fdir": {
      "version": "6.4.4",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "15.15.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.15.0.tgz",
      "integrity": "sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "19.0.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.0.0.tgz",
      "integrity": "sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.0.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.0.0.tgz",
      "integrity": "sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.25.0"
      },
      "peerDependencies": {
        "react": "^19.0.0"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "7.5.2",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.5.2.tgz",
      "integrity": "sha512-9Rw8r199klMnlGZ8VAsV/I8WrIF6IyJ90JQUdboupx1cdkgYqwnrYjH+I/nY/7cA1X5zia4mDJqH36npP7sxGQ==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^1.0.1",
        "set-cookie-parser": "^2.6.0",
        "turbo-stream": "2.4.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/react-router-dom": {
      "version": "7.5.2",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.5.2.tgz",
      "integrity": "sha512-yk1XW8Fj7gK7flpYBXF3yzd2NbX6P7Kxjvs2b5nu1M04rb5pg/Zc4fGdBNTeT4eDYL2bvzWNyKaIMJX/RKHTTg==",
      "license": "MIT",
      "dependencies": {
        "react-router": "7.5.2"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.1.tgz",
      "integrity": "sha512-v8PUTUlyiDe56qUj82w/EDVuzEFXwEHp9/xOowGAZwfLjB9uAy3GllQVIYMWF6nU+qibx85WF75zD7AjqoT54Q==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.14.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
      "license": "MIT"
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.36.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.36.0.tgz",
      "integrity": "sha512-zwATAXNQxUcd40zgtQG0ZafcRK4g004WtEl7kbuhTWPvf07PsfohXl39jVUvPF7jvNAIkKPQ2XrsDlWuxBd++Q==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.36.0",
        "@rollup/rollup-android-arm64": "4.36.0",
        "@rollup/rollup-darwin-arm64": "4.36.0",
        "@rollup/rollup-darwin-x64": "4.36.0",
        "@rollup/rollup-freebsd-arm64": "4.36.0",
        "@rollup/rollup-freebsd-x64": "4.36.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.36.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.36.0",
        "@rollup/rollup-linux-arm64-gnu": "4.36.0",
        "@rollup/rollup-linux-arm64-musl": "4.36.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.36.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.36.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.36.0",
        "@rollup/rollup-linux-s390x-gnu": "4.36.0",
        "@rollup/rollup-linux-x64-gnu": "4.36.0",
        "@rollup/rollup-linux-x64-musl": "4.36.0",
        "@rollup/rollup-win32-arm64-msvc": "4.36.0",
        "@rollup/rollup-win32-ia32-msvc": "4.36.0",
        "@rollup/rollup-win32-x64-msvc": "4.36.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.25.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.25.0.tgz",
      "integrity": "sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/snake-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/svg-parser": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/svg-parser/-/svg-parser-2.0.4.tgz",
      "integrity": "sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==",
      "license": "MIT"
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
      "integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/turbo-stream": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/turbo-stream/-/turbo-stream-2.4.0.tgz",
      "integrity": "sha512-FHncC10WpBd2eOmGwpmQsWLDoK4cqsA/UT/GqNoaKOQnT8uzhtCbg3EoUDMvqpOSAI0S26mr0rkjzbOO6S3v1g==",
      "license": "ISC"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "6.3.3",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.3.tgz",
      "integrity": "sha512-5nXH+QsELbFKhsEfWLkHrvgRpTdGJzqOZ+utSdmPTvwHmvU6ITTm3xx+mRusihkcI8GeC7lCDyn3kDtiki9scw==",
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.13"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite-plugin-svgr": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/vite-plugin-svgr/-/vite-plugin-svgr-4.3.0.tgz",
      "integrity": "sha512-Jy9qLB2/PyWklpYy0xk0UU3TlU0t2UMpJXZvf+hWII1lAmRHrOUKi11Uw8N3rxoNk7atZNYO3pR3vI1f7oi+6w==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^5.1.3",
        "@svgr/core": "^8.1.0",
        "@svgr/plugin-jsx": "^8.1.0"
      },
      "peerDependencies": {
        "vite": ">=2.6.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yazlab-frontend": {
      "resolved": "",
      "link": true
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      // /api ile başlayan istekleri backend'e yönlendir
      '/api': {
        target: 'http://127.0.0.1:8000',
        changeOrigin: true,
        // secure: false, // HTTPS + self-signed sertifika ise açılabilir
      },
    },
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    emptyOutDir: true,
    rollupOptions: {
      output: {
        manualChunks: undefined,
      },
    },
  },
  // Base URL boş, tüm yollar göreceli => index.html'de <link href="assets/…"> olarak kullanılır
  base: '',
})
#!/usr/bin/env python
"""
AcademicPortal - Frontend ve Backend'i aynı porttan çalıştırmak için script
"""

import os
import subprocess
import sys
import time
import webbrowser
from pathlib import Path

def run_command(command, cwd=None, shell=True):
    """Komutu çalıştır ve çıktıyı göster"""
    process = subprocess.Popen(
        command,
        cwd=cwd,
        shell=shell,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        bufsize=1
    )
    
    # Çıktıyı gerçek zamanlı olarak göster
    for line in process.stdout:
        print(line, end='')
    
    return process

def main():
    # Proje kök dizinini bul
    root_dir = Path(__file__).parent.absolute()
    frontend_dir = root_dir / 'frontend'
    backend_dir = root_dir / 'backend'
    
    print("=" * 80)
    print("AcademicPortal - Frontend ve Backend'i aynı porttan çalıştırma")
    print("=" * 80)
    
    # Frontend build işlemi
    print("\n1. Frontend build işlemi başlatılıyor...")
    build_cmd = "npm run build"
    build_process = run_command(build_cmd, cwd=frontend_dir)
    build_process.wait()
    
    if build_process.returncode != 0:
        print("Frontend build işlemi başarısız oldu!")
        sys.exit(1)
    
    print("\nFrontend build işlemi tamamlandı.")
    
    # Backend'i başlat
    print("\n2. Backend sunucusu başlatılıyor...")
    backend_cmd = "python manage.py runserver 0.0.0.0:8000"
    backend_process = run_command(backend_cmd, cwd=backend_dir)
    
    # Tarayıcıyı aç
    print("\n3. Tarayıcı açılıyor...")
    time.sleep(2)  # Sunucunun başlaması için bekle
    webbrowser.open("http://localhost:8000")
    
    try:
        # Backend sürecini çalışır durumda tut
        backend_process.wait()
    except KeyboardInterrupt:
        print("\nSunucu kapatılıyor...")
        backend_process.terminate()
        backend_process.wait()
        print("Sunucu kapatıldı.")

if __name__ == "__main__":
    main() {
  "name": "yazlab-develop",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}
